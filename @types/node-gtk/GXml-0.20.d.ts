/**
 * GXml-0.20
 */

import "node"
import type { libxml2 } from './libxml2-2.0';
import type { Gio } from './Gio-2.0';
import type { GObject } from './GObject-2.0';
import type { GLib } from './GLib-2.0';
import type { Gee } from './Gee-0.8';

export declare namespace GXml {

export enum CssCombiner {
    NULL,
    NONE,
    INSIDE,
    AND,
    PARENT,
    AFTER,
    PRECEDED,
}
export enum CssSelectorType {
    CLASS,
    ID,
    ALL,
    ELEMENT,
    ATTRIBUTE,
    ATTRIBUTE_EQUAL,
    ATTRIBUTE_CONTAINS,
    ATTRIBUTE_SUBSTRING,
    ATTRIBUTE_STARTS_WITH,
    ATTRIBUTE_STARTS_WITH_WORD,
    ATTRIBUTE_ENDS_WITH,
    PSEUDO_CLASS,
}
export enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
export enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
export enum CssSelectorError {
    NULL,
    EOF,
    NOT,
    PSEUDO,
    ATTRIBUTE,
    IDENTIFIER,
    COMBINER,
}
export enum DomDocumentError {
    FILE_NOT_FOUND_ERROR,
    INVALID_DOCUMENT_ERROR,
}
export enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
export enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
export enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
export enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
export enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
export enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
export enum XPathObjectError {
    INVALID_NAMESPACE_ERROR,
}
export enum DomNodeFilterFilter {
    ACCEPT,
    REJECT,
    SKIP,
}
export enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
export enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
export enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
export enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
export enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
export interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
export interface Collection_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    itemsType?: GObject.Type
}
export class Collection {
    /* Properties of GXml-0.20.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Collection */
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    getLength(): number
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Collection_ConstructProps)
    _init (config?: Collection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface List_ConstructProps extends GObject.Object_ConstructProps {
}
export class List {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: List, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: List_ConstructProps)
    _init (config?: List_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElement_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElement {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.MappeableElement */
    getMapKey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElement_ConstructProps)
    _init (config?: MappeableElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Map_ConstructProps extends GObject.Object_ConstructProps {
    attributeKey?: string
}
export class Map {
    /* Properties of GXml-0.20.GXml.Map */
    attributeKey: string
    readonly keysSet: Gee.Set
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Map */
    getAttributeKey(): string
    setAttributeKey(value: string): void
    item(key: string): DomElement | null
    hasKey(key: string): boolean
    getKeysSet(): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys-set", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Map_ConstructProps)
    _init (config?: Map_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementPairKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementPairKey {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.MappeableElementPairKey */
    getMapPrimaryKey(): string
    getMapSecondaryKey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementPairKey, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementPairKey_ConstructProps)
    _init (config?: MappeableElementPairKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface PairedMap_ConstructProps extends GObject.Object_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
}
export class PairedMap {
    /* Properties of GXml-0.20.GXml.PairedMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    readonly primaryKeysSet: Gee.Set
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.PairedMap */
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PairedMap_ConstructProps)
    _init (config?: PairedMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementThreeKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementThreeKey {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.MappeableElementThreeKey */
    getMapPkey(): string
    getMapSkey(): string
    getMapTkey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementThreeKey, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementThreeKey_ConstructProps)
    _init (config?: MappeableElementThreeKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ThreeMap_ConstructProps extends GObject.Object_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    attributeThirdKey?: string
}
export class ThreeMap {
    /* Properties of GXml-0.20.GXml.ThreeMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    attributeThirdKey: string
    readonly primaryKeysSet: Gee.Set
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.ThreeMap */
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    thirdKeysSet(pkey: string, skey: string): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-third-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ThreeMap_ConstructProps)
    _init (config?: ThreeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface CollectionParent_ConstructProps extends GObject.Object_ConstructProps {
}
export class CollectionParent {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CollectionParent */
    getTypes(): GLib.HashTable
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CollectionParent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CollectionParent_ConstructProps)
    _init (config?: CollectionParent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static addSupportedType(types: GLib.HashTable, parentType: GObject.Type, type: GObject.Type): void
    static addSupportedTypes(table: GLib.HashTable, parentType: GObject.Type, types: GObject.Type[]): void
    static $gtype: GObject.Type
}
export interface DomAttr_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class DomAttr {
    /* Properties of GXml-0.20.GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly name: string
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomAttr_ConstructProps)
    _init (config?: DomAttr_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCharacterData_ConstructProps extends GObject.Object_ConstructProps {
    data?: string
}
export class DomCharacterData {
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCharacterData_ConstructProps)
    _init (config?: DomCharacterData_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomText_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomText {
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomText_ConstructProps)
    _init (config?: DomText_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomProcessingInstruction_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomProcessingInstruction {
    /* Properties of GXml-0.20.GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomProcessingInstruction_ConstructProps)
    _init (config?: DomProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomComment_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomComment {
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomComment_ConstructProps)
    _init (config?: DomComment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonElementParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonElementParentNode {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonElementParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonElementParentNode_ConstructProps)
    _init (config?: DomNonElementParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomParentNode {
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomParentNode_ConstructProps)
    _init (config?: DomParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonDocumentTypeChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonDocumentTypeChildNode {
    /* Properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonDocumentTypeChildNode_ConstructProps)
    _init (config?: DomNonDocumentTypeChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomChildNode {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomChildNode */
    remove(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomChildNode_ConstructProps)
    _init (config?: DomChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNodeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeList {
    /* Properties of GXml-0.20.GXml.DomNodeList */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeList_ConstructProps)
    _init (config?: DomNodeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomHTMLCollection_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomHTMLCollection {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    getLength(): number
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomHTMLCollection_ConstructProps)
    _init (config?: DomHTMLCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeIterator {
    /* Properties of GXml-0.20.GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNodeIterator */
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GXml-0.20.GXml.DomNodeIterator */
    connect(sigName: "accept-node", callback: (($obj: DomNodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    on(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: (node: DomNode) => void): NodeJS.EventEmitter
    emit(sigName: "accept-node", node: DomNode): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeIterator_ConstructProps)
    _init (config?: DomNodeIterator_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTreeWalker {
    /* Properties of GXml-0.20.GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly currentNode: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomTreeWalker */
    getRoot(): DomNode
    getWhatToShow(): number
    getCurrentNode(): DomNode
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GXml-0.20.GXml.DomTreeWalker */
    connect(sigName: "accept-node", callback: (($obj: DomTreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    on(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: (node: DomNode) => void): NodeJS.EventEmitter
    emit(sigName: "accept-node", node: DomNode): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTreeWalker_ConstructProps)
    _init (config?: DomTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNamedNodeMap_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNamedNodeMap {
    /* Properties of GXml-0.20.GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNamedNodeMap */
    getLength(): number
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNamedNodeMap_ConstructProps)
    _init (config?: DomNamedNodeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomTokenList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTokenList {
    /* Properties of GXml-0.20.GXml.DomTokenList */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomTokenList */
    getLength(): number
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTokenList_ConstructProps)
    _init (config?: DomTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomSettableTokenList_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class DomSettableTokenList {
    /* Properties of GXml-0.20.GXml.DomSettableTokenList */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomSettableTokenList_ConstructProps)
    _init (config?: DomSettableTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocument {
    /* Properties of GXml-0.20.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomDocument */
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number): DomTreeWalker
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    readFromFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    readFromStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    getXmlParser(): Parser
    setXmlParser(parser: Parser): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocument_ConstructProps)
    _init (config?: DomDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomXMLDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomXMLDocument {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomXMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomXMLDocument_ConstructProps)
    _init (config?: DomXMLDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomImplementation {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): DomDocument
    hasFeature(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomImplementation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomImplementation_ConstructProps)
    _init (config?: DomImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentFragment_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentFragment {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentFragment_ConstructProps)
    _init (config?: DomDocumentFragment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentType_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentType {
    /* Properties of GXml-0.20.GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentType_ConstructProps)
    _init (config?: DomDocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomHtmlDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomHtmlDocument {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomHtmlDocument */
    readFromString(str: string): void
    readFromStringTolerant(str: string): void
    toHtml(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomHtmlDocument_ConstructProps)
    _init (config?: DomHtmlDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomElement_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    className?: string
}
export class DomElement {
    /* Properties of GXml-0.20.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomElement */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    matches(selectors: string): boolean
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElement_ConstructProps)
    _init (config?: DomElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventTarget_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventTarget {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventTarget, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventTarget_ConstructProps)
    _init (config?: DomEventTarget_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventListener_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventListener {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomEventListener */
    handleEvent(event: DomEvent): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventListener, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventListener_ConstructProps)
    _init (config?: DomEventListener_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEvent {
    /* Properties of GXml-0.20.GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomEvent */
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEvent_ConstructProps)
    _init (config?: DomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCustomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomCustomEvent {
    /* Properties of GXml-0.20.GXml.DomCustomEvent */
    readonly detail: any
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomCustomEvent */
    getDetail(): { result: any }
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail: any): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEvent_ConstructProps)
    _init (config?: DomCustomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationObserver_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomMutationObserver {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomMutationObserver */
    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    takeRecords(): Gee.List
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserver, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserver_ConstructProps)
    _init (config?: DomMutationObserver_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationRecord_ConstructProps extends GObject.Object_ConstructProps {
    addedNodes?: DomNodeList
    removedNodes?: DomNodeList
}
export class DomMutationRecord {
    /* Properties of GXml-0.20.GXml.DomMutationRecord */
    readonly mtype: string
    readonly target: DomNode
    addedNodes: DomNodeList
    removedNodes: DomNodeList
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    readonly attributeName: string
    readonly attributeNamespace: string
    readonly oldValue: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomMutationRecord */
    getMtype(): string
    getTarget(): DomNode
    getAddedNodes(): DomNodeList
    setAddedNodes(value: DomNodeList): void
    getRemovedNodes(): DomNodeList
    setRemovedNodes(value: DomNodeList): void
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getAttributeName(): string | null
    getAttributeNamespace(): string | null
    getOldValue(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationRecord_ConstructProps)
    _init (config?: DomMutationRecord_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNode_ConstructProps extends GObject.Object_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class DomNode {
    /* Properties of GXml-0.20.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomNode */
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNode_ConstructProps)
    _init (config?: DomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface DomRange_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomRange {
    /* Properties of GXml-0.20.GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomRange */
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomRange_ConstructProps)
    _init (config?: DomRange_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSchema_ConstructProps extends GObject.Object_ConstructProps {
    elementDefinitions?: IXsdListElements
    simpleTypeDefinitions?: IXsdListSimpleTypes
    complexTypeDefinitions?: IXsdListComplexTypes
}
export class IXsdSchema {
    /* Properties of GXml-0.20.GXml.IXsdSchema */
    elementDefinitions: IXsdListElements
    simpleTypeDefinitions: IXsdListSimpleTypes
    complexTypeDefinitions: IXsdListComplexTypes
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdSchema */
    getElementDefinitions(): IXsdListElements
    setElementDefinitions(value: IXsdListElements): void
    getSimpleTypeDefinitions(): IXsdListSimpleTypes
    setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    getComplexTypeDefinitions(): IXsdListComplexTypes
    setComplexTypeDefinitions(value: IXsdListComplexTypes): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSchema_ConstructProps)
    _init (config?: IXsdSchema_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseType_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseType {
    /* Properties of GXml-0.20.GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdBaseType */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseType_ConstructProps)
    _init (config?: IXsdBaseType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleType_ConstructProps extends GObject.Object_ConstructProps {
    final?: string
    id?: string
    name?: string
    annotation?: IXsdAnnotation
    list?: IXsdTypeList
    union?: IXsdTypeUnion
    restriction?: IXsdTypeRestriction
}
export class IXsdSimpleType {
    /* Properties of GXml-0.20.GXml.IXsdSimpleType */
    final: string
    id: string
    name: string
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getId(): string
    setId(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    getList(): IXsdTypeList
    setList(value: IXsdTypeList): void
    getUnion(): IXsdTypeUnion
    setUnion(value: IXsdTypeUnion): void
    getRestriction(): IXsdTypeRestriction
    setRestriction(value: IXsdTypeRestriction): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleType_ConstructProps)
    _init (config?: IXsdSimpleType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeDef_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeDef {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeDef_ConstructProps)
    _init (config?: IXsdTypeDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestriction_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
    id?: string
    simpleType?: IXsdSimpleType
    enumerations?: IXsdListTypeRestrictionEnumerations
    whiteSpaces?: IXsdListTypeRestrictionWhiteSpaces
}
export class IXsdTypeRestriction {
    /* Properties of GXml-0.20.GXml.IXsdTypeRestriction */
    base: string
    id: string
    simpleType: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    whiteSpaces: IXsdListTypeRestrictionWhiteSpaces
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getId(): string
    setId(value: string): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getEnumerations(): IXsdListTypeRestrictionEnumerations
    setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestriction_ConstructProps)
    _init (config?: IXsdTypeRestriction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeList {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeList_ConstructProps)
    _init (config?: IXsdTypeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeUnion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeUnion {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeUnion_ConstructProps)
    _init (config?: IXsdTypeUnion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionDef_ConstructProps extends GObject.Object_ConstructProps {
    annotation?: IXsdAnnotation
}
export class IXsdTypeRestrictionDef {
    /* Properties of GXml-0.20.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionDef_ConstructProps)
    _init (config?: IXsdTypeRestrictionDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinExclusive {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinInclusive {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxExclusive {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxInclusive {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionTotalDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionTotalDigits {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionTotalDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionFractionDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionFractionDigits {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionFractionDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionLength {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinLength {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxLength {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionEnumeration_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    value?: string
}
export class IXsdTypeRestrictionEnumeration {
    /* Properties of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration */
    id: string
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration */
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: IXsdTypeRestrictionEnumeration_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionWhiteSpace_ConstructProps extends GObject.Object_ConstructProps {
    fixed?: boolean
    id?: string
    value?: string
}
export class IXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace */
    fixed: boolean
    id: string
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace */
    getFixed(): boolean
    setFixed(value: boolean): void
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionPattern_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionPattern {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: IXsdTypeRestrictionPattern_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionAssertion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionAssertion {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: IXsdTypeRestrictionAssertion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionExplicitTimezone_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionExplicitTimezone {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexType_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: IXsdBaseContent
}
export class IXsdComplexType {
    /* Properties of GXml-0.20.GXml.IXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: IXsdBaseContent
    readonly typeAttributes: IXsdListAttributes
    readonly groupAttributes: IXsdListAttributesGroup
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): IXsdBaseContent
    setContentType(value: IXsdBaseContent): void
    getTypeAttributes(): IXsdListAttributes
    getGroupAttributes(): IXsdListAttributesGroup
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexType_ConstructProps)
    _init (config?: IXsdComplexType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdExtension_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
}
export class IXsdExtension {
    /* Properties of GXml-0.20.GXml.IXsdExtension */
    base: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdExtension_ConstructProps)
    _init (config?: IXsdExtension_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdElement_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    id?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: IXsdAnnotation
    simpleType?: IXsdSimpleType
    complexType?: IXsdComplexType
}
export class IXsdElement {
    /* Properties of GXml-0.20.GXml.IXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    id: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: IXsdAnnotation
    simpleType: IXsdSimpleType
    complexType: IXsdComplexType
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getId(): string | null
    setId(value?: string | null): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getComplexType(): IXsdComplexType
    setComplexType(value: IXsdComplexType): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdElement_ConstructProps)
    _init (config?: IXsdElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAnnotation_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAnnotation {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAnnotation_ConstructProps)
    _init (config?: IXsdAnnotation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseContent_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseContent {
    /* Properties of GXml-0.20.GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseContent_ConstructProps)
    _init (config?: IXsdBaseContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdSimpleContent {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleContent_ConstructProps)
    _init (config?: IXsdSimpleContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdComplexContent {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexContent_ConstructProps)
    _init (config?: IXsdComplexContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdOpenContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdOpenContent {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdOpenContent_ConstructProps)
    _init (config?: IXsdOpenContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseAttribute_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseAttribute {
    /* Properties of GXml-0.20.GXml.IXsdBaseAttribute */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdBaseAttribute */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseAttribute_ConstructProps)
    _init (config?: IXsdBaseAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttribute_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttribute {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttribute_ConstructProps)
    _init (config?: IXsdAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttributeGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttributeGroup {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttributeGroup_ConstructProps)
    _init (config?: IXsdAttributeGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdList_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
export class IXsdList {
    /* Properties of GXml-0.20.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.IXsdList */
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdList_ConstructProps)
    _init (config?: IXsdList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListElements_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListElements {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListElements_ConstructProps)
    _init (config?: IXsdListElements_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListSimpleTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListSimpleTypes {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListSimpleTypes_ConstructProps)
    _init (config?: IXsdListSimpleTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListComplexTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListComplexTypes {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListComplexTypes_ConstructProps)
    _init (config?: IXsdListComplexTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributes {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributes_ConstructProps)
    _init (config?: IXsdListAttributes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributesGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributesGroup {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributesGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributesGroup_ConstructProps)
    _init (config?: IXsdListAttributesGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionEnumerations_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionEnumerations {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: IXsdListTypeRestrictionEnumerations_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionWhiteSpaces {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Object_ConstructProps extends GObject.Object_ConstructProps {
}
export class Object {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Object */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(nick: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string): string | null
    findProperty(name: string): Property | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Parser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
    cancellable?: Gio.Cancellable
}
export class Parser {
    /* Properties of GXml-0.20.GXml.Parser */
    backup: boolean
    indent: boolean
    cancellable: Gio.Cancellable
    readonly node: DomNode
    readonly types: GLib.HashTable
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Parser */
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getCancellable(): Gio.Cancellable | null
    setCancellable(value?: Gio.Cancellable | null): void
    getNode(): DomNode
    getTypes(): GLib.HashTable
    writeFile(file: Gio.File): void
    writeFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    readFile(file: Gio.File): void
    readFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    readFileFinish(res: Gio.AsyncResult): void
    readStream(stream: Gio.InputStream): void
    readStreamAsync(stream: Gio.InputStream, callback?: Gio.AsyncReadyCallback | null): void
    readStreamFinish(res: Gio.AsyncResult): void
    readString(str: string): void
    readStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readStringFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    readChildNodes(parent: DomNode): void
    readChildNodesAsync(parent: DomNode, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesFinish(res: Gio.AsyncResult): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): { returnType: boolean, element: DomNode }
    addElementCollection(parent: DomNode): { returnType: boolean, element: DomNode }
    readChildNodesStream(istream: Gio.InputStream): void
    readChildNodesString(str: string): void
    readUnparsed(): string
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancellable", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancellable", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::types", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::types", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Parser_ConstructProps)
    _init (config?: Parser_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Property_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class Property {
    /* Properties of GXml-0.20.GXml.Property */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Property */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Property_ConstructProps)
    _init (config?: Property_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathContext_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathContext {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathContext, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathContext_ConstructProps)
    _init (config?: XPathContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathObject {
    /* Properties of GXml-0.20.GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathObject_ConstructProps)
    _init (config?: XPathObject_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ArrayList_ConstructProps extends BaseCollection_ConstructProps {
}
export class ArrayList {
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ArrayList_ConstructProps)
    _init (config?: ArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ArrayList
    static $gtype: GObject.Type
}
export interface Attr_ConstructProps extends Node_ConstructProps {
    value?: string
}
export class Attr {
    /* Properties of GXml-0.20.GXml.Attr */
    readonly isReferenced: boolean
    /* Properties of GXml-0.20.GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly name: string
    value: string
    /* Fields of GXml-0.20.GXml.Attr */
    prop: Property
    /* Fields of GXml-0.20.GXml.Node */
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Attr */
    getIsReferenced(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::is-referenced", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-referenced", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-referenced", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-referenced", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-referenced", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Attr_ConstructProps)
    _init (config?: Attr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: DomElement, name: string, val: string): Attr
    static new(): Attr
    static namespace(element: DomElement, namespaceUri: string, prefix: string | null, name: string, val: string): Attr
    static reference(element: DomElement, name: string): Attr
    static $gtype: GObject.Type
}
export interface BaseCollection_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    itemsType?: GObject.Type
}
export class BaseCollection {
    /* Properties of GXml-0.20.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of GXml-0.20.GXml.Collection */
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    getLength(): number
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BaseCollection_ConstructProps)
    _init (config?: BaseCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface CssSelector_ConstructProps extends GObject.Object_ConstructProps {
    selectorType?: CssSelectorType
    name?: string
    value?: string
    combiner?: CssCombiner
}
export class CssSelector {
    /* Properties of GXml-0.20.GXml.CssSelector */
    selectorType: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CssSelector */
    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getName(): string
    setName(value: string): void
    getValue(): string
    setValue(value: string): void
    getCombiner(): CssCombiner
    setCombiner(value: CssCombiner): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selector-type", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::combiner", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssSelector_ConstructProps)
    _init (config?: CssSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(t: CssSelectorType, name: string): CssSelector
    static withValue(t: CssSelectorType, name: string, value: string): CssSelector
    static $gtype: GObject.Type
}
export interface CssElementSelector_ConstructProps extends CssSelector_ConstructProps {
    prefix?: string
    localName?: string
}
export class CssElementSelector {
    /* Properties of GXml-0.20.GXml.CssElementSelector */
    readonly prefixed: boolean
    prefix: string
    localName: string
    /* Properties of GXml-0.20.GXml.CssSelector */
    selectorType: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CssElementSelector */
    getPrefixed(): boolean
    getPrefix(): string | null
    setPrefix(value?: string | null): void
    getLocalName(): string
    setLocalName(value: string): void
    /* Methods of GXml-0.20.GXml.CssSelector */
    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getName(): string
    setName(value: string): void
    getValue(): string
    setValue(value: string): void
    getCombiner(): CssCombiner
    setCombiner(value: CssCombiner): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::prefixed", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefixed", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selector-type", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::combiner", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssElementSelector_ConstructProps)
    _init (config?: CssElementSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(prefix: string | null, localName: string): CssElementSelector
    static new(t: CssSelectorType, name: string): CssElementSelector
    static $gtype: GObject.Type
}
export interface CssAttributeSelector_ConstructProps extends CssSelector_ConstructProps {
    prefix?: string
    localName?: string
}
export class CssAttributeSelector {
    /* Properties of GXml-0.20.GXml.CssAttributeSelector */
    prefix: string
    localName: string
    /* Properties of GXml-0.20.GXml.CssSelector */
    selectorType: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CssAttributeSelector */
    getPrefix(): string | null
    setPrefix(value?: string | null): void
    getLocalName(): string
    setLocalName(value: string): void
    /* Methods of GXml-0.20.GXml.CssSelector */
    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getName(): string
    setName(value: string): void
    getValue(): string
    setValue(value: string): void
    getCombiner(): CssCombiner
    setCombiner(value: CssCombiner): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::prefix", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selector-type", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::combiner", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssAttributeSelector_ConstructProps)
    _init (config?: CssAttributeSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(prefix: string | null, localName: string): CssAttributeSelector
    static new(t: CssSelectorType, name: string): CssAttributeSelector
    static $gtype: GObject.Type
}
export interface CssNotSelector_ConstructProps extends CssSelector_ConstructProps {
}
export class CssNotSelector {
    /* Properties of GXml-0.20.GXml.CssNotSelector */
    readonly selectors: Gee.List
    /* Properties of GXml-0.20.GXml.CssSelector */
    selectorType: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CssNotSelector */
    getSelectors(): Gee.List
    /* Methods of GXml-0.20.GXml.CssSelector */
    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getName(): string
    setName(value: string): void
    getValue(): string
    setValue(value: string): void
    getCombiner(): CssCombiner
    setCombiner(value: CssCombiner): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selectors", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectors", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selector-type", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::combiner", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssNotSelector_ConstructProps)
    _init (config?: CssNotSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CssNotSelector
    static new(t: CssSelectorType, name: string): CssNotSelector
    static $gtype: GObject.Type
}
export interface CssSelectorParser_ConstructProps extends GObject.Object_ConstructProps {
}
export class CssSelectorParser {
    /* Properties of GXml-0.20.GXml.CssSelectorParser */
    readonly selectors: Gee.List
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CssSelectorParser */
    parse(selectors: string): void
    getSelectors(): Gee.List
    match(element: DomElement): boolean
    querySelectorAll(element: DomElement): DomNodeList
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selectors", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectors", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssSelectorParser_ConstructProps)
    _init (config?: CssSelectorParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CssSelectorParser
    static $gtype: GObject.Type
}
export interface Document_ConstructProps extends Node_ConstructProps {
}
export class Document {
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.20.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GXml-0.20.GXml.Document */
    constructor: DomEvent
    parser: Parser
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Document */
    searchRootElementProperty(): Element
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GXml-0.20.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml-0.20.GXml.DomDocument */
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number): DomTreeWalker
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    readFromFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    readFromStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    getXmlParser(): Parser
    setXmlParser(parser: Parser): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Document_ConstructProps)
    _init (config?: Document_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Document
    static fromPath(path: string): Document
    static fromUri(uri: string): Document
    static fromFile(file: Gio.File): Document
    static fromStream(stream: Gio.InputStream): Document
    static fromString(str: string): Document
    static $gtype: GObject.Type
}
export interface Implementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class Implementation {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): DomDocument
    hasFeature(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Implementation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Implementation_ConstructProps)
    _init (config?: Implementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Implementation
    static $gtype: GObject.Type
}
export interface DocumentType_ConstructProps extends Node_ConstructProps {
}
export class DocumentType {
    /* Properties of GXml-0.20.GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.20.GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DocumentType_ConstructProps)
    _init (config?: DocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, name: string, publicId?: string | null, systemId?: string | null): DocumentType
    static new(): DocumentType
    static withName(doc: DomDocument, name: string): DocumentType
    static withIds(doc: DomDocument, name: string, publicId: string, systemId: string): DocumentType
    static $gtype: GObject.Type
}
export interface DocumentFragment_ConstructProps extends Node_ConstructProps {
}
export class DocumentFragment {
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GXml-0.20.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DocumentFragment_ConstructProps)
    _init (config?: DocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): DocumentFragment
    static new(): DocumentFragment
    static $gtype: GObject.Type
}
export interface DomNodeFilter_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeFilter {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeFilter, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeFilter_ConstructProps)
    _init (config?: DomNodeFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomNodeFilter
    static $gtype: GObject.Type
}
export interface DomElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class DomElementList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of Gee-0.8.Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    getLength(): number
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElementList_ConstructProps)
    _init (config?: DomElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomElementList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): DomElementList
    static $gtype: GObject.Type
}
export interface DomEventInit_ConstructProps extends GObject.Object_ConstructProps {
    bubbles?: boolean
    cancelable?: boolean
}
export class DomEventInit {
    /* Properties of GXml-0.20.GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventInit_ConstructProps)
    _init (config?: DomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomEventInit
    static $gtype: GObject.Type
}
export interface DomCustomEventInit_ConstructProps extends DomEventInit_ConstructProps {
    detail?: any
}
export class DomCustomEventInit {
    /* Properties of GXml-0.20.GXml.DomCustomEventInit */
    detail: any
    /* Properties of GXml-0.20.GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomCustomEventInit */
    getDetail(): { result: any }
    setDetail(value: any): void
    /* Methods of GXml-0.20.GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEventInit_ConstructProps)
    _init (config?: DomCustomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomCustomEventInit
    static $gtype: GObject.Type
}
export interface DomTimeStamp_ConstructProps extends GObject.Object_ConstructProps {
    time?: GLib.DateTime
}
export class DomTimeStamp {
    /* Properties of GXml-0.20.GXml.DomTimeStamp */
    time: GLib.DateTime
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomTimeStamp */
    getTime(): GLib.DateTime
    setTime(value: GLib.DateTime): void
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTimeStamp_ConstructProps)
    _init (config?: DomTimeStamp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomTimeStamp
    static $gtype: GObject.Type
}
export interface DomMutationObserverInit_ConstructProps extends GObject.Object_ConstructProps {
    childList?: boolean
    attributes?: boolean
    characterData?: boolean
    subtree?: boolean
    attributeOldValue?: boolean
    characterDataOldValue?: boolean
    attributeFilter?: Gee.List
}
export class DomMutationObserverInit {
    /* Properties of GXml-0.20.GXml.DomMutationObserverInit */
    childList: boolean
    attributes: boolean
    characterData: boolean
    subtree: boolean
    attributeOldValue: boolean
    characterDataOldValue: boolean
    attributeFilter: Gee.List
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomMutationObserverInit */
    getChildList(): boolean
    setChildList(value: boolean): void
    getAttributes(): boolean
    setAttributes(value: boolean): void
    getCharacterData(): boolean
    setCharacterData(value: boolean): void
    getSubtree(): boolean
    setSubtree(value: boolean): void
    getAttributeOldValue(): boolean
    setAttributeOldValue(value: boolean): void
    getCharacterDataOldValue(): boolean
    setCharacterDataOldValue(value: boolean): void
    getAttributeFilter(): Gee.List
    setAttributeFilter(value: Gee.List): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserverInit_ConstructProps)
    _init (config?: DomMutationObserverInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomMutationObserverInit
    static $gtype: GObject.Type
}
export interface DomErrorName_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomErrorName {
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DomErrorName */
    getName(errorCode: number): string
    getCode(errorName: string): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomErrorName, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomErrorName_ConstructProps)
    _init (config?: DomErrorName_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomErrorName
    static $gtype: GObject.Type
}
export interface Element_ConstructProps extends Node_ConstructProps {
    parseChildren?: boolean
    unparsed?: string
    readBuffer?: Gio.MemoryOutputStream
    id?: string
    className?: string
}
export class Element {
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.20.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GXml-0.20.GXml.Node */
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GXml-0.20.GXml.DomElement */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    matches(selectors: string): boolean
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    /* Methods of GXml-0.20.GXml.Object */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(nick: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    findProperty(name: string): Property | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Element_ConstructProps)
    _init (config?: Element_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Element
    static $gtype: GObject.Type
}
export interface ElementAttributes_ConstructProps extends Gee.HashMap_ConstructProps {
}
export class ElementAttributes {
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml-0.20.GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GXml-0.20.GXml.ElementAttributes */
    element: Element
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.ElementAttributes */
    addReference(name: string): void
    /* Methods of Gee-0.8.Gee.HashMap */
    getKeyHashFunc(): { returnType: Gee.HashDataFunc, resultTarget: object | null }
    getKeyEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    getValueEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): { returnType: boolean, value: object | null }
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNamedNodeMap */
    getLength(): number
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ElementAttributes_ConstructProps)
    _init (config?: ElementAttributes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: Element): ElementAttributes
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): ElementAttributes
    static $gtype: GObject.Type
}
export class Enumeration {
    /* Fields of GXml-0.20.GXml.Enumeration */
    refCount: number
    static name: string
    static new(): Enumeration
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Enumeration
    static getNick(enumeration: GObject.Type, val: number): string
    static getNickCamelcase(enumeration: GObject.Type, val: number): string
    static getString(enumeration: GObject.Type, val: number, useNick: boolean, camelcase: boolean): string
    static parse(enumeration: GObject.Type, val: string): GObject.EnumValue | null
    static toArray(enumeration: GObject.Type): GObject.EnumValue[]
    static parseInteger(enumeration: GObject.Type, val: number): GObject.EnumValue | null
    static toStringArray(enumeration: GObject.Type): string[]
}
export interface Event_ConstructProps extends GObject.Object_ConstructProps {
}
export class Event {
    /* Properties of GXml-0.20.GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GXml-0.20.GXml.Event */
    flags: DomEventFlags
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomEvent */
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Event_ConstructProps)
    _init (config?: Event_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Event
    static $gtype: GObject.Type
}
export interface CustomEvent_ConstructProps extends Event_ConstructProps {
}
export class CustomEvent {
    /* Properties of GXml-0.20.GXml.CustomEvent */
    readonly detail: any
    /* Fields of GXml-0.20.GXml.Event */
    etype: string
    eventTarget: DomEventTarget
    currentTarget: DomEventTarget
    bubbles: boolean
    cancelable: boolean
    isTrusted: boolean
    timeStamp: DomTimeStamp
    defaultPrevented: boolean
    eventPhase: DomEventPhase
    flags: DomEventFlags
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.CustomEvent */
    getDetail(): { result: any }
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CustomEvent_ConstructProps)
    _init (config?: CustomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CustomEvent
    static $gtype: GObject.Type
}
export interface HashMap_ConstructProps extends BaseCollection_ConstructProps {
    attributeKey?: string
}
export class HashMap {
    /* Properties of GXml-0.20.GXml.Map */
    attributeKey: string
    readonly keysSet: Gee.Set
    /* Fields of GXml-0.20.GXml.HashMap */
    hashtable: Gee.HashMap
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.HashMap */
    initializeElementWithKey(element: Element, itemsType: GObject.Type, attributeKey: string): void
    initializeWithKey(itemsType: GObject.Type, attributeKey: string): void
    get(key: string): DomElement | null
    getKeys(): string[]
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.Map */
    getAttributeKey(): string
    setAttributeKey(value: string): void
    item(key: string): DomElement | null
    hasKey(key: string): boolean
    getKeysSet(): Gee.Set
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys-set", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HashMap_ConstructProps)
    _init (config?: HashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashMap
    static $gtype: GObject.Type
}
export interface HashPairedMap_ConstructProps extends BaseCollection_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
}
export class HashPairedMap {
    /* Properties of GXml-0.20.GXml.PairedMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    readonly primaryKeysSet: Gee.Set
    /* Fields of GXml-0.20.GXml.HashPairedMap */
    hashtable: Gee.HashMap
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.HashPairedMap */
    initializeElementWithKeys(element: Element, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    get(primaryKey: string, secondaryKey: string): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.PairedMap */
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HashPairedMap_ConstructProps)
    _init (config?: HashPairedMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashPairedMap
    static $gtype: GObject.Type
}
export interface HashThreeMap_ConstructProps extends BaseCollection_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    attributeThirdKey?: string
}
export class HashThreeMap {
    /* Properties of GXml-0.20.GXml.ThreeMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    attributeThirdKey: string
    readonly primaryKeysSet: Gee.Set
    /* Fields of GXml-0.20.GXml.HashThreeMap */
    hashtable: Gee.HashMap
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.HashThreeMap */
    initializeElementWithKeys(element: Element, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    get(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getThirdKeys(pkey: string, skey: string): string[]
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.ThreeMap */
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    thirdKeysSet(pkey: string, skey: string): Gee.Set
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-third-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HashThreeMap_ConstructProps)
    _init (config?: HashThreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashThreeMap
    static $gtype: GObject.Type
}
export interface HTMLCollection_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class HTMLCollection {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of Gee-0.8.Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    getLength(): number
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HTMLCollection_ConstructProps)
    _init (config?: HTMLCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HTMLCollection
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): HTMLCollection
    static $gtype: GObject.Type
}
export interface HtmlDocument_ConstructProps extends Document_ConstructProps {
    html?: DomElement
}
export class HtmlDocument {
    /* Properties of GXml-0.20.GXml.HtmlDocument */
    html: DomElement
    /* Fields of GXml-0.20.GXml.Document */
    implementation: DomImplementation
    url: string
    origin: string
    compatMode: string
    characterSet: string
    contentType: string
    constructor: DomEvent
    parser: Parser
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.HtmlDocument */
    getHtml(): DomElement
    setHtml(value: DomElement): void
    /* Methods of GXml-0.20.GXml.Document */
    searchRootElementProperty(): Element
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::html", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HtmlDocument_ConstructProps)
    _init (config?: HtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HtmlDocument
    static $gtype: GObject.Type
}
export interface HtmlElement_ConstructProps extends Element_ConstructProps {
}
export class HtmlElement {
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HtmlElement_ConstructProps)
    _init (config?: HtmlElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HtmlElement
    static $gtype: GObject.Type
}
export interface LXPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class LXPathObject {
    /* Properties of GXml-0.20.GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LXPathObject_ConstructProps)
    _init (config?: LXPathObject_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(document: XDocument, pointer?: object | null): LXPathObject
    static $gtype: GObject.Type
}
export interface Node_ConstructProps extends GObject.Object_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class Node {
    /* Properties of GXml-0.20.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    parent: DomNode
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.20.GXml.DomNode */
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Node_ConstructProps)
    _init (config?: Node_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Node
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface NodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class NodeList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml-0.20.GXml.DomNodeList */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NodeList_ConstructProps)
    _init (config?: NodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NodeList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): NodeList
    static $gtype: GObject.Type
}
export interface NodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class NodeIterator {
    /* Properties of GXml-0.20.GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNodeIterator */
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.20.GXml.DomNodeIterator */
    connect(sigName: "accept-node", callback: (($obj: NodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    on(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: (node: DomNode) => void): NodeJS.EventEmitter
    emit(sigName: "accept-node", node: DomNode): void
    connect(sigName: "notify::root", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NodeIterator_ConstructProps)
    _init (config?: NodeIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(n: DomNode, whatToShow: number): NodeIterator
    static $gtype: GObject.Type
}
export interface BaseProperty_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class BaseProperty {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BaseProperty_ConstructProps)
    _init (config?: BaseProperty_ConstructProps): void
    static $gtype: GObject.Type
}
export interface String_ConstructProps extends BaseProperty_ConstructProps {
}
export class String {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: String_ConstructProps)
    _init (config?: String_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withString(str: string): String
    static new(): String
    static $gtype: GObject.Type
}
export interface ArrayString_ConstructProps extends BaseProperty_ConstructProps {
}
export class ArrayString {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GXml-0.20.GXml.ArrayString */
    values: string[]
    valuesLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.ArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ArrayString_ConstructProps)
    _init (config?: ArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ArrayString
    static $gtype: GObject.Type
}
export interface XsdArrayString_ConstructProps extends ArrayString_ConstructProps {
    simpleType?: string
    source?: Gio.File
}
export class XsdArrayString {
    /* Properties of GXml-0.20.GXml.XsdArrayString */
    simpleType: string
    source: Gio.File
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GXml-0.20.GXml.ArrayString */
    values: string[]
    valuesLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdArrayString */
    getSimpleType(): string
    setSimpleType(value: string): void
    getSource(): Gio.File
    setSource(value: Gio.File): void
    load(): void
    /* Methods of GXml-0.20.GXml.ArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::simple-type", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::source", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdArrayString_ConstructProps)
    _init (config?: XsdArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdArrayString
    static $gtype: GObject.Type
}
export interface Double_ConstructProps extends BaseProperty_ConstructProps {
    decimals?: number
}
export class Double {
    /* Properties of GXml-0.20.GXml.Double */
    decimals: number
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Double */
    getDecimals(): number
    setDecimals(value: number): void
    getDouble(): number
    setDouble(value: number): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Double_ConstructProps)
    _init (config?: Double_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Double
    static $gtype: GObject.Type
}
export interface Float_ConstructProps extends Double_ConstructProps {
}
export class Float {
    /* Properties of GXml-0.20.GXml.Double */
    decimals: number
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Float */
    getFloat(): number
    setFloat(value: number): void
    /* Methods of GXml-0.20.GXml.Double */
    getDecimals(): number
    setDecimals(value: number): void
    getDouble(): number
    setDouble(value: number): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Float_ConstructProps)
    _init (config?: Float_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Float
    static $gtype: GObject.Type
}
export interface Int_ConstructProps extends BaseProperty_ConstructProps {
}
export class Int {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Int */
    getInteger(): number
    setInteger(value: number): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Int_ConstructProps)
    _init (config?: Int_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Int
    static $gtype: GObject.Type
}
export interface Boolean_ConstructProps extends BaseProperty_ConstructProps {
}
export class Boolean {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Boolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Boolean_ConstructProps)
    _init (config?: Boolean_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Boolean
    static $gtype: GObject.Type
}
export interface Enum_ConstructProps extends BaseProperty_ConstructProps {
    useNick?: boolean
    camelCase?: boolean
    upperCase?: boolean
    enumType?: GObject.Type
}
export class Enum {
    /* Properties of GXml-0.20.GXml.Enum */
    useNick: boolean
    camelCase: boolean
    upperCase: boolean
    enumType: GObject.Type
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GXml-0.20.GXml.Enum */
    val: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Enum */
    getUseNick(): boolean
    setUseNick(value: boolean): void
    getCamelCase(): boolean
    setCamelCase(value: boolean): void
    getUpperCase(): boolean
    setUpperCase(value: boolean): void
    getEnumType(): GObject.Type
    setEnumType(value: GObject.Type): void
    initializeEnum(enumType: GObject.Type): void
    getEnum(): number
    setEnum(value: number): void
    isValid(): boolean
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::use-nick", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-nick", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-nick", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-nick", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-nick", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::camel-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::camel-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::camel-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::camel-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::camel-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::upper-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::upper-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::upper-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::upper-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::upper-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enum-type", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enum-type", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Enum_ConstructProps)
    _init (config?: Enum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Enum
    static $gtype: GObject.Type
}
export interface Date_ConstructProps extends BaseProperty_ConstructProps {
}
export class Date {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Date */
    getDate(): { result: GLib.Date }
    setDate(date: GLib.Date): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Date_ConstructProps)
    _init (config?: Date_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Date
    static $gtype: GObject.Type
}
export interface DateTime_ConstructProps extends BaseProperty_ConstructProps {
    format?: string
}
export class DateTime {
    /* Properties of GXml-0.20.GXml.DateTime */
    format: string
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.DateTime */
    getFormat(): string
    setFormat(value: string): void
    getDatetime(): GLib.DateTime
    setDatetime(dt: GLib.DateTime): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::format", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::format", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DateTime_ConstructProps)
    _init (config?: DateTime_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DateTime
    static $gtype: GObject.Type
}
export interface Range_ConstructProps extends GObject.Object_ConstructProps {
}
export class Range {
    /* Properties of GXml-0.20.GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GXml-0.20.GXml.Range */
    document: DomDocument
    collapse: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomRange */
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Range_ConstructProps)
    _init (config?: Range_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): Range
    static $gtype: GObject.Type
}
export interface SettableTokenList_ConstructProps extends TokenList_ConstructProps {
    value?: string
}
export class SettableTokenList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml-0.20.GXml.DomSettableTokenList */
    value: string
    /* Fields of GXml-0.20.GXml.TokenList */
    element: DomElement
    attr: string
    /* Fields of Gee-0.8.Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.TokenList */
    update(): void
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettableTokenList_ConstructProps)
    _init (config?: SettableTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): SettableTokenList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): SettableTokenList
    static $gtype: GObject.Type
}
export interface StringRef_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class StringRef {
    /* Properties of GXml-0.20.GXml.Property */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.Property */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StringRef_ConstructProps)
    _init (config?: StringRef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(obj: Object, name: string): StringRef
    static $gtype: GObject.Type
}
export interface CharacterData_ConstructProps extends Node_ConstructProps {
    data?: string
}
export class CharacterData {
    /* Properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.20.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CharacterData_ConstructProps)
    _init (config?: CharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CharacterData
    static $gtype: GObject.Type
}
export interface Text_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class Text {
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Text_ConstructProps)
    _init (config?: Text_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): Text
    static new(): Text
    static $gtype: GObject.Type
}
export interface ProcessingInstruction_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class ProcessingInstruction {
    /* Properties of GXml-0.20.GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ProcessingInstruction_ConstructProps)
    _init (config?: ProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, target: string, data: string): ProcessingInstruction
    static new(): ProcessingInstruction
    static $gtype: GObject.Type
}
export interface Comment_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class Comment {
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Comment_ConstructProps)
    _init (config?: Comment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): Comment
    static new(): Comment
    static $gtype: GObject.Type
}
export interface TokenList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class TokenList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml-0.20.GXml.DomTokenList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.TokenList */
    element: DomElement
    attr: string
    /* Fields of Gee-0.8.Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.TokenList */
    update(): void
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): { returnType: Gee.EqualDataFunc, resultTarget: object | null }
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomTokenList */
    getLength(): number
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TokenList_ConstructProps)
    _init (config?: TokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): TokenList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): TokenList
    static $gtype: GObject.Type
}
export interface TreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class TreeWalker {
    /* Properties of GXml-0.20.GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly currentNode: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomTreeWalker */
    getRoot(): DomNode
    getWhatToShow(): number
    getCurrentNode(): DomNode
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.20.GXml.DomTreeWalker */
    connect(sigName: "accept-node", callback: (($obj: TreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    on(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: (node: DomNode) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: (node: DomNode) => void): NodeJS.EventEmitter
    emit(sigName: "accept-node", node: DomNode): void
    connect(sigName: "notify::root", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TreeWalker_ConstructProps)
    _init (config?: TreeWalker_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(root: DomNode, w: number): TreeWalker
    static $gtype: GObject.Type
}
export interface XAttribute_ConstructProps extends XNode_ConstructProps {
    value?: string
}
export class XAttribute {
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getSpecified(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XAttribute_ConstructProps)
    _init (config?: XAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XAttribute
    static $gtype: GObject.Type
}
export interface XCharacterData_ConstructProps extends XNonDocumentChildNode_ConstructProps {
    str?: string
    data?: string
}
export class XCharacterData {
    /* Properties of GXml-0.20.GXml.XCharacterData */
    str: string
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XCharacterData */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XCharacterData_ConstructProps)
    _init (config?: XCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XCharacterData
    static $gtype: GObject.Type
}
export interface XChildNode_ConstructProps extends XNode_ConstructProps {
}
export class XChildNode {
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XChildNode_ConstructProps)
    _init (config?: XChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XChildNode
    static $gtype: GObject.Type
}
export interface XNonDocumentChildNode_ConstructProps extends XChildNode_ConstructProps {
}
export class XNonDocumentChildNode {
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XNonDocumentChildNode_ConstructProps)
    _init (config?: XNonDocumentChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XNonDocumentChildNode
    static $gtype: GObject.Type
}
export interface XComment_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XComment {
    /* Properties of GXml-0.20.GXml.XCharacterData */
    str: string
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XCharacterData */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XComment_ConstructProps)
    _init (config?: XComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XComment
    static new(): XComment
    static $gtype: GObject.Type
}
export interface XDocument_ConstructProps extends XNode_ConstructProps {
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
}
export class XDocument {
    /* Properties of GXml-0.20.GXml.XDocument */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    file: Gio.File
    readonly root: DomNode
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.20.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GXml-0.20.GXml.XDocument */
    doc: object | null
    buffer: any
    parser: Parser
    constructor: DomEvent
    /* Fields of GXml-0.20.GXml.XNode */
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XDocument */
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getFile(): Gio.File
    setFile(value: Gio.File): void
    getRoot(): DomNode
    createPi(target: string, data: string): DomNode
    createText(text: string): DomNode
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GXml-0.20.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml-0.20.GXml.DomDocument */
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number): DomTreeWalker
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    readFromFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    readFromStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    getXmlParser(): Parser
    setXmlParser(parser: Parser): void
    /* Methods of GXml-0.20.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::indent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XDocument_ConstructProps)
    _init (config?: XDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XDocument
    static fromPath(path: string, options: number): XDocument
    static fromUri(uri: string, options: number): XDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): XDocument
    static fromString(str: string, options: number): XDocument
    static fromStream(istream: Gio.InputStream): XDocument
    static fromDoc(doc: libxml2.Doc): XDocument
    static $gtype: GObject.Type
}
export interface XElement_ConstructProps extends XNonDocumentChildNode_ConstructProps {
    content?: string
    id?: string
    className?: string
}
export class XElement {
    /* Properties of GXml-0.20.GXml.XElement */
    content: string
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.20.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XElement */
    setAttr(aname: string, avalue: string): void
    getAttr(name: string): DomNode | null
    setNsAttr(ns: string, aname: string, value: string): void
    getNsAttr(name: string, uri: string): DomNode | null
    normalize(): void
    getContent(): string
    setContent(value: string): void
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomParentNode */
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    /* Methods of GXml-0.20.GXml.DomElement */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    matches(selectors: string): boolean
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string, cancellable?: Gio.Cancellable | null): void
    readFromStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(cancellable?: Gio.Cancellable | null): string
    writeStringAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    /* Methods of GXml-0.20.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XElement_ConstructProps)
    _init (config?: XElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XElement
    static new(): XElement
    static $gtype: GObject.Type
}
export interface XHashMapAttr_ConstructProps extends Gee.AbstractMap_ConstructProps {
}
export class XHashMapAttr {
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml-0.20.GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): { returnType: boolean, value: object | null }
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNamedNodeMap */
    getLength(): number
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XHashMapAttr_ConstructProps)
    _init (config?: XHashMapAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XHashMapAttr
    static $gtype: GObject.Type
}
export interface XHashMapAttrEntry_ConstructProps extends Gee.MapEntry_ConstructProps {
}
export class XHashMapAttrEntry {
    /* Properties of Gee-0.8.Gee.MapEntry */
    readonly key: object
    value: object
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.MapEntry */
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    getReadOnly(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::key", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XHashMapAttrEntry_ConstructProps)
    _init (config?: XHashMapAttrEntry_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, attr?: object | null): XHashMapAttrEntry
    static $gtype: GObject.Type
}
export interface XHashMapAttrIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class XHashMapAttrIterator {
    /* Properties of Gee-0.8.Gee.MapIterator */
    readonly valid: boolean
    readonly mutable: boolean
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee-0.8.Gee.MapIterator */
    next(): boolean
    hasNext(): boolean
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    unset(): void
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldMapFunc, seed?: object | null): object | null
    foreach(f: Gee.ForallMapFunc): boolean
    getValid(): boolean
    getMutable(): boolean
    getReadOnly(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::valid", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mutable", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mutable", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XHashMapAttrIterator_ConstructProps)
    _init (config?: XHashMapAttrIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XHashMapAttrIterator
    static $gtype: GObject.Type
}
export interface XHtmlDocument_ConstructProps extends XDocument_ConstructProps {
}
export class XHtmlDocument {
    /* Properties of GXml-0.20.GXml.XDocument */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    file: Gio.File
    readonly root: DomNode
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml-0.20.GXml.XDocument */
    doc: object | null
    buffer: any
    parser: Parser
    implementation: DomImplementation
    url: string
    origin: string
    compatMode: string
    characterSet: string
    contentType: string
    constructor: DomEvent
    /* Fields of GXml-0.20.GXml.XNode */
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XDocument */
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getFile(): Gio.File
    setFile(value: Gio.File): void
    getRoot(): DomNode
    createPi(target: string, data: string): DomNode
    createText(text: string): DomNode
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomHtmlDocument */
    readFromString(str: string): void
    readFromStringTolerant(str: string): void
    toHtml(): string
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::indent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XHtmlDocument_ConstructProps)
    _init (config?: XHtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static fromPath(path: string, options: number): XHtmlDocument
    static fromUri(uri: string, options: number): XHtmlDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): XHtmlDocument
    static fromString(html: string, options: number): XHtmlDocument
    static fromStringContext(html: string, options: number): XHtmlDocument
    static fromStringDoc(html: string, options: number): XHtmlDocument
    static new(): XHtmlDocument
    static getDefaultOptions(): number
    static $gtype: GObject.Type
}
export interface XListChildren_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
export class XListChildren {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml-0.20.GXml.DomNodeList */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of GXml-0.20.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XListChildren_ConstructProps)
    _init (config?: XListChildren_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XListChildren
    static $gtype: GObject.Type
}
export interface XListChildrenIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class XListChildrenIterator {
    /* Properties of Gee-0.8.Gee.Iterator */
    readonly valid: boolean
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterator */
    next(): boolean
    hasNext(): boolean
    get(): object | null
    remove(): void
    getValid(): boolean
    getReadOnly(): boolean
    /* Methods of Gee-0.8.Gee.BidirIterator */
    previous(): boolean
    hasPrevious(): boolean
    first(): boolean
    last(): boolean
    /* Methods of Gee-0.8.Gee.ListIterator */
    set(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Methods of Gee-0.8.Gee.BidirListIterator */
    insert(item?: object | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::valid", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XListChildrenIterator_ConstructProps)
    _init (config?: XListChildrenIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XListChildrenIterator
    static unfold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.UnfoldFunc, current?: Gee.Lazy | null): Gee.Iterator
    static concat(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, iters: Gee.Iterator): Gee.Iterator
    static $gtype: GObject.Type
}
export interface XNode_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class XNode {
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.20.GXml.DomNode */
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XNode_ConstructProps)
    _init (config?: XNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static toGnode(doc: XDocument, node?: object | null): DomNode
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface XParser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
    cancellable?: Gio.Cancellable
}
export class XParser {
    /* Properties of GXml-0.20.GXml.Parser */
    backup: boolean
    indent: boolean
    cancellable: Gio.Cancellable
    readonly node: DomNode
    readonly types: GLib.HashTable
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XParser */
    readNode(node: DomNode): void
    readChildNodesStreamAsync(istream: Gio.InputStream, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesStreamFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.Parser */
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getCancellable(): Gio.Cancellable | null
    setCancellable(value?: Gio.Cancellable | null): void
    getNode(): DomNode
    getTypes(): GLib.HashTable
    writeFile(file: Gio.File): void
    writeFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    readFile(file: Gio.File): void
    readFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    readFileFinish(res: Gio.AsyncResult): void
    readStream(stream: Gio.InputStream): void
    readStreamAsync(stream: Gio.InputStream, callback?: Gio.AsyncReadyCallback | null): void
    readStreamFinish(res: Gio.AsyncResult): void
    readString(str: string): void
    readStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readStringFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    readChildNodes(parent: DomNode): void
    readChildNodesAsync(parent: DomNode, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesFinish(res: Gio.AsyncResult): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): { returnType: boolean, element: DomNode }
    addElementCollection(parent: DomNode): { returnType: boolean, element: DomNode }
    readChildNodesStream(istream: Gio.InputStream): void
    readChildNodesString(str: string): void
    readUnparsed(): string
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancellable", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancellable", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::types", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::types", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XParser_ConstructProps)
    _init (config?: XParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node: DomNode): XParser
    static $gtype: GObject.Type
}
export interface XProcessingInstruction_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XProcessingInstruction {
    /* Properties of GXml-0.20.GXml.XProcessingInstruction */
    data: string
    /* Properties of GXml-0.20.GXml.XCharacterData */
    str: string
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomProcessingInstruction */
    readonly target: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XProcessingInstruction */
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.20.GXml.XCharacterData */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XProcessingInstruction_ConstructProps)
    _init (config?: XProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XProcessingInstruction
    static new(): XProcessingInstruction
    static $gtype: GObject.Type
}
export interface XsdSchema_ConstructProps extends Element_ConstructProps {
    elementDefinitions?: XsdListElements
    simpleTypeDefinitions?: XsdListSimpleTypes
    complexTypeDefinitions?: XsdListComplexTypes
}
export class XsdSchema {
    /* Properties of GXml-0.20.GXml.XsdSchema */
    elementDefinitions: XsdListElements
    simpleTypeDefinitions: XsdListSimpleTypes
    complexTypeDefinitions: XsdListComplexTypes
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdSchema */
    getElementDefinitions(): XsdListElements
    setElementDefinitions(value: XsdListElements): void
    getSimpleTypeDefinitions(): XsdListSimpleTypes
    setSimpleTypeDefinitions(value: XsdListSimpleTypes): void
    getComplexTypeDefinitions(): XsdListComplexTypes
    setComplexTypeDefinitions(value: XsdListComplexTypes): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdSchema_ConstructProps)
    _init (config?: XsdSchema_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSchema
    static $gtype: GObject.Type
}
export interface XsdSimpleType_ConstructProps extends Element_ConstructProps {
    final?: string
    name?: string
    annotation?: XsdAnnotation
    list?: XsdTypeList
    union?: XsdTypeUnion
    restriction?: XsdTypeRestriction
}
export class XsdSimpleType {
    /* Properties of GXml-0.20.GXml.XsdSimpleType */
    final: string
    name: string
    annotation: XsdAnnotation
    list: XsdTypeList
    union: XsdTypeUnion
    restriction: XsdTypeRestriction
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    getList(): XsdTypeList
    setList(value: XsdTypeList): void
    getUnion(): XsdTypeUnion
    setUnion(value: XsdTypeUnion): void
    getRestriction(): XsdTypeRestriction
    setRestriction(value: XsdTypeRestriction): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdSimpleType_ConstructProps)
    _init (config?: XsdSimpleType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSimpleType
    static $gtype: GObject.Type
}
export interface XsdTypeDefinition_ConstructProps extends Element_ConstructProps {
    annotation?: XsdAnnotation
}
export class XsdTypeDefinition {
    /* Properties of GXml-0.20.GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeDefinition */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeDefinition_ConstructProps)
    _init (config?: XsdTypeDefinition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeDefinition
    static $gtype: GObject.Type
}
export interface XsdTypeList_ConstructProps extends XsdTypeDefinition_ConstructProps {
}
export class XsdTypeList {
    /* Properties of GXml-0.20.GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeDefinition */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeList_ConstructProps)
    _init (config?: XsdTypeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeList
    static $gtype: GObject.Type
}
export interface XsdTypeUnion_ConstructProps extends XsdTypeDefinition_ConstructProps {
}
export class XsdTypeUnion {
    /* Properties of GXml-0.20.GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeDefinition */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeUnion_ConstructProps)
    _init (config?: XsdTypeUnion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeUnion
    static $gtype: GObject.Type
}
export interface XsdTypeRestriction_ConstructProps extends XsdTypeDefinition_ConstructProps {
    base?: string
    simpleType?: XsdSimpleType
    enumerations?: XsdListTypeRestrictionEnumerations
    whiteSpaces?: XsdListTypeRestrictionWhiteSpaces
}
export class XsdTypeRestriction {
    /* Properties of GXml-0.20.GXml.XsdTypeRestriction */
    base: string
    simpleType: XsdSimpleType
    enumerations: XsdListTypeRestrictionEnumerations
    whiteSpaces: XsdListTypeRestrictionWhiteSpaces
    /* Properties of GXml-0.20.GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getSimpleType(): XsdSimpleType
    setSimpleType(value: XsdSimpleType): void
    getEnumerations(): XsdListTypeRestrictionEnumerations
    setEnumerations(value: XsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): XsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: XsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GXml-0.20.GXml.XsdTypeDefinition */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestriction_ConstructProps)
    _init (config?: XsdTypeRestriction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestriction
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionDef_ConstructProps extends Element_ConstructProps {
    annotation?: XsdAnnotation
}
export class XsdTypeRestrictionDef {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionDef_ConstructProps)
    _init (config?: XsdTypeRestrictionDef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionDef
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinExclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinExclusive {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMinExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinExclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinInclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinInclusive {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMinInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinInclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxExclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxExclusive {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxExclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxInclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxInclusive {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxInclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionTotalDigits_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionTotalDigits {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: XsdTypeRestrictionTotalDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionTotalDigits
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionFractionDigits_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionFractionDigits {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: XsdTypeRestrictionFractionDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionFractionDigits
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionLength {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionLength_ConstructProps)
    _init (config?: XsdTypeRestrictionLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinLength {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: XsdTypeRestrictionMinLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxLength {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionEnumeration_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
    value?: string
}
export class XsdTypeRestrictionEnumeration {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionEnumeration */
    value: string
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionEnumeration */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: XsdTypeRestrictionEnumeration_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionEnumeration
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionWhiteSpace_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
    fixed?: XsdTypeRestrictionWhiteSpaceFixed
    value?: string
}
export class XsdTypeRestrictionWhiteSpace {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace */
    fixed: XsdTypeRestrictionWhiteSpaceFixed
    value: string
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace */
    getFixed(): XsdTypeRestrictionWhiteSpaceFixed
    setFixed(value: XsdTypeRestrictionWhiteSpaceFixed): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: XsdTypeRestrictionWhiteSpace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionWhiteSpace
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionWhiteSpaceFixed_ConstructProps extends Boolean_ConstructProps {
}
export class XsdTypeRestrictionWhiteSpaceFixed {
    /* Properties of GXml-0.20.GXml.BaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Boolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml-0.20.GXml.BaseProperty */
    getValue(): string | null
    setValue(value?: string | null): void
    validateValue(val?: string | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionWhiteSpaceFixed_ConstructProps)
    _init (config?: XsdTypeRestrictionWhiteSpaceFixed_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionWhiteSpaceFixed
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionPattern_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionPattern {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionPattern_ConstructProps)
    _init (config?: XsdTypeRestrictionPattern_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionPattern
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionAssertion_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionAssertion {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: XsdTypeRestrictionAssertion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionAssertion
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionExplicitTimezone_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionExplicitTimezone {
    /* Properties of GXml-0.20.GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdTypeRestrictionDef */
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: XsdTypeRestrictionExplicitTimezone_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionExplicitTimezone
    static $gtype: GObject.Type
}
export interface XsdComplexType_ConstructProps extends XsdBaseType_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: XsdBaseContent
}
export class XsdComplexType {
    /* Properties of GXml-0.20.GXml.XsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: XsdBaseContent
    readonly typeAttributes: XsdList
    readonly groupAttributes: XsdList
    /* Properties of GXml-0.20.GXml.XsdBaseType */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): XsdBaseContent
    setContentType(value: XsdBaseContent): void
    getTypeAttributes(): XsdList
    getGroupAttributes(): XsdList
    /* Methods of GXml-0.20.GXml.XsdBaseType */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdComplexType_ConstructProps)
    _init (config?: XsdComplexType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdComplexType
    static $gtype: GObject.Type
}
export interface XsdExtension_ConstructProps extends Element_ConstructProps {
    base?: string
}
export class XsdExtension {
    /* Properties of GXml-0.20.GXml.XsdExtension */
    base: string
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdExtension_ConstructProps)
    _init (config?: XsdExtension_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdExtension
    static $gtype: GObject.Type
}
export interface XsdElement_ConstructProps extends Element_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: XsdAnnotation
    simpleType?: XsdSimpleType
    complexType?: XsdComplexType
}
export class XsdElement {
    /* Properties of GXml-0.20.GXml.XsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: XsdAnnotation
    simpleType: XsdSimpleType
    complexType: XsdComplexType
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    getSimpleType(): XsdSimpleType
    setSimpleType(value: XsdSimpleType): void
    getComplexType(): XsdComplexType
    setComplexType(value: XsdComplexType): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::min-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdElement_ConstructProps)
    _init (config?: XsdElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdElement
    static $gtype: GObject.Type
}
export interface XsdAnnotation_ConstructProps extends Element_ConstructProps {
}
export class XsdAnnotation {
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdAnnotation_ConstructProps)
    _init (config?: XsdAnnotation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAnnotation
    static $gtype: GObject.Type
}
export interface XsdBaseType_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseType {
    /* Properties of GXml-0.20.GXml.XsdBaseType */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseType */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdBaseType_ConstructProps)
    _init (config?: XsdBaseType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseType
    static $gtype: GObject.Type
}
export interface XsdBaseContent_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseContent {
    /* Properties of GXml-0.20.GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseContent */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdBaseContent_ConstructProps)
    _init (config?: XsdBaseContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseContent
    static $gtype: GObject.Type
}
export interface XsdSimpleContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdSimpleContent {
    /* Properties of GXml-0.20.GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseContent */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdSimpleContent_ConstructProps)
    _init (config?: XsdSimpleContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSimpleContent
    static $gtype: GObject.Type
}
export interface XsdComplexContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdComplexContent {
    /* Properties of GXml-0.20.GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseContent */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdComplexContent_ConstructProps)
    _init (config?: XsdComplexContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdComplexContent
    static $gtype: GObject.Type
}
export interface XsdOpenContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdOpenContent {
    /* Properties of GXml-0.20.GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseContent */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdOpenContent_ConstructProps)
    _init (config?: XsdOpenContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdOpenContent
    static $gtype: GObject.Type
}
export interface XsdBaseAttribute_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseAttribute {
    /* Properties of GXml-0.20.GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseAttribute */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdBaseAttribute_ConstructProps)
    _init (config?: XsdBaseAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseAttribute
    static $gtype: GObject.Type
}
export interface XsdAttribute_ConstructProps extends XsdBaseAttribute_ConstructProps {
}
export class XsdAttribute {
    /* Properties of GXml-0.20.GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseAttribute */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdAttribute_ConstructProps)
    _init (config?: XsdAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAttribute
    static $gtype: GObject.Type
}
export interface XsdAttributeGroup_ConstructProps extends XsdBaseAttribute_ConstructProps {
}
export class XsdAttributeGroup {
    /* Properties of GXml-0.20.GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml-0.20.GXml.Element */
    parseChildren: boolean
    unparsed: string
    readBuffer: Gio.MemoryOutputStream
    /* Fields of GXml-0.20.GXml.Element */
    attributes: ElementAttributes
    namespaceUri: string
    /* Fields of GXml-0.20.GXml.Node */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: NodeList
    document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdBaseAttribute */
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    /* Methods of GXml-0.20.GXml.Element */
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback?: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-buffer", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdAttributeGroup_ConstructProps)
    _init (config?: XsdAttributeGroup_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAttributeGroup
    static $gtype: GObject.Type
}
export interface XsdList_ConstructProps extends ArrayList_ConstructProps {
}
export class XsdList {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdList_ConstructProps)
    _init (config?: XsdList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdList
    static $gtype: GObject.Type
}
export interface XsdListElements_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListElements {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdListElements_ConstructProps)
    _init (config?: XsdListElements_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListElements
    static $gtype: GObject.Type
}
export interface XsdListSimpleTypes_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListSimpleTypes {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdListSimpleTypes_ConstructProps)
    _init (config?: XsdListSimpleTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListSimpleTypes
    static $gtype: GObject.Type
}
export interface XsdListComplexTypes_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListComplexTypes {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdListComplexTypes_ConstructProps)
    _init (config?: XsdListComplexTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListComplexTypes
    static $gtype: GObject.Type
}
export interface XsdListTypeRestrictionEnumerations_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListTypeRestrictionEnumerations {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: XsdListTypeRestrictionEnumerations_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListTypeRestrictionEnumerations
    static $gtype: GObject.Type
}
export interface XsdListTypeRestrictionWhiteSpaces_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListTypeRestrictionWhiteSpaces {
    /* Properties of GXml-0.20.GXml.XsdList */
    readonly length: number
    /* Fields of GXml-0.20.GXml.BaseCollection */
    nodesIndex: GLib.Queue
    element: Element
    itemsName: string
    itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XsdList */
    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number
    /* Methods of GXml-0.20.GXml.BaseCollection */
    initializeElement(e: Element): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: XsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListTypeRestrictionWhiteSpaces
    static $gtype: GObject.Type
}
export interface XText_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XText {
    /* Properties of GXml-0.20.GXml.XCharacterData */
    str: string
    /* Properties of GXml-0.20.GXml.XNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.20.GXml.DomCharacterData */
    data: string
    /* Fields of GXml-0.20.GXml.XNode */
    doc: XDocument
    node: object | null
    baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.20.GXml.XCharacterData */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.20.GXml.XNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    toString(): string
    getInternalNode(): object | null
    cloneNode(deep: boolean): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml-0.20.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.20.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    getLength(): number
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XText_ConstructProps)
    _init (config?: XText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XText
    static new(): XText
    static $gtype: GObject.Type
}
export abstract class ArrayListClass {
    static name: string
}
export class ArrayListPrivate {
    static name: string
}
export abstract class AttrClass {
    static name: string
}
export class AttrPrivate {
    static name: string
}
export abstract class BaseCollectionClass {
    /* Fields of GXml-0.20.GXml.BaseCollectionClass */
    validateAppend: (index: number, element: DomElement) => boolean
    clear: () => void
    static name: string
}
export class BaseCollectionPrivate {
    static name: string
}
export abstract class CssSelectorClass {
    static name: string
}
export class CssSelectorPrivate {
    static name: string
}
export abstract class CssElementSelectorClass {
    static name: string
}
export class CssElementSelectorPrivate {
    static name: string
}
export abstract class CssAttributeSelectorClass {
    static name: string
}
export class CssAttributeSelectorPrivate {
    static name: string
}
export abstract class CssNotSelectorClass {
    static name: string
}
export class CssNotSelectorPrivate {
    static name: string
}
export abstract class CssSelectorParserClass {
    static name: string
}
export class CssSelectorParserPrivate {
    static name: string
}
export abstract class DocumentClass {
    static name: string
}
export class DocumentPrivate {
    static name: string
}
export abstract class ImplementationClass {
    static name: string
}
export class ImplementationPrivate {
    static name: string
}
export abstract class DocumentTypeClass {
    static name: string
}
export class DocumentTypePrivate {
    static name: string
}
export abstract class DocumentFragmentClass {
    static name: string
}
export class DocumentFragmentPrivate {
    static name: string
}
export abstract class DomNodeFilterClass {
    static name: string
}
export class DomNodeFilterPrivate {
    static name: string
}
export abstract class DomElementListClass {
    static name: string
}
export class DomElementListPrivate {
    static name: string
}
export abstract class DomEventInitClass {
    static name: string
}
export class DomEventInitPrivate {
    static name: string
}
export abstract class DomCustomEventInitClass {
    static name: string
}
export class DomCustomEventInitPrivate {
    static name: string
}
export abstract class DomTimeStampClass {
    static name: string
}
export class DomTimeStampPrivate {
    static name: string
}
export abstract class DomMutationObserverInitClass {
    static name: string
}
export class DomMutationObserverInitPrivate {
    static name: string
}
export abstract class DomErrorNameClass {
    static name: string
}
export class DomErrorNamePrivate {
    static name: string
}
export abstract class ElementClass {
    static name: string
}
export class ElementPrivate {
    static name: string
}
export abstract class ElementAttributesClass {
    static name: string
}
export class ElementAttributesPrivate {
    static name: string
}
export abstract class EnumerationClass {
    static name: string
}
export class EnumerationPrivate {
    static name: string
}
export abstract class EventClass {
    static name: string
}
export class EventPrivate {
    static name: string
}
export abstract class CustomEventClass {
    static name: string
}
export class CustomEventPrivate {
    static name: string
}
export abstract class HashMapClass {
    static name: string
}
export class HashMapPrivate {
    static name: string
}
export abstract class HashPairedMapClass {
    static name: string
}
export class HashPairedMapPrivate {
    static name: string
}
export abstract class HashThreeMapClass {
    static name: string
}
export class HashThreeMapPrivate {
    static name: string
}
export abstract class HTMLCollectionClass {
    static name: string
}
export class HTMLCollectionPrivate {
    static name: string
}
export abstract class HtmlDocumentClass {
    static name: string
}
export class HtmlDocumentPrivate {
    static name: string
}
export abstract class HtmlElementClass {
    static name: string
}
export class HtmlElementPrivate {
    static name: string
}
export abstract class LXPathObjectClass {
    static name: string
}
export class LXPathObjectPrivate {
    static name: string
}
export abstract class NodeClass {
    static name: string
}
export class NodePrivate {
    static name: string
}
export abstract class NodeListClass {
    static name: string
}
export class NodeListPrivate {
    static name: string
}
export abstract class NodeIteratorClass {
    static name: string
}
export class NodeIteratorPrivate {
    static name: string
}
export abstract class BasePropertyClass {
    /* Fields of GXml-0.20.GXml.BasePropertyClass */
    validateValue: (val?: string | null) => boolean
    static name: string
}
export class BasePropertyPrivate {
    static name: string
}
export abstract class StringClass {
    static name: string
}
export class StringPrivate {
    static name: string
}
export abstract class ArrayStringClass {
    static name: string
}
export class ArrayStringPrivate {
    static name: string
}
export abstract class XsdArrayStringClass {
    static name: string
}
export class XsdArrayStringPrivate {
    static name: string
}
export abstract class DoubleClass {
    static name: string
}
export class DoublePrivate {
    static name: string
}
export abstract class FloatClass {
    static name: string
}
export class FloatPrivate {
    static name: string
}
export abstract class IntClass {
    static name: string
}
export class IntPrivate {
    static name: string
}
export abstract class BooleanClass {
    static name: string
}
export class BooleanPrivate {
    static name: string
}
export abstract class EnumClass {
    static name: string
}
export class EnumPrivate {
    static name: string
}
export abstract class DateClass {
    static name: string
}
export class DatePrivate {
    static name: string
}
export abstract class DateTimeClass {
    static name: string
}
export class DateTimePrivate {
    static name: string
}
export abstract class RangeClass {
    static name: string
}
export class RangePrivate {
    static name: string
}
export abstract class SettableTokenListClass {
    static name: string
}
export class SettableTokenListPrivate {
    static name: string
}
export abstract class StringRefClass {
    static name: string
}
export class StringRefPrivate {
    static name: string
}
export abstract class CharacterDataClass {
    static name: string
}
export class CharacterDataPrivate {
    static name: string
}
export abstract class TextClass {
    static name: string
}
export class TextPrivate {
    static name: string
}
export abstract class ProcessingInstructionClass {
    static name: string
}
export class ProcessingInstructionPrivate {
    static name: string
}
export abstract class CommentClass {
    static name: string
}
export class CommentPrivate {
    static name: string
}
export abstract class TokenListClass {
    static name: string
}
export class TokenListPrivate {
    static name: string
}
export abstract class TreeWalkerClass {
    static name: string
}
export class TreeWalkerPrivate {
    static name: string
}
export abstract class XAttributeClass {
    static name: string
}
export class XAttributePrivate {
    static name: string
}
export abstract class XCharacterDataClass {
    static name: string
}
export class XCharacterDataPrivate {
    static name: string
}
export abstract class XChildNodeClass {
    static name: string
}
export class XChildNodePrivate {
    static name: string
}
export abstract class XNonDocumentChildNodeClass {
    static name: string
}
export class XNonDocumentChildNodePrivate {
    static name: string
}
export abstract class XCommentClass {
    static name: string
}
export class XCommentPrivate {
    static name: string
}
export abstract class XDocumentClass {
    /* Fields of GXml-0.20.GXml.XDocumentClass */
    save: (cancellable?: Gio.Cancellable | null) => boolean
    saveAs: (f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    static name: string
}
export class XDocumentPrivate {
    static name: string
}
export abstract class XElementClass {
    static name: string
}
export class XElementPrivate {
    static name: string
}
export abstract class XHashMapAttrClass {
    static name: string
}
export class XHashMapAttrPrivate {
    static name: string
}
export abstract class XHashMapAttrEntryClass {
    static name: string
}
export class XHashMapAttrEntryPrivate {
    static name: string
}
export abstract class XHashMapAttrIteratorClass {
    static name: string
}
export class XHashMapAttrIteratorPrivate {
    static name: string
}
export abstract class XHtmlDocumentClass {
    static name: string
}
export class XHtmlDocumentPrivate {
    static name: string
}
export abstract class XListChildrenClass {
    static name: string
}
export class XListChildrenPrivate {
    static name: string
}
export abstract class XListChildrenIteratorClass {
    static name: string
}
export class XListChildrenIteratorPrivate {
    static name: string
}
export abstract class XNodeClass {
    /* Fields of GXml-0.20.GXml.XNodeClass */
    setNamespace: (uri: string, prefix?: string | null) => boolean
    toString: () => string
    static name: string
}
export class XNodePrivate {
    static name: string
}
export abstract class XParserClass {
    static name: string
}
export class XParserPrivate {
    static name: string
}
export abstract class XProcessingInstructionClass {
    static name: string
}
export class XProcessingInstructionPrivate {
    static name: string
}
export abstract class XsdSchemaClass {
    static name: string
}
export class XsdSchemaPrivate {
    static name: string
}
export abstract class XsdSimpleTypeClass {
    static name: string
}
export class XsdSimpleTypePrivate {
    static name: string
}
export abstract class XsdTypeDefinitionClass {
    static name: string
}
export class XsdTypeDefinitionPrivate {
    static name: string
}
export abstract class XsdTypeListClass {
    static name: string
}
export class XsdTypeListPrivate {
    static name: string
}
export abstract class XsdTypeUnionClass {
    static name: string
}
export class XsdTypeUnionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionClass {
    static name: string
}
export class XsdTypeRestrictionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionDefClass {
    static name: string
}
export class XsdTypeRestrictionDefPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinExclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMinExclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinInclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMinInclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxExclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMaxExclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxInclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMaxInclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionTotalDigitsClass {
    static name: string
}
export class XsdTypeRestrictionTotalDigitsPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionFractionDigitsClass {
    static name: string
}
export class XsdTypeRestrictionFractionDigitsPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionLengthClass {
    static name: string
}
export class XsdTypeRestrictionLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinLengthClass {
    static name: string
}
export class XsdTypeRestrictionMinLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxLengthClass {
    static name: string
}
export class XsdTypeRestrictionMaxLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionEnumerationClass {
    static name: string
}
export class XsdTypeRestrictionEnumerationPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionWhiteSpaceClass {
    static name: string
}
export class XsdTypeRestrictionWhiteSpacePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionWhiteSpaceFixedClass {
    static name: string
}
export class XsdTypeRestrictionWhiteSpaceFixedPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionPatternClass {
    static name: string
}
export class XsdTypeRestrictionPatternPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionAssertionClass {
    static name: string
}
export class XsdTypeRestrictionAssertionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionExplicitTimezoneClass {
    static name: string
}
export class XsdTypeRestrictionExplicitTimezonePrivate {
    static name: string
}
export abstract class XsdComplexTypeClass {
    static name: string
}
export class XsdComplexTypePrivate {
    static name: string
}
export abstract class XsdExtensionClass {
    static name: string
}
export class XsdExtensionPrivate {
    static name: string
}
export abstract class XsdElementClass {
    static name: string
}
export class XsdElementPrivate {
    static name: string
}
export abstract class XsdAnnotationClass {
    static name: string
}
export class XsdAnnotationPrivate {
    static name: string
}
export abstract class XsdBaseTypeClass {
    static name: string
}
export class XsdBaseTypePrivate {
    static name: string
}
export abstract class XsdBaseContentClass {
    static name: string
}
export class XsdBaseContentPrivate {
    static name: string
}
export abstract class XsdSimpleContentClass {
    static name: string
}
export class XsdSimpleContentPrivate {
    static name: string
}
export abstract class XsdComplexContentClass {
    static name: string
}
export class XsdComplexContentPrivate {
    static name: string
}
export abstract class XsdOpenContentClass {
    static name: string
}
export class XsdOpenContentPrivate {
    static name: string
}
export abstract class XsdBaseAttributeClass {
    static name: string
}
export class XsdBaseAttributePrivate {
    static name: string
}
export abstract class XsdAttributeClass {
    static name: string
}
export class XsdAttributePrivate {
    static name: string
}
export abstract class XsdAttributeGroupClass {
    static name: string
}
export class XsdAttributeGroupPrivate {
    static name: string
}
export abstract class XsdListClass {
    static name: string
}
export class XsdListPrivate {
    static name: string
}
export abstract class XsdListElementsClass {
    static name: string
}
export class XsdListElementsPrivate {
    static name: string
}
export abstract class XsdListSimpleTypesClass {
    static name: string
}
export class XsdListSimpleTypesPrivate {
    static name: string
}
export abstract class XsdListComplexTypesClass {
    static name: string
}
export class XsdListComplexTypesPrivate {
    static name: string
}
export abstract class XsdListTypeRestrictionEnumerationsClass {
    static name: string
}
export class XsdListTypeRestrictionEnumerationsPrivate {
    static name: string
}
export abstract class XsdListTypeRestrictionWhiteSpacesClass {
    static name: string
}
export class XsdListTypeRestrictionWhiteSpacesPrivate {
    static name: string
}
export abstract class XTextClass {
    static name: string
}
export class XTextPrivate {
    static name: string
}
export abstract class CollectionIface {
    /* Fields of GXml-0.20.GXml.CollectionIface */
    search: () => void
    getItem: (index: number) => DomElement | null
    append: (node: DomElement) => void
    initialize: (t: GObject.Type) => void
    createItem: () => DomElement | null
    validateAppend: (index: number, element: DomElement) => boolean
    clear: () => void
    getNodesIndex: () => GLib.Queue
    getElement: () => DomElement
    setElement: (value: DomElement) => void
    getItemsName: () => string
    getItemsType: () => GObject.Type
    setItemsType: (value: GObject.Type) => void
    getLength: () => number
    static name: string
}
export abstract class ListIface {
    static name: string
}
export abstract class MappeableElementIface {
    /* Fields of GXml-0.20.GXml.MappeableElementIface */
    getMapKey: () => string
    static name: string
}
export abstract class MapIface {
    /* Fields of GXml-0.20.GXml.MapIface */
    item: (key: string) => DomElement | null
    hasKey: (key: string) => boolean
    getAttributeKey: () => string
    setAttributeKey: (value: string) => void
    getKeysSet: () => Gee.Set
    static name: string
}
export abstract class MappeableElementPairKeyIface {
    /* Fields of GXml-0.20.GXml.MappeableElementPairKeyIface */
    getMapPrimaryKey: () => string
    getMapSecondaryKey: () => string
    static name: string
}
export abstract class PairedMapIface {
    /* Fields of GXml-0.20.GXml.PairedMapIface */
    item: (primaryKey: string, secondaryKey: string) => DomElement | null
    hasPrimaryKey: (key: string) => boolean
    hasSecondaryKey: (pkey: string, key: string) => boolean
    secondaryKeysSet: (pkey: string) => Gee.Set
    getAttributePrimaryKey: () => string
    setAttributePrimaryKey: (value: string) => void
    getAttributeSecondaryKey: () => string
    setAttributeSecondaryKey: (value: string) => void
    getPrimaryKeysSet: () => Gee.Set
    static name: string
}
export abstract class MappeableElementThreeKeyIface {
    /* Fields of GXml-0.20.GXml.MappeableElementThreeKeyIface */
    getMapPkey: () => string
    getMapSkey: () => string
    getMapTkey: () => string
    static name: string
}
export abstract class ThreeMapIface {
    /* Fields of GXml-0.20.GXml.ThreeMapIface */
    item: (primaryKey: string, secondaryKey: string, thirdKey: string) => DomElement | null
    hasPrimaryKey: (key: string) => boolean
    hasSecondaryKey: (pkey: string, key: string) => boolean
    hasThirdKey: (pkey: string, skey: string, key: string) => boolean
    secondaryKeysSet: (pkey: string) => Gee.Set
    thirdKeysSet: (pkey: string, skey: string) => Gee.Set
    getAttributePrimaryKey: () => string
    setAttributePrimaryKey: (value: string) => void
    getAttributeSecondaryKey: () => string
    setAttributeSecondaryKey: (value: string) => void
    getAttributeThirdKey: () => string
    setAttributeThirdKey: (value: string) => void
    getPrimaryKeysSet: () => Gee.Set
    static name: string
}
export abstract class CollectionParentIface {
    /* Fields of GXml-0.20.GXml.CollectionParentIface */
    getTypes: () => GLib.HashTable
    static name: string
}
export abstract class DomAttrIface {
    /* Fields of GXml-0.20.GXml.DomAttrIface */
    getNamespaceUri: () => string | null
    getPrefix: () => string | null
    getLocalName: () => string
    getName: () => string
    getValue: () => string
    setValue: (value: string) => void
    getSpecified: () => boolean
    static name: string
}
export abstract class DomCharacterDataIface {
    /* Fields of GXml-0.20.GXml.DomCharacterDataIface */
    substringData: (offset: number, count: number) => string
    appendData: (data: string) => void
    insertData: (offset: number, data: string) => void
    deleteData: (offset: number, count: number) => void
    replaceData: (offset: number, count: number, data: string) => void
    getData: () => string
    setData: (value: string) => void
    getLength: () => number
    static name: string
}
export abstract class DomTextIface {
    /* Fields of GXml-0.20.GXml.DomTextIface */
    splitText: (offset: number) => DomText
    getWholeText: () => string
    static name: string
}
export abstract class DomProcessingInstructionIface {
    /* Fields of GXml-0.20.GXml.DomProcessingInstructionIface */
    getTarget: () => string
    static name: string
}
export abstract class DomCommentIface {
    static name: string
}
export abstract class DomNonElementParentNodeIface {
    /* Fields of GXml-0.20.GXml.DomNonElementParentNodeIface */
    getElementById: (elementId: string) => DomElement | null
    static name: string
}
export abstract class DomParentNodeIface {
    /* Fields of GXml-0.20.GXml.DomParentNodeIface */
    querySelector: (selectors: string) => DomElement | null
    querySelectorAll: (selectors: string) => DomNodeList
    getElementsByPropertyValue: (property: string, value: string) => DomElementList
    getChildren: () => DomHTMLCollection
    getFirstElementChild: () => DomElement | null
    getLastElementChild: () => DomElement | null
    getChildElementCount: () => number
    static name: string
}
export abstract class DomNonDocumentTypeChildNodeIface {
    /* Fields of GXml-0.20.GXml.DomNonDocumentTypeChildNodeIface */
    getPreviousElementSibling: () => DomElement | null
    getNextElementSibling: () => DomElement | null
    static name: string
}
export abstract class DomChildNodeIface {
    /* Fields of GXml-0.20.GXml.DomChildNodeIface */
    remove: () => void
    static name: string
}
export abstract class DomNodeListIface {
    /* Fields of GXml-0.20.GXml.DomNodeListIface */
    item: (index: number) => DomNode | null
    getLength: () => number
    static name: string
}
export abstract class DomHTMLCollectionIface {
    /* Fields of GXml-0.20.GXml.DomHTMLCollectionIface */
    getElement: (index: number) => DomElement | null
    toArray: () => DomElement[]
    item: (index: number) => DomElement | null
    namedItem: (name: string) => DomElement | null
    getLength: () => number
    static name: string
}
export abstract class DomNodeIteratorIface {
    /* Fields of GXml-0.20.GXml.DomNodeIteratorIface */
    nextNode: () => DomNode | null
    previousNode: () => DomNode | null
    detach: () => void
    getRoot: () => DomNode
    getReferenceNode: () => DomNode
    getPointerBeforeReferenceNode: () => boolean
    getWhatToShow: () => number
    static name: string
}
export abstract class DomTreeWalkerIface {
    /* Fields of GXml-0.20.GXml.DomTreeWalkerIface */
    parentNode: () => DomNode | null
    firstChild: () => DomNode | null
    lastChild: () => DomNode | null
    previousSibling: () => DomNode | null
    nextSibling: () => DomNode | null
    previousNode: () => DomNode | null
    nextNode: () => DomNode | null
    getRoot: () => DomNode
    getWhatToShow: () => number
    getCurrentNode: () => DomNode
    static name: string
}
export abstract class DomNamedNodeMapIface {
    /* Fields of GXml-0.20.GXml.DomNamedNodeMapIface */
    item: (index: number) => DomNode | null
    getNamedItem: (name: string) => DomNode | null
    setNamedItem: (node: DomNode) => DomNode | null
    removeNamedItem: (name: string) => DomNode | null
    removeNamedItemNs: (namespaceUri: string, localName: string) => DomNode | null
    getNamedItemNs: (namespaceUri: string, localName: string) => DomNode | null
    setNamedItemNs: (node: DomNode) => DomNode | null
    getLength: () => number
    static name: string
}
export abstract class DomTokenListIface {
    /* Fields of GXml-0.20.GXml.DomTokenListIface */
    item: (index: number) => string | null
    contains: (token: string) => boolean
    add: (tokens: string[]) => void
    remove: (tokens: string[]) => void
    toggle: (token: string, force: boolean, auto: boolean) => boolean
    toString: () => string
    getLength: () => number
    static name: string
}
export abstract class DomSettableTokenListIface {
    /* Fields of GXml-0.20.GXml.DomSettableTokenListIface */
    getValue: () => string
    setValue: (value: string) => void
    static name: string
}
export abstract class DomDocumentIface {
    /* Fields of GXml-0.20.GXml.DomDocumentIface */
    getElementsByTagName: (localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (classNames: string) => DomHTMLCollection
    createElement: (localName: string) => DomElement
    createElementNs: (namespace: string | null, qualifiedName: string) => DomElement
    createDocumentFragment: () => DomDocumentFragment
    createTextNode: (data: string) => DomText
    createComment: (data: string) => DomComment
    createProcessingInstruction: (target: string, data: string) => DomProcessingInstruction
    importNode: (node: DomNode, deep: boolean) => DomNode
    adoptNode: (node: DomNode) => DomNode
    createEvent: (interface: string) => DomEvent
    createRange: () => DomRange
    createNodeIterator: (root: DomNode, whatToShow: number) => DomNodeIterator
    createTreeWalker: (root: DomNode, whatToShow: number) => DomTreeWalker
    writeFile: (file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    writeFileAsync: (file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (res: Gio.AsyncResult) => void
    writeStream: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => void
    writeStreamAsync: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (res: Gio.AsyncResult) => void
    createStream: () => Gio.InputStream
    createStreamAsync: (cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (res: Gio.AsyncResult) => Gio.InputStream
    writeString: (cancellable?: Gio.Cancellable | null) => string
    writeStringAsync: (cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (res: Gio.AsyncResult) => string
    readFromFile: (file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readFromFileAsync: (file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromFileFinish: (res: Gio.AsyncResult) => void
    readFromString: (str: string, cancellable?: Gio.Cancellable | null) => void
    readFromStringAsync: (str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromStringFinish: (res: Gio.AsyncResult) => void
    readFromStream: (stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readFromStreamAsync: (stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromStreamFinish: (res: Gio.AsyncResult) => void
    getXmlParser: () => Parser
    setXmlParser: (parser: Parser) => void
    getImplementation: () => DomImplementation
    getUrl: () => string
    getDocumentUri: () => string
    getOrigin: () => string
    getCompatMode: () => string
    getCharacterSet: () => string
    getContentType: () => string
    getDoctype: () => DomDocumentType | null
    getDocumentElement: () => DomElement | null
    static name: string
}
export abstract class DomXMLDocumentIface {
    static name: string
}
export abstract class DomImplementationIface {
    /* Fields of GXml-0.20.GXml.DomImplementationIface */
    createDocumentType: (qualifiedName: string, publicId: string, systemId: string) => DomDocumentType
    createDocument: (nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null) => DomXMLDocument
    createHtmlDocument: (title: string) => DomDocument
    hasFeature: () => boolean
    static name: string
}
export abstract class DomDocumentFragmentIface {
    static name: string
}
export abstract class DomDocumentTypeIface {
    /* Fields of GXml-0.20.GXml.DomDocumentTypeIface */
    getName: () => string
    getPublicId: () => string
    getSystemId: () => string
    static name: string
}
export abstract class DomHtmlDocumentIface {
    /* Fields of GXml-0.20.GXml.DomHtmlDocumentIface */
    readFromString: (str: string) => void
    readFromStringTolerant: (str: string) => void
    toHtml: () => string
    static name: string
}
export abstract class DomElementIface {
    /* Fields of GXml-0.20.GXml.DomElementIface */
    getAttribute: (name: string) => string | null
    getAttributeNs: (namespace: string | null, localName: string) => string | null
    setAttribute: (name: string, value: string) => void
    setAttributeNs: (namespace: string | null, name: string, value: string) => void
    removeAttribute: (name: string) => void
    removeAttributeNs: (namespace: string | null, localName: string) => void
    hasAttribute: (name: string) => boolean
    hasAttributeNs: (namespace: string | null, localName: string) => boolean
    getElementsByTagName: (localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (classNames: string) => DomHTMLCollection
    matches: (selectors: string) => boolean
    readFromUri: (uri: string) => void
    readFromUriAsync: (uri: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromUriFinish: (res: Gio.AsyncResult) => void
    readFromFile: (f: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readFromFileAsync: (f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromFileFinish: (res: Gio.AsyncResult) => void
    readFromStream: (istream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readFromStreamAsync: (istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromStreamFinish: (res: Gio.AsyncResult) => void
    readFromString: (str: string, cancellable?: Gio.Cancellable | null) => void
    readFromStringAsync: (str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readFromStringFinish: (res: Gio.AsyncResult) => void
    writeString: (cancellable?: Gio.Cancellable | null) => string
    writeStringAsync: (cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (res: Gio.AsyncResult) => string
    writeFile: (f: Gio.File, cancellable?: Gio.Cancellable | null) => void
    writeFileAsync: (f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (res: Gio.AsyncResult) => void
    writeStream: (stream: Gio.OutputStream) => void
    writeStreamAsync: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (res: Gio.AsyncResult) => void
    createStream: () => Gio.InputStream
    createStreamAsync: (cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (res: Gio.AsyncResult) => Gio.InputStream
    getNamespaceUri: () => string | null
    getPrefix: () => string | null
    getLocalName: () => string
    getTagName: () => string
    getId: () => string | null
    setId: (value?: string | null) => void
    getClassName: () => string | null
    setClassName: (value?: string | null) => void
    getClassList: () => DomTokenList
    getAttributes: () => DomNamedNodeMap
    static name: string
}
export abstract class DomEventTargetIface {
    /* Fields of GXml-0.20.GXml.DomEventTargetIface */
    addEventListener: (type: string, callback: DomEventListener | null, capture: boolean) => void
    removeEventListener: (type: string, callback: DomEventListener | null, capture: boolean) => void
    dispatchEvent: (event: DomEvent) => boolean
    static name: string
}
export abstract class DomEventListenerIface {
    /* Fields of GXml-0.20.GXml.DomEventListenerIface */
    handleEvent: (event: DomEvent) => void
    static name: string
}
export abstract class DomEventIface {
    /* Fields of GXml-0.20.GXml.DomEventIface */
    stopPropagation: () => void
    stopImmediatePropagation: () => void
    preventDefault: () => void
    initEvent: (type: string, bubbles: boolean, cancelable: boolean) => void
    getEtype: () => string
    getEventTarget: () => DomEventTarget | null
    getCurrentTarget: () => DomEventTarget | null
    getBubbles: () => boolean
    getCancelable: () => boolean
    getIsTrusted: () => boolean
    getTimeStamp: () => DomTimeStamp
    getDefaultPrevented: () => boolean
    getEventPhase: () => DomEventPhase
    static name: string
}
export abstract class DomCustomEventIface {
    /* Fields of GXml-0.20.GXml.DomCustomEventIface */
    initCustomEvent: (type: string, bubbles: boolean, cancelable: boolean, detail: any) => void
    getDetail: () => { result: any }
    static name: string
}
export abstract class DomMutationObserverIface {
    /* Fields of GXml-0.20.GXml.DomMutationObserverIface */
    observe: (target: Node, options: DomMutationObserverInit) => void
    disconnect: () => void
    takeRecords: () => Gee.List
    static name: string
}
export abstract class DomMutationRecordIface {
    /* Fields of GXml-0.20.GXml.DomMutationRecordIface */
    getMtype: () => string
    getTarget: () => DomNode
    getAddedNodes: () => DomNodeList
    setAddedNodes: (value: DomNodeList) => void
    getRemovedNodes: () => DomNodeList
    setRemovedNodes: (value: DomNodeList) => void
    getPreviousSibling: () => DomNode | null
    getNextSibling: () => DomNode | null
    getAttributeName: () => string | null
    getAttributeNamespace: () => string | null
    getOldValue: () => string | null
    static name: string
}
export abstract class DomNodeIface {
    /* Fields of GXml-0.20.GXml.DomNodeIface */
    hasChildNodes: () => boolean
    normalize: () => void
    isEqualNode: (node?: DomNode | null) => boolean
    compareDocumentPosition: (other: DomNode) => DomNodeDocumentPosition
    contains: (other?: DomNode | null) => boolean
    lookupPrefix: (nspace?: string | null) => string | null
    lookupNamespaceUri: (prefix?: string | null) => string | null
    isDefaultNamespace: (nspace?: string | null) => boolean
    insertBefore: (node: DomNode, child?: DomNode | null) => DomNode
    appendChild: (node: DomNode) => DomNode
    replaceChild: (node: DomNode, child: DomNode) => DomNode
    removeChild: (child: DomNode) => DomNode
    getNodeType: () => DomNodeNodeType
    getNodeName: () => string
    getBaseUri: () => string | null
    getOwnerDocument: () => DomDocument | null
    setOwnerDocument: (value?: DomDocument | null) => void
    getParentNode: () => DomNode | null
    getParentElement: () => DomElement | null
    getChildNodes: () => DomNodeList
    getFirstChild: () => DomNode | null
    getLastChild: () => DomNode | null
    getPreviousSibling: () => DomNode | null
    getNextSibling: () => DomNode | null
    getNodeValue: () => string | null
    setNodeValue: (value?: string | null) => void
    getTextContent: () => string | null
    setTextContent: (value?: string | null) => void
    static name: string
}
export abstract class DomRangeIface {
    /* Fields of GXml-0.20.GXml.DomRangeIface */
    setStart: (node: DomNode, offset: number) => void
    setEnd: (node: DomNode, offset: number) => void
    setStartBefore: (node: DomNode) => void
    setStartAfter: (node: DomNode) => void
    setEndBefore: (node: DomNode) => void
    setEndAfter: (node: DomNode) => void
    collapse: (toStart: boolean) => void
    selectNode: (node: DomNode) => void
    selectNodeContents: (node: DomNode) => void
    compareBoundaryPoints: (how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    deleteContents: () => void
    extractContents: () => DomDocumentFragment | null
    cloneContents: () => DomDocumentFragment | null
    insertNode: (node: DomNode) => void
    surroundContents: (newParent: DomNode) => void
    cloneRange: () => DomRange
    detach: () => void
    isPointInRange: (node: DomNode, offset: number) => boolean
    comparePoint: (node: DomNode, offset: number) => number
    intersectsNode: (node: DomNode) => boolean
    toString: () => string
    getStartContainer: () => DomNode
    getStartOffset: () => number
    getEndContainer: () => DomNode
    getEndOffset: () => number
    getCollapsed: () => boolean
    getCommonAncestorContainer: () => DomNode
    static name: string
}
export abstract class IXsdSchemaIface {
    /* Fields of GXml-0.20.GXml.IXsdSchemaIface */
    getElementDefinitions: () => IXsdListElements
    setElementDefinitions: (value: IXsdListElements) => void
    getSimpleTypeDefinitions: () => IXsdListSimpleTypes
    setSimpleTypeDefinitions: (value: IXsdListSimpleTypes) => void
    getComplexTypeDefinitions: () => IXsdListComplexTypes
    setComplexTypeDefinitions: (value: IXsdListComplexTypes) => void
    static name: string
}
export abstract class IXsdBaseTypeIface {
    /* Fields of GXml-0.20.GXml.IXsdBaseTypeIface */
    getAnotation: () => IXsdAnnotation
    setAnotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleTypeIface {
    /* Fields of GXml-0.20.GXml.IXsdSimpleTypeIface */
    getFinal: () => string
    setFinal: (value: string) => void
    getId: () => string
    setId: (value: string) => void
    getName: () => string
    setName: (value: string) => void
    getAnnotation: () => IXsdAnnotation
    setAnnotation: (value: IXsdAnnotation) => void
    getList: () => IXsdTypeList
    setList: (value: IXsdTypeList) => void
    getUnion: () => IXsdTypeUnion
    setUnion: (value: IXsdTypeUnion) => void
    getRestriction: () => IXsdTypeRestriction
    setRestriction: (value: IXsdTypeRestriction) => void
    static name: string
}
export abstract class IXsdTypeDefIface {
    static name: string
}
export abstract class IXsdTypeRestrictionIface {
    /* Fields of GXml-0.20.GXml.IXsdTypeRestrictionIface */
    getBase: () => string
    setBase: (value: string) => void
    getId: () => string
    setId: (value: string) => void
    getSimpleType: () => IXsdSimpleType
    setSimpleType: (value: IXsdSimpleType) => void
    getEnumerations: () => IXsdListTypeRestrictionEnumerations
    setEnumerations: (value: IXsdListTypeRestrictionEnumerations) => void
    getWhiteSpaces: () => IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces: (value: IXsdListTypeRestrictionWhiteSpaces) => void
    static name: string
}
export abstract class IXsdTypeListIface {
    static name: string
}
export abstract class IXsdTypeUnionIface {
    static name: string
}
export abstract class IXsdTypeRestrictionDefIface {
    /* Fields of GXml-0.20.GXml.IXsdTypeRestrictionDefIface */
    getAnnotation: () => IXsdAnnotation
    setAnnotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdTypeRestrictionMinExclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMinInclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxExclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxInclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionTotalDigitsIface {
    static name: string
}
export abstract class IXsdTypeRestrictionFractionDigitsIface {
    static name: string
}
export abstract class IXsdTypeRestrictionLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMinLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionEnumerationIface {
    /* Fields of GXml-0.20.GXml.IXsdTypeRestrictionEnumerationIface */
    getId: () => string
    setId: (value: string) => void
    getValue: () => string
    setValue: (value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionWhiteSpaceIface {
    /* Fields of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpaceIface */
    getFixed: () => boolean
    setFixed: (value: boolean) => void
    getId: () => string
    setId: (value: string) => void
    getValue: () => string
    setValue: (value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionPatternIface {
    static name: string
}
export abstract class IXsdTypeRestrictionAssertionIface {
    static name: string
}
export abstract class IXsdTypeRestrictionExplicitTimezoneIface {
    static name: string
}
export abstract class IXsdComplexTypeIface {
    /* Fields of GXml-0.20.GXml.IXsdComplexTypeIface */
    getAbstract: () => boolean
    setAbstract: (value: boolean) => void
    getBlock: () => string
    setBlock: (value: string) => void
    getFinal: () => string
    setFinal: (value: string) => void
    getMixed: () => boolean
    setMixed: (value: boolean) => void
    getName: () => string
    setName: (value: string) => void
    getDefaultAttributesApply: () => boolean
    setDefaultAttributesApply: (value: boolean) => void
    getContentType: () => IXsdBaseContent
    setContentType: (value: IXsdBaseContent) => void
    getTypeAttributes: () => IXsdListAttributes
    getGroupAttributes: () => IXsdListAttributesGroup
    static name: string
}
export abstract class IXsdExtensionIface {
    /* Fields of GXml-0.20.GXml.IXsdExtensionIface */
    getBase: () => string
    setBase: (value: string) => void
    static name: string
}
export abstract class IXsdElementIface {
    /* Fields of GXml-0.20.GXml.IXsdElementIface */
    getAbstract: () => boolean
    setAbstract: (value: boolean) => void
    getBlock: () => string
    setBlock: (value: string) => void
    getDefault: () => string
    setDefault: (value: string) => void
    getFinal: () => string
    setFinal: (value: string) => void
    getFixed: () => string
    setFixed: (value: string) => void
    getForm: () => string
    setForm: (value: string) => void
    getId: () => string | null
    setId: (value?: string | null) => void
    getMaxOccurs: () => string
    setMaxOccurs: (value: string) => void
    getMinOccurs: () => string
    setMinOccurs: (value: string) => void
    getName: () => string
    setName: (value: string) => void
    getNillable: () => boolean
    setNillable: (value: boolean) => void
    getRef: () => string
    setRef: (value: string) => void
    getSubstitutionGroup: () => DomTokenList
    setSubstitutionGroup: (value: DomTokenList) => void
    getTargetNamespace: () => string
    setTargetNamespace: (value: string) => void
    getObjectType: () => string
    setObjectType: (value: string) => void
    getAnotation: () => IXsdAnnotation
    setAnotation: (value: IXsdAnnotation) => void
    getSimpleType: () => IXsdSimpleType
    setSimpleType: (value: IXsdSimpleType) => void
    getComplexType: () => IXsdComplexType
    setComplexType: (value: IXsdComplexType) => void
    static name: string
}
export abstract class IXsdAnnotationIface {
    static name: string
}
export abstract class IXsdBaseContentIface {
    /* Fields of GXml-0.20.GXml.IXsdBaseContentIface */
    getAnotation: () => IXsdAnnotation
    setAnotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleContentIface {
    static name: string
}
export abstract class IXsdComplexContentIface {
    static name: string
}
export abstract class IXsdOpenContentIface {
    static name: string
}
export abstract class IXsdBaseAttributeIface {
    /* Fields of GXml-0.20.GXml.IXsdBaseAttributeIface */
    getAnotation: () => IXsdAnnotation
    setAnotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdAttributeIface {
    static name: string
}
export abstract class IXsdAttributeGroupIface {
    static name: string
}
export abstract class IXsdListIface {
    /* Fields of GXml-0.20.GXml.IXsdListIface */
    getItem: (index: number) => DomElement | null
    append: (element: DomElement) => void
    remove: (index: number) => void
    indexOf: (element: DomElement) => number
    getElement: () => DomElement
    setElement: (value: DomElement) => void
    getItemsType: () => GObject.Type
    setItemsType: (value: GObject.Type) => void
    getItemsName: () => GObject.Type
    setItemsName: (value: GObject.Type) => void
    getLength: () => number
    static name: string
}
export abstract class IXsdListElementsIface {
    static name: string
}
export abstract class IXsdListSimpleTypesIface {
    static name: string
}
export abstract class IXsdListComplexTypesIface {
    static name: string
}
export abstract class IXsdListAttributesIface {
    static name: string
}
export abstract class IXsdListAttributesGroupIface {
    static name: string
}
export abstract class IXsdListTypeRestrictionEnumerationsIface {
    static name: string
}
export abstract class IXsdListTypeRestrictionWhiteSpacesIface {
    static name: string
}
export abstract class ObjectIface {
    /* Fields of GXml-0.20.GXml.ObjectIface */
    getPropertiesList: () => GObject.ParamSpec[]
    findPropertyName: (nick: string) => GObject.ParamSpec | null
    findObjectPropertyName: (pname: string) => GObject.ParamSpec | null
    getPropertyElementList: () => GObject.ParamSpec[]
    getPropertyString: (prop: GObject.ParamSpec) => string | null
    getAttribute: (name: string) => string | null
    findProperty: (name: string) => Property | null
    setAttribute: (name: string, val: string) => boolean
    getChild: (name: string) => DomElement | null
    findElements: (name: string) => DomElementList
    removeAttribute: (name: string) => boolean
    setInstanceProperty: (name: string) => boolean
    cleanPropertyElements: (name: string) => void
    static name: string
}
export abstract class ParserIface {
    /* Fields of GXml-0.20.GXml.ParserIface */
    writeFile: (file: Gio.File) => void
    writeFileAsync: (file: Gio.File, callback?: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (res: Gio.AsyncResult) => void
    writeString: () => string
    writeStringAsync: (callback?: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (res: Gio.AsyncResult) => string
    writeStream: (stream: Gio.OutputStream) => void
    writeStreamAsync: (stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (res: Gio.AsyncResult) => void
    readFile: (file: Gio.File) => void
    readFileAsync: (file: Gio.File, callback?: Gio.AsyncReadyCallback | null) => void
    readFileFinish: (res: Gio.AsyncResult) => void
    readStream: (stream: Gio.InputStream) => void
    readStreamAsync: (stream: Gio.InputStream, callback?: Gio.AsyncReadyCallback | null) => void
    readStreamFinish: (res: Gio.AsyncResult) => void
    readString: (str: string) => void
    readStringAsync: (str: string, callback?: Gio.AsyncReadyCallback | null) => void
    readStringFinish: (res: Gio.AsyncResult) => void
    createStream: () => Gio.InputStream
    createStreamAsync: (callback?: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (res: Gio.AsyncResult) => Gio.InputStream
    readChildNodes: (parent: DomNode) => void
    readChildNodesAsync: (parent: DomNode, callback?: Gio.AsyncReadyCallback | null) => void
    readChildNodesFinish: (res: Gio.AsyncResult) => void
    readChildNode: (parent: DomNode) => boolean
    readChildElement: (parent: DomNode) => boolean
    readElementProperty: (parent: DomNode) => { returnType: boolean, element: DomNode }
    addElementCollection: (parent: DomNode) => { returnType: boolean, element: DomNode }
    readChildNodesStream: (istream: Gio.InputStream) => void
    readChildNodesString: (str: string) => void
    readUnparsed: () => string
    moveNextNode: () => boolean
    currentIsEmptyElement: () => boolean
    currentIsElement: () => boolean
    currentIsDocument: () => boolean
    currentNodeName: () => string
    createElement: (parent: DomNode) => DomElement | null
    readElement: (element: DomElement) => void
    getBackup: () => boolean
    setBackup: (value: boolean) => void
    getIndent: () => boolean
    setIndent: (value: boolean) => void
    getCancellable: () => Gio.Cancellable | null
    setCancellable: (value?: Gio.Cancellable | null) => void
    getNode: () => DomNode
    getTypes: () => GLib.HashTable
    static name: string
}
export abstract class PropertyIface {
    /* Fields of GXml-0.20.GXml.PropertyIface */
    validateValue: (val?: string | null) => boolean
    getValue: () => string | null
    setValue: (value?: string | null) => void
    static name: string
}
export abstract class XPathContextIface {
    /* Fields of GXml-0.20.GXml.XPathContextIface */
    evaluate: (expression: string, resolver?: Gee.Map | null) => XPathObject
    static name: string
}
export abstract class XPathObjectIface {
    /* Fields of GXml-0.20.GXml.XPathObjectIface */
    getObjectType: () => XPathObjectType
    getBooleanValue: () => boolean
    getStringValue: () => string
    getNumberValue: () => number
    getNodeset: () => DomHTMLCollection
    static name: string
}
}