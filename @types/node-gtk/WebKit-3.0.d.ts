/**
 * WebKit-3.0
 */

/// <reference types="node" />
import type { Soup } from './Soup-2.4';
import type { Gio } from './Gio-2.0';
import type { GObject } from './GObject-2.0';
import type { GLib } from './GLib-2.0';
import type { JavaScriptCore } from './JavaScriptCore-3.0';
import type { Gtk } from './Gtk-3.0';
import type { xlib } from './xlib-2.0';
import type { Gdk } from './Gdk-3.0';
import type { cairo } from './cairo-1.0';
import type { Pango } from './Pango-1.0';
import type { HarfBuzz } from './HarfBuzz-0.0';
import type { GdkPixbuf } from './GdkPixbuf-2.0';
import type { GModule } from './GModule-2.0';
import type { Atk } from './Atk-1.0';

declare namespace WebKit {

export enum CacheModel {
    DEFAULT,
    DOCUMENT_VIEWER,
    WEB_BROWSER,
    DOCUMENT_BROWSER,
}
export enum ContextMenuAction {
    NO_ACTION,
    OPEN_LINK,
    OPEN_LINK_IN_NEW_WINDOW,
    DOWNLOAD_LINK_TO_DISK,
    COPY_LINK_TO_CLIPBOARD,
    OPEN_IMAGE_IN_NEW_WINDOW,
    DOWNLOAD_IMAGE_TO_DISK,
    COPY_IMAGE_TO_CLIPBOARD,
    COPY_IMAGE_URL_TO_CLIPBOARD,
    OPEN_FRAME_IN_NEW_WINDOW,
    GO_BACK,
    GO_FORWARD,
    STOP,
    RELOAD,
    COPY,
    CUT,
    PASTE,
    DELETE,
    SELECT_ALL,
    INPUT_METHODS,
    UNICODE,
    SPELLING_GUESS,
    NO_GUESSES_FOUND,
    IGNORE_SPELLING,
    LEARN_SPELLING,
    IGNORE_GRAMMAR,
    FONT_MENU,
    BOLD,
    ITALIC,
    UNDERLINE,
    OUTLINE,
    INSPECT_ELEMENT,
    OPEN_MEDIA_IN_NEW_WINDOW,
    COPY_MEDIA_LINK_TO_CLIPBOARD,
    TOGGLE_MEDIA_CONTROLS,
    TOGGLE_MEDIA_LOOP,
    ENTER_VIDEO_FULLSCREEN,
    MEDIA_PLAY_PAUSE,
    MEDIA_MUTE,
}
export enum DownloadError {
    CANCELLED_BY_USER,
    DESTINATION,
    NETWORK,
}
export enum DownloadStatus {
    ERROR,
    CREATED,
    STARTED,
    CANCELLED,
    FINISHED,
}
export enum EditingBehavior {
    MAC,
    WINDOWS,
    UNIX,
}
export enum InsertAction {
    TYPED,
    PASTED,
    DROPPED,
}
export enum LoadStatus {
    PROVISIONAL,
    COMMITTED,
    FINISHED,
    FIRST_VISUALLY_NON_EMPTY_LAYOUT,
    FAILED,
}
export enum NavigationResponse {
    ACCEPT,
    IGNORE,
    DOWNLOAD,
}
export enum NetworkError {
    FAILED,
    TRANSPORT,
    UNKNOWN_PROTOCOL,
    CANCELLED,
    FILE_DOES_NOT_EXIST,
}
export enum PluginError {
    FAILED,
    CANNOT_FIND_PLUGIN,
    CANNOT_LOAD_PLUGIN,
    JAVA_UNAVAILABLE,
    CONNECTION_CANCELLED,
    WILL_HANDLE_LOAD,
}
export enum PolicyError {
    FAILED,
    CANNOT_SHOW_MIME_TYPE,
    CANNOT_SHOW_URL,
    FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE,
    CANNOT_USE_RESTRICTED_PORT,
}
export enum SelectionAffinity {
    UPSTREAM,
    DOWNSTREAM,
}
export enum WebNavigationReason {
    LINK_CLICKED,
    FORM_SUBMITTED,
    BACK_FORWARD,
    RELOAD,
    FORM_RESUBMITTED,
    OTHER,
}
export enum WebViewTargetInfo {
    HTML,
    TEXT,
    IMAGE,
    URI_LIST,
    NETSCAPE_URL,
}
export enum WebViewViewMode {
    WINDOWED,
    FLOATING,
    FULLSCREEN,
    MAXIMIZED,
    MINIMIZED,
}
export enum HitTestResultContext {
    DOCUMENT,
    LINK,
    IMAGE,
    MEDIA,
    SELECTION,
    EDITABLE,
}
export enum SecurityPolicy {
    LOCAL,
    NO_ACCESS_TO_OTHER_SCHEME,
    DISPLAY_ISOLATED,
    SECURE,
    CORS_ENABLED,
    EMPTY_DOCUMENT,
}
export const MAJOR_VERSION: number
export const MICRO_VERSION: number
export const MINOR_VERSION: number
export const USER_AGENT_MAJOR_VERSION: number
export const USER_AGENT_MINOR_VERSION: number
export function applicationCacheGetDatabaseDirectoryPath(): string
export function checkVersion(major: number, minor: number, micro: number): boolean
export function contextMenuItemGetAction(item: Gtk.MenuItem): ContextMenuAction
export function geolocationPolicyAllow(decision: GeolocationPolicyDecision): void
export function geolocationPolicyDeny(decision: GeolocationPolicyDecision): void
export function getCacheModel(): CacheModel
export function getDefaultSession(): Soup.Session
export function getDefaultWebDatabaseQuota(): number
export function getFaviconDatabase(): FaviconDatabase
export function getIconDatabase(): IconDatabase
export function getSecurityPolicyForUriScheme(scheme: string): SecurityPolicy
export function getTextChecker(): GObject.Object
export function getWebDatabaseDirectoryPath(): string
export function getWebPluginDatabase(): WebPluginDatabase
export function majorVersion(): number
export function microVersion(): number
export function minorVersion(): number
export function networkErrorQuark(): GLib.Quark
export function pluginErrorQuark(): GLib.Quark
export function policyErrorQuark(): GLib.Quark
export function removeAllWebDatabases(): void
export function setCacheModel(cacheModel: CacheModel): void
export function setDefaultWebDatabaseQuota(defaultQuota: number): void
export function setSecurityPolicyForUriScheme(scheme: string, policy: SecurityPolicy): void
export function setTextChecker(checker: GObject.Object): void
export function setWebDatabaseDirectoryPath(path: string): void
export class DOMEventTarget {
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMEventTarget */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    static name: string
}
export class SpellChecker {
    /* Methods of WebKit.SpellChecker */
    checkSpellingOfString(string: string): [ /* misspellingLocation */ number | null, /* misspellingLength */ number | null ]
    getAutocorrectSuggestionsForMisspelledWord(word: string): string
    getGuessesForWord(word: string, context?: string | null): string[]
    ignoreWord(word: string): void
    learnWord(word: string): void
    updateSpellCheckingLanguages(languages?: string | null): void
    /* Virtual methods of WebKit.SpellChecker */
    vfuncCheckSpellingOfString(string: string): [ /* misspellingLocation */ number | null, /* misspellingLength */ number | null ]
    vfuncGetAutocorrectSuggestionsForMisspelledWord(word: string): string
    vfuncGetGuessesForWord(word: string, context?: string | null): string[]
    vfuncIgnoreWord(word: string): void
    vfuncLearnWord(word: string): void
    vfuncUpdateSpellCheckingLanguages(languages?: string | null): void
    static name: string
}
export interface DOMAttr_ConstructProps extends DOMNode_ConstructProps {
    value?: string
}
export class DOMAttr {
    /* Properties of WebKit.DOMAttr */
    readonly isId: boolean
    readonly name: string
    readonly ownerElement: DOMElement
    readonly specified: boolean
    value: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMAttr */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMAttr */
    getIsId(): boolean
    getName(): string
    getOwnerElement(): DOMElement
    getSpecified(): boolean
    getValue(): string
    setValue(value: string): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-id", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-id", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-element", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-element", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMAttr_ConstructProps)
    _init (config?: DOMAttr_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMAudioTrack_ConstructProps extends DOMObject_ConstructProps {
    enabled?: boolean
}
export class DOMAudioTrack {
    /* Properties of WebKit.DOMAudioTrack */
    enabled: boolean
    readonly id: string
    readonly kind: string
    readonly label: string
    readonly language: string
    /* Fields of WebKit.DOMAudioTrack */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMAudioTrack */
    getEnabled(): boolean
    getId(): string
    getKind(): string
    getLabel(): string
    getLanguage(): string
    setEnabled(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::kind", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kind", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: DOMAudioTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMAudioTrack_ConstructProps)
    _init (config?: DOMAudioTrack_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMAudioTrackList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMAudioTrackList {
    /* Properties of WebKit.DOMAudioTrackList */
    readonly length: number
    /* Fields of WebKit.DOMAudioTrackList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMAudioTrackList */
    dispatchEvent(evt: DOMEvent): boolean
    getLength(): number
    getTrackById(id: string): DOMAudioTrack
    item(index: number): DOMAudioTrack
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMAudioTrackList */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMAudioTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMAudioTrackList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMAudioTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMAudioTrackList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMAudioTrackList_ConstructProps)
    _init (config?: DOMAudioTrackList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMBarInfo_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMBarInfo {
    /* Properties of WebKit.DOMBarInfo */
    readonly visible: boolean
    /* Fields of WebKit.DOMObject */
    parentInstance: GObject.Object
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMBarInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMBarInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: (($obj: DOMBarInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: DOMBarInfo, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMBarInfo_ConstructProps)
    _init (config?: DOMBarInfo_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static getVisible(self: object): boolean
    static $gtype: GObject.Type
}
export interface DOMBarProp_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMBarProp {
    /* Properties of WebKit.DOMBarProp */
    readonly visible: boolean
    /* Fields of WebKit.DOMBarProp */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMBarProp */
    getVisible(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMBarProp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMBarProp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: (($obj: DOMBarProp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: DOMBarProp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMBarProp_ConstructProps)
    _init (config?: DOMBarProp_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMBatteryManager_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMBatteryManager {
    /* Properties of WebKit.DOMBatteryManager */
    readonly charging: boolean
    readonly chargingTime: number
    readonly dischargingTime: number
    readonly level: number
    /* Fields of WebKit.DOMBatteryManager */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMBatteryManager */
    dispatchEvent(event: DOMEvent): boolean
    getCharging(): boolean
    getChargingTime(): number
    getDischargingTime(): number
    getLevel(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMBatteryManager */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charging", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charging", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charging-time", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charging-time", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::discharging-time", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::discharging-time", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::discharging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::discharging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::discharging-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::level", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::level", callback: (($obj: DOMBatteryManager, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMBatteryManager_ConstructProps)
    _init (config?: DOMBatteryManager_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMBlob_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMBlob {
    /* Properties of WebKit.DOMBlob */
    readonly size: number
    readonly type: string
    /* Fields of WebKit.DOMBlob */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMBlob */
    getSize(): number
    slice(start: number, end: number, contentType: string): DOMBlob
    webkitSlice(start: number, end: number, contentType: string): DOMBlob
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMBlob, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMBlob_ConstructProps)
    _init (config?: DOMBlob_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCDATASection_ConstructProps extends DOMText_ConstructProps {
}
export class DOMCDATASection {
    /* Properties of WebKit.DOMText */
    readonly wholeText: string
    /* Properties of WebKit.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMCDATASection */
    parentInstance: DOMText
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMText */
    getWholeText(): string
    replaceWholeText(content: string): DOMText
    splitText(offset: number): DOMText
    /* Methods of WebKit.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    remove(): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMCDATASection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCDATASection_ConstructProps)
    _init (config?: DOMCDATASection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCSSRule_ConstructProps extends DOMObject_ConstructProps {
    cssText?: string
}
export class DOMCSSRule {
    /* Properties of WebKit.DOMCSSRule */
    cssText: string
    readonly parentRule: DOMCSSRule
    readonly parentStyleSheet: DOMCSSStyleSheet
    readonly type: number
    /* Fields of WebKit.DOMCSSRule */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCSSRule */
    getCssText(): string
    getParentRule(): DOMCSSRule
    getParentStyleSheet(): DOMCSSStyleSheet
    setCssText(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-text", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-rule", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-rule", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMCSSRule, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSRule_ConstructProps)
    _init (config?: DOMCSSRule_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCSSRuleList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMCSSRuleList {
    /* Properties of WebKit.DOMCSSRuleList */
    readonly length: number
    /* Fields of WebKit.DOMCSSRuleList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCSSRuleList */
    getLength(): number
    item(index: number): DOMCSSRule
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCSSRuleList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCSSRuleList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMCSSRuleList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMCSSRuleList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSRuleList_ConstructProps)
    _init (config?: DOMCSSRuleList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCSSStyleDeclaration_ConstructProps extends DOMObject_ConstructProps {
    cssText?: string
}
export class DOMCSSStyleDeclaration {
    /* Properties of WebKit.DOMCSSStyleDeclaration */
    cssText: string
    readonly length: number
    readonly parentRule: DOMCSSRule
    /* Fields of WebKit.DOMCSSStyleDeclaration */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCSSStyleDeclaration */
    getCssText(): string
    getLength(): number
    getParentRule(): DOMCSSRule
    getPropertyCssValue(propertyName: string): DOMCSSValue
    getPropertyPriority(propertyName: string): string
    getPropertyShorthand(propertyName: string): string
    getPropertyValue(propertyName: string): string
    isPropertyImplicit(propertyName: string): boolean
    item(index: number): string
    removeProperty(propertyName: string): string
    setCssText(value: string): void
    setProperty(propertyName: string, value: string, priority: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-text", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-rule", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-rule", callback: (($obj: DOMCSSStyleDeclaration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSStyleDeclaration_ConstructProps)
    _init (config?: DOMCSSStyleDeclaration_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCSSStyleSheet_ConstructProps extends DOMStyleSheet_ConstructProps {
}
export class DOMCSSStyleSheet {
    /* Properties of WebKit.DOMCSSStyleSheet */
    readonly cssRules: DOMCSSRuleList
    readonly ownerRule: DOMCSSRule
    readonly rules: DOMCSSRuleList
    /* Properties of WebKit.DOMStyleSheet */
    disabled: boolean
    readonly href: string
    readonly media: DOMMediaList
    readonly ownerNode: DOMNode
    readonly parentStyleSheet: DOMStyleSheet
    readonly title: string
    readonly type: string
    /* Fields of WebKit.DOMCSSStyleSheet */
    parentInstance: DOMStyleSheet
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCSSStyleSheet */
    addRule(selector: string, style: string, index: number): number
    deleteRule(index: number): void
    getCssRules(): DOMCSSRuleList
    getOwnerRule(): DOMCSSRule
    getRules(): DOMCSSRuleList
    insertRule(rule: string, index: number): number
    removeRule(index: number): void
    /* Methods of WebKit.DOMStyleSheet */
    getDisabled(): boolean
    getHref(): string
    getMedia(): DOMMediaList
    getOwnerNode(): DOMNode
    getParentStyleSheet(): DOMStyleSheet
    getTitle(): string
    setDisabled(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-rules", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-rules", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-rule", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-rule", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rules", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rules", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-node", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-node", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMCSSStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSStyleSheet_ConstructProps)
    _init (config?: DOMCSSStyleSheet_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCSSValue_ConstructProps extends DOMObject_ConstructProps {
    cssText?: string
}
export class DOMCSSValue {
    /* Properties of WebKit.DOMCSSValue */
    cssText: string
    readonly cssValueType: number
    /* Fields of WebKit.DOMCSSValue */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCSSValue */
    getCssText(): string
    getCssValueType(): number
    setCssText(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-text", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-value-type", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-value-type", callback: (($obj: DOMCSSValue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSValue_ConstructProps)
    _init (config?: DOMCSSValue_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMCharacterData_ConstructProps extends DOMNode_ConstructProps {
    data?: string
}
export class DOMCharacterData {
    /* Properties of WebKit.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMCharacterData */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    remove(): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCharacterData_ConstructProps)
    _init (config?: DOMCharacterData_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMComment_ConstructProps extends DOMCharacterData_ConstructProps {
}
export class DOMComment {
    /* Properties of WebKit.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMComment */
    parentInstance: DOMCharacterData
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    remove(): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMComment_ConstructProps)
    _init (config?: DOMComment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMConsole_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMConsole {
    /* Fields of WebKit.DOMConsole */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMConsole */
    getMemory(): object
    groupEnd(): void
    time(title: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMConsole, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMConsole, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMConsole_ConstructProps)
    _init (config?: DOMConsole_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMApplicationCache_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMApplicationCache {
    /* Properties of WebKit.DOMDOMApplicationCache */
    readonly status: number
    /* Fields of WebKit.DOMDOMApplicationCache */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMApplicationCache */
    abort(): void
    dispatchEvent(evt: DOMEvent): boolean
    getStatus(): number
    swapCache(): void
    update(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMDOMApplicationCache */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMApplicationCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMApplicationCache, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::status", callback: (($obj: DOMDOMApplicationCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: DOMDOMApplicationCache, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMApplicationCache_ConstructProps)
    _init (config?: DOMDOMApplicationCache_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMImplementation_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMImplementation {
    /* Fields of WebKit.DOMDOMImplementation */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMImplementation */
    createCssStyleSheet(title: string, media: string): DOMCSSStyleSheet
    createDocument(namespaceURI: string | null, qualifiedName: string, doctype?: DOMDocumentType | null): DOMDocument
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DOMDocumentType
    createHtmlDocument(title: string): DOMHTMLDocument
    hasFeature(feature: string, version: string): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMImplementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMImplementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMImplementation_ConstructProps)
    _init (config?: DOMDOMImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMMimeType_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMMimeType {
    /* Properties of WebKit.DOMDOMMimeType */
    readonly description: string
    readonly enabledPlugin: DOMDOMPlugin
    readonly suffixes: string
    readonly type: string
    /* Fields of WebKit.DOMDOMMimeType */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMMimeType */
    getDescription(): string
    getEnabledPlugin(): DOMDOMPlugin
    getSuffixes(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::description", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled-plugin", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled-plugin", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled-plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled-plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled-plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suffixes", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suffixes", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suffixes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suffixes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suffixes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMDOMMimeType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMMimeType_ConstructProps)
    _init (config?: DOMDOMMimeType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMMimeTypeArray_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMMimeTypeArray {
    /* Properties of WebKit.DOMDOMMimeTypeArray */
    readonly length: number
    /* Fields of WebKit.DOMDOMMimeTypeArray */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMMimeTypeArray */
    getLength(): number
    item(index: number): DOMDOMMimeType
    namedItem(name: string): DOMDOMMimeType
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMMimeTypeArray, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMMimeTypeArray, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMMimeTypeArray, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMMimeTypeArray, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMMimeTypeArray_ConstructProps)
    _init (config?: DOMDOMMimeTypeArray_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMNamedFlowCollection_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMNamedFlowCollection {
    /* Properties of WebKit.DOMDOMNamedFlowCollection */
    readonly length: number
    /* Fields of WebKit.DOMDOMNamedFlowCollection */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMNamedFlowCollection */
    getLength(): number
    item(index: number): DOMWebKitNamedFlow
    namedItem(name: string): DOMWebKitNamedFlow
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMNamedFlowCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMNamedFlowCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMNamedFlowCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMNamedFlowCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMNamedFlowCollection_ConstructProps)
    _init (config?: DOMDOMNamedFlowCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMPlugin_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMPlugin {
    /* Properties of WebKit.DOMDOMPlugin */
    readonly description: string
    readonly filename: string
    readonly length: number
    readonly name: string
    /* Fields of WebKit.DOMDOMPlugin */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMPlugin */
    getDescription(): string
    getFilename(): string
    getLength(): number
    getName(): string
    item(index: number): DOMDOMMimeType
    namedItem(name: string): DOMDOMMimeType
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::description", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filename", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMDOMPlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMPlugin_ConstructProps)
    _init (config?: DOMDOMPlugin_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMPluginArray_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMPluginArray {
    /* Properties of WebKit.DOMDOMPluginArray */
    readonly length: number
    /* Fields of WebKit.DOMDOMPluginArray */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMPluginArray */
    getLength(): number
    item(index: number): DOMDOMPlugin
    namedItem(name: string): DOMDOMPlugin
    refresh(reload: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMPluginArray, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMPluginArray, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMPluginArray, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMPluginArray, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMPluginArray_ConstructProps)
    _init (config?: DOMDOMPluginArray_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMSecurityPolicy_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMSecurityPolicy {
    /* Properties of WebKit.DOMDOMSecurityPolicy */
    readonly allowsEval: boolean
    readonly allowsInlineScript: boolean
    readonly allowsInlineStyle: boolean
    readonly isActive: boolean
    readonly reportUrIs: DOMDOMStringList
    /* Fields of WebKit.DOMDOMSecurityPolicy */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMSecurityPolicy */
    allowsConnectionTo(url: string): boolean
    allowsFontFrom(url: string): boolean
    allowsFormAction(url: string): boolean
    allowsFrameFrom(url: string): boolean
    allowsImageFrom(url: string): boolean
    allowsMediaFrom(url: string): boolean
    allowsObjectFrom(url: string): boolean
    allowsPluginType(type: string): boolean
    allowsScriptFrom(url: string): boolean
    allowsStyleFrom(url: string): boolean
    getAllowsEval(): boolean
    getAllowsInlineScript(): boolean
    getAllowsInlineStyle(): boolean
    getIsActive(): boolean
    getReportUrIs(): DOMDOMStringList
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::allows-eval", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allows-eval", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::allows-eval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::allows-eval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::allows-eval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::allows-inline-script", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allows-inline-script", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::allows-inline-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::allows-inline-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::allows-inline-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::allows-inline-style", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allows-inline-style", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::allows-inline-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::allows-inline-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::allows-inline-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-active", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-active", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::report-ur-is", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::report-ur-is", callback: (($obj: DOMDOMSecurityPolicy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::report-ur-is", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::report-ur-is", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::report-ur-is", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMSecurityPolicy_ConstructProps)
    _init (config?: DOMDOMSecurityPolicy_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMSelection_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMSelection {
    /* Properties of WebKit.DOMDOMSelection */
    readonly anchorNode: DOMNode
    readonly anchorOffset: number
    readonly baseNode: DOMNode
    readonly baseOffset: number
    readonly extentNode: DOMNode
    readonly extentOffset: number
    readonly focusNode: DOMNode
    readonly focusOffset: number
    readonly isCollapsed: boolean
    readonly rangeCount: number
    readonly type: string
    /* Fields of WebKit.DOMDOMSelection */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMSelection */
    addRange(range: DOMRange): void
    collapse(node: DOMNode, index: number): void
    collapseToEnd(): void
    collapseToStart(): void
    containsNode(node: DOMNode, allowPartial: boolean): boolean
    deleteFromDocument(): void
    empty(): void
    extend(node: DOMNode, offset: number): void
    getAnchorNode(): DOMNode
    getAnchorOffset(): number
    getBaseNode(): DOMNode
    getBaseOffset(): number
    getExtentNode(): DOMNode
    getExtentOffset(): number
    getFocusNode(): DOMNode
    getFocusOffset(): number
    getIsCollapsed(): boolean
    getRangeAt(index: number): DOMRange
    getRangeCount(): number
    modify(alter: string, direction: string, granularity: string): void
    removeAllRanges(): void
    selectAllChildren(node: DOMNode): void
    setBaseAndExtent(baseNode: DOMNode, baseOffset: number, extentNode: DOMNode, extentOffset: number): void
    setPosition(node: DOMNode, offset: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchor-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchor-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-node", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-offset", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-collapsed", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-collapsed", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::range-count", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::range-count", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMDOMSelection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMSelection_ConstructProps)
    _init (config?: DOMDOMSelection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMSettableTokenList_ConstructProps extends DOMDOMTokenList_ConstructProps {
    value?: string
}
export class DOMDOMSettableTokenList {
    /* Properties of WebKit.DOMDOMSettableTokenList */
    value: string
    /* Properties of WebKit.DOMDOMTokenList */
    readonly length: number
    /* Fields of WebKit.DOMDOMSettableTokenList */
    parentInstance: DOMDOMTokenList
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of WebKit.DOMDOMTokenList */
    add(tokens: string): void
    contains(token: string): boolean
    getLength(): number
    item(index: number): string
    remove(tokens: string): void
    toggle(token: string, force: boolean): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMSettableTokenList_ConstructProps)
    _init (config?: DOMDOMSettableTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMStringList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMStringList {
    /* Properties of WebKit.DOMDOMStringList */
    readonly length: number
    /* Fields of WebKit.DOMDOMStringList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMStringList */
    contains(string: string): boolean
    getLength(): number
    item(index: number): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMStringList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMStringList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMStringList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMStringList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMStringList_ConstructProps)
    _init (config?: DOMDOMStringList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMStringMap_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMStringMap {
    /* Fields of WebKit.DOMDOMStringMap */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMStringMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMStringMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMStringMap_ConstructProps)
    _init (config?: DOMDOMStringMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMTokenList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMTokenList {
    /* Properties of WebKit.DOMDOMTokenList */
    readonly length: number
    /* Fields of WebKit.DOMDOMTokenList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMTokenList */
    add(tokens: string): void
    contains(token: string): boolean
    getLength(): number
    item(index: number): string
    remove(tokens: string): void
    toggle(token: string, force: boolean): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMTokenList_ConstructProps)
    _init (config?: DOMDOMTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMWindow_ConstructProps extends DOMObject_ConstructProps {
    defaultStatus?: string
    name?: string
    status?: string
}
export class DOMDOMWindow {
    /* Properties of WebKit.DOMDOMWindow */
    readonly applicationCache: DOMDOMApplicationCache
    readonly clientInformation: DOMNavigator
    readonly closed: boolean
    readonly console: DOMConsole
    readonly css: DOMDOMWindowCSS
    defaultStatus: string
    readonly devicePixelRatio: number
    readonly document: DOMDocument
    readonly frameElement: DOMElement
    readonly frames: DOMDOMWindow
    readonly history: DOMHistory
    readonly innerHeight: number
    readonly innerWidth: number
    readonly length: number
    readonly localStorage: DOMStorage
    readonly locationbar: DOMBarProp
    readonly menubar: DOMBarProp
    name: string
    readonly navigator: DOMNavigator
    readonly offscreenBuffering: boolean
    readonly opener: DOMDOMWindow
    readonly outerHeight: number
    readonly outerWidth: number
    readonly pageXOffset: number
    readonly pageYOffset: number
    readonly parent: DOMDOMWindow
    readonly performance: DOMPerformance
    readonly personalbar: DOMBarProp
    readonly screen: DOMScreen
    readonly screenLeft: number
    readonly screenTop: number
    readonly screenX: number
    readonly screenY: number
    readonly scrollX: number
    readonly scrollY: number
    readonly scrollbars: DOMBarProp
    readonly self: DOMDOMWindow
    readonly sessionStorage: DOMStorage
    status: string
    readonly statusbar: DOMBarProp
    readonly styleMedia: DOMStyleMedia
    readonly toolbar: DOMBarProp
    readonly top: DOMDOMWindow
    readonly webkitStorageInfo: DOMStorageInfo
    readonly window: DOMDOMWindow
    /* Fields of WebKit.DOMDOMWindow */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMWindow */
    alert(message: string): void
    atob(string: string): string
    blur(): void
    btoa(string: string): string
    cancelAnimationFrame(id: number): void
    captureEvents(): void
    clearInterval(handle: number): void
    clearTimeout(handle: number): void
    close(): void
    confirm(message: string): boolean
    dispatchEvent(evt: DOMEvent): boolean
    find(string: string, caseSensitive: boolean, backwards: boolean, wrap: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean
    focus(): void
    getApplicationCache(): DOMDOMApplicationCache
    getClientInformation(): DOMNavigator
    getClosed(): boolean
    getComputedStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getConsole(): DOMConsole
    getCss(): DOMDOMWindowCSS
    getDefaultStatus(): string
    getDevicePixelRatio(): number
    getDocument(): DOMDocument
    getFrameElement(): DOMElement
    getFrames(): DOMDOMWindow
    getHistory(): DOMHistory
    getInnerHeight(): number
    getInnerWidth(): number
    getLength(): number
    getLocalStorage(): DOMStorage
    getLocationbar(): DOMBarProp
    getMenubar(): DOMBarProp
    getName(): string
    getNavigator(): DOMNavigator
    getOffscreenBuffering(): boolean
    getOpener(): DOMDOMWindow
    getOuterHeight(): number
    getOuterWidth(): number
    getPageXOffset(): number
    getPageYOffset(): number
    getParent(): DOMDOMWindow
    getPerformance(): DOMPerformance
    getPersonalbar(): DOMBarProp
    getScreen(): DOMScreen
    getScreenLeft(): number
    getScreenTop(): number
    getScreenX(): number
    getScreenY(): number
    getScrollX(): number
    getScrollY(): number
    getScrollbars(): DOMBarProp
    getSelection(): DOMDOMSelection
    getSelf(): DOMDOMWindow
    getSessionStorage(): DOMStorage
    getStatus(): string
    getStatusbar(): DOMBarProp
    getStyleMedia(): DOMStyleMedia
    getToolbar(): DOMBarProp
    getTop(): DOMDOMWindow
    getWebkitStorageInfo(): DOMStorageInfo
    getWindow(): DOMDOMWindow
    matchMedia(query: string): DOMMediaQueryList
    moveBy(x: number, y: number): void
    moveTo(x: number, y: number): void
    print(): void
    prompt(message: string, defaultValue: string): string
    releaseEvents(): void
    resizeBy(x: number, y: number): void
    resizeTo(width: number, height: number): void
    scroll(x: number, y: number): void
    scrollBy(x: number, y: number): void
    scrollTo(x: number, y: number): void
    setDefaultStatus(value: string): void
    setName(value: string): void
    setStatus(value: string): void
    stop(): void
    webkitCancelAnimationFrame(id: number): void
    webkitCancelRequestAnimationFrame(id: number): void
    webkitConvertPointFromNodeToPage(node: DOMNode, p: DOMWebKitPoint): DOMWebKitPoint
    webkitConvertPointFromPageToNode(node: DOMNode, p: DOMWebKitPoint): DOMWebKitPoint
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMDOMWindow */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::application-cache", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::application-cache", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-information", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-information", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-information", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-information", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-information", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::closed", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::closed", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::console", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::console", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::console", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::console", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::console", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-status", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-status", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-pixel-ratio", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-pixel-ratio", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-element", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-element", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frames", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frames", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::history", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::history", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::history", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::history", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::history", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-height", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-height", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-width", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-width", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-storage", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-storage", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::locationbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::locationbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::locationbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::locationbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::locationbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::menubar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::menubar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::menubar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::menubar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::menubar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::navigator", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::navigator", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::navigator", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::navigator", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::navigator", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offscreen-buffering", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-buffering", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opener", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opener", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-height", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-height", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-width", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-width", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x-offset", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x-offset", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y-offset", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y-offset", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::performance", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::performance", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::performance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::performance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::performance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::personalbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::personalbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::personalbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::personalbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::personalbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-left", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-left", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-top", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-top", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-x", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-x", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-y", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-y", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrollbars", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrollbars", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrollbars", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrollbars", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrollbars", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::self", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::self", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-storage", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-storage", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::status", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::statusbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::statusbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::statusbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::statusbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::statusbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-media", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-media", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::toolbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::toolbar", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::toolbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::toolbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::toolbar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::top", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-storage-info", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-storage-info", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-storage-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-storage-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-storage-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::window", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: DOMDOMWindow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMWindow_ConstructProps)
    _init (config?: DOMDOMWindow_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDOMWindowCSS_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDOMWindowCSS {
    /* Fields of WebKit.DOMDOMWindowCSS */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDOMWindowCSS */
    supports(property: string, value: string): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDOMWindowCSS, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDOMWindowCSS, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMWindowCSS_ConstructProps)
    _init (config?: DOMDOMWindowCSS_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDatabase_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMDatabase {
    /* Properties of WebKit.DOMDatabase */
    readonly version: string
    /* Fields of WebKit.DOMDatabase */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDatabase */
    getVersion(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDatabase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: (($obj: DOMDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: DOMDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDatabase_ConstructProps)
    _init (config?: DOMDatabase_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDocument_ConstructProps extends DOMNode_ConstructProps {
    charset?: string
    cookie?: string
    documentUri?: string
    selectedStylesheetSet?: string
    title?: string
    xmlStandalone?: boolean
    xmlVersion?: string
}
export class DOMDocument {
    /* Properties of WebKit.DOMDocument */
    readonly anchors: DOMHTMLCollection
    readonly applets: DOMHTMLCollection
    readonly body: DOMHTMLElement
    readonly characterSet: string
    charset: string
    readonly compatMode: string
    cookie: string
    readonly currentScript: DOMHTMLScriptElement
    readonly defaultCharset: string
    readonly defaultView: DOMDOMWindow
    readonly doctype: DOMDocumentType
    readonly documentElement: DOMElement
    documentUri: string
    readonly domain: string
    readonly forms: DOMHTMLCollection
    readonly head: DOMHTMLHeadElement
    readonly hidden: boolean
    readonly images: DOMHTMLCollection
    readonly implementation: DOMDOMImplementation
    readonly inputEncoding: string
    readonly lastModified: string
    readonly links: DOMHTMLCollection
    readonly preferredStylesheetSet: string
    readonly readyState: string
    readonly referrer: string
    readonly securityPolicy: DOMDOMSecurityPolicy
    selectedStylesheetSet: string
    readonly styleSheets: DOMStyleSheetList
    title: string
    readonly url: string
    readonly visibilityState: string
    readonly webkitCurrentFullScreenElement: DOMElement
    readonly webkitFullScreenKeyboardInputAllowed: boolean
    readonly webkitFullscreenElement: DOMElement
    readonly webkitFullscreenEnabled: boolean
    readonly webkitIsFullScreen: boolean
    readonly webkitPointerLockElement: DOMElement
    readonly xmlEncoding: string
    xmlStandalone: boolean
    xmlVersion: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMDocument */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDocument */
    adoptNode(source: DOMNode): DOMNode
    caretRangeFromPoint(x: number, y: number): DOMRange
    createAttribute(name: string): DOMAttr
    createAttributeNs(namespaceURI: string | null, qualifiedName: string): DOMAttr
    createCdataSection(data: string): DOMCDATASection
    createComment(data: string): DOMComment
    createCssStyleDeclaration(): DOMCSSStyleDeclaration
    createDocumentFragment(): DOMDocumentFragment
    createElement(tagName: string): DOMElement
    createElementNs(namespaceURI: string | null, qualifiedName: string): DOMElement
    createEntityReference(name?: string | null): DOMEntityReference
    createEvent(eventType: string): DOMEvent
    createExpression(expression: string, resolver: DOMXPathNSResolver): DOMXPathExpression
    createNodeIterator(root: DOMNode, whatToShow: number, filter: DOMNodeFilter, expandEntityReferences: boolean): DOMNodeIterator
    createNsResolver(nodeResolver: DOMNode): DOMXPathNSResolver
    createProcessingInstruction(target: string, data: string): DOMProcessingInstruction
    createRange(): DOMRange
    createTextNode(data: string): DOMText
    createTouch(window: DOMDOMWindow, target: DOMEventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, webkitRadiusX: number, webkitRadiusY: number, webkitRotationAngle: number, webkitForce: number): DOMTouch
    createTreeWalker(root: DOMNode, whatToShow: number, filter: DOMNodeFilter, expandEntityReferences: boolean): DOMTreeWalker
    elementFromPoint(x: number, y: number): DOMElement
    evaluate(expression: string, contextNode: DOMNode, resolver: DOMXPathNSResolver | null, type: number, inResult?: DOMXPathResult | null): DOMXPathResult
    execCommand(command: string, userInterface: boolean, value: string): boolean
    getAnchors(): DOMHTMLCollection
    getApplets(): DOMHTMLCollection
    getBody(): DOMHTMLElement
    getCharacterSet(): string
    getCharset(): string
    getCompatMode(): string
    getCookie(): string
    getCurrentScript(): DOMHTMLScriptElement
    getDefaultCharset(): string
    getDefaultView(): DOMDOMWindow
    getDoctype(): DOMDocumentType
    getDocumentElement(): DOMElement
    getDocumentUri(): string
    getDomain(): string
    getElementById(elementId: string): DOMElement
    getElementsByClassName(tagname: string): DOMNodeList
    getElementsByName(elementName: string): DOMNodeList
    getElementsByTagName(tagname: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getForms(): DOMHTMLCollection
    getHead(): DOMHTMLHeadElement
    getHidden(): boolean
    getImages(): DOMHTMLCollection
    getImplementation(): DOMDOMImplementation
    getInputEncoding(): string
    getLastModified(): string
    getLinks(): DOMHTMLCollection
    getOverrideStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getPreferredStylesheetSet(): string
    getReadyState(): string
    getReferrer(): string
    getSecurityPolicy(): DOMDOMSecurityPolicy
    getSelectedStylesheetSet(): string
    getStyleSheets(): DOMStyleSheetList
    getTitle(): string
    getUrl(): string
    getVisibilityState(): string
    getWebkitCurrentFullScreenElement(): DOMElement
    getWebkitFullScreenKeyboardInputAllowed(): boolean
    getWebkitFullscreenElement(): DOMElement
    getWebkitFullscreenEnabled(): boolean
    getWebkitHidden(): boolean
    getWebkitIsFullScreen(): boolean
    getWebkitPointerLockElement(): DOMElement
    getWebkitVisibilityState(): string
    getXmlEncoding(): string
    getXmlStandalone(): boolean
    getXmlVersion(): string
    importNode(importedNode: DOMNode, deep: boolean): DOMNode
    queryCommandEnabled(command: string): boolean
    queryCommandIndeterm(command: string): boolean
    queryCommandState(command: string): boolean
    queryCommandSupported(command: string): boolean
    queryCommandValue(command: string): string
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    setBody(value: DOMHTMLElement): void
    setCharset(value: string): void
    setCookie(value: string): void
    setDocumentUri(value: string): void
    setSelectedStylesheetSet(value: string): void
    setTitle(value: string): void
    setXmlStandalone(value: boolean): void
    setXmlVersion(value: string): void
    webkitCancelFullScreen(): void
    webkitExitFullscreen(): void
    webkitExitPointerLock(): void
    webkitGetNamedFlows(): DOMDOMNamedFlowCollection
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchors", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchors", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::applets", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::applets", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::body", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::body", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cookie", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cookie", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-script", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-script", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-charset", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-charset", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-view", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-view", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::forms", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forms", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::head", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::head", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::images", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::images", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-encoding", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-encoding", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-modified", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-modified", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::links", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::links", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-stylesheet-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-stylesheet-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::referrer", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::referrer", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-policy", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-policy", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-stylesheet-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-stylesheet-set", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-sheets", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-sheets", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visibility-state", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visibility-state", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-full-screen-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-full-screen-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-enabled", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-is-full-screen", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-is-full-screen", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-pointer-lock-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-pointer-lock-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-encoding", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-encoding", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-standalone", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-standalone", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-version", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-version", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocument_ConstructProps)
    _init (config?: DOMDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDocumentFragment_ConstructProps extends DOMNode_ConstructProps {
}
export class DOMDocumentFragment {
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMDocumentFragment */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDocumentFragment */
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocumentFragment_ConstructProps)
    _init (config?: DOMDocumentFragment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMDocumentType_ConstructProps extends DOMNode_ConstructProps {
}
export class DOMDocumentType {
    /* Properties of WebKit.DOMDocumentType */
    readonly entities: DOMNamedNodeMap
    readonly internalSubset: string
    readonly name: string
    readonly notations: DOMNamedNodeMap
    readonly publicId: string
    readonly systemId: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMDocumentType */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMDocumentType */
    getEntities(): DOMNamedNodeMap
    getInternalSubset(): string
    getName(): string
    getNotations(): DOMNamedNodeMap
    getPublicId(): string
    getSystemId(): string
    remove(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entities", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entities", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::internal-subset", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::internal-subset", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::notations", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notations", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocumentType_ConstructProps)
    _init (config?: DOMDocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMElement_ConstructProps extends DOMNode_ConstructProps {
    className?: string
    id?: string
    scrollLeft?: number
    scrollTop?: number
}
export class DOMElement {
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMElement */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMElement_ConstructProps)
    _init (config?: DOMElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMEntityReference_ConstructProps extends DOMNode_ConstructProps {
}
export class DOMEntityReference {
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMEntityReference */
    parentInstance: DOMNode
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMEntityReference, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMEntityReference_ConstructProps)
    _init (config?: DOMEntityReference_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMEvent_ConstructProps extends DOMObject_ConstructProps {
    cancelBubble?: boolean
    returnValue?: boolean
}
export class DOMEvent {
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMEvent */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMEvent_ConstructProps)
    _init (config?: DOMEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMFile_ConstructProps extends DOMBlob_ConstructProps {
}
export class DOMFile {
    /* Properties of WebKit.DOMFile */
    readonly name: string
    readonly webkitRelativePath: string
    /* Properties of WebKit.DOMBlob */
    readonly size: number
    readonly type: string
    /* Fields of WebKit.DOMFile */
    parentInstance: DOMBlob
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMFile */
    getName(): string
    getWebkitRelativePath(): string
    /* Methods of WebKit.DOMBlob */
    getSize(): number
    slice(start: number, end: number, contentType: string): DOMBlob
    webkitSlice(start: number, end: number, contentType: string): DOMBlob
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-relative-path", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-relative-path", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-relative-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-relative-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-relative-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMFile, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMFile_ConstructProps)
    _init (config?: DOMFile_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMFileList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMFileList {
    /* Properties of WebKit.DOMFileList */
    readonly length: number
    /* Fields of WebKit.DOMFileList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMFileList */
    getLength(): number
    item(index: number): DOMFile
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMFileList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMFileList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMFileList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMFileList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMFileList_ConstructProps)
    _init (config?: DOMFileList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMGamepad_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMGamepad {
    /* Properties of WebKit.DOMGamepad */
    readonly id: string
    readonly index: number
    readonly timestamp: number
    /* Fields of WebKit.DOMGamepad */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMGamepad */
    getId(): string
    getIndex(): number
    getTimestamp(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timestamp", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: (($obj: DOMGamepad, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMGamepad_ConstructProps)
    _init (config?: DOMGamepad_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMGamepadList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMGamepadList {
    /* Properties of WebKit.DOMGamepadList */
    readonly length: number
    /* Fields of WebKit.DOMGamepadList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMGamepadList */
    getLength(): number
    item(index: number): DOMGamepad
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMGamepadList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMGamepadList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMGamepadList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMGamepadList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMGamepadList_ConstructProps)
    _init (config?: DOMGamepadList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMGeolocation_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMGeolocation {
    /* Fields of WebKit.DOMGeolocation */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMGeolocation */
    clearWatch(watchID: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMGeolocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMGeolocation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMGeolocation_ConstructProps)
    _init (config?: DOMGeolocation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLAnchorElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    charset?: string
    coords?: string
    download?: string
    hash?: string
    host?: string
    hostname?: string
    href?: string
    hreflang?: string
    name?: string
    pathname?: string
    ping?: string
    port?: string
    protocol?: string
    rel?: string
    rev?: string
    search?: string
    shape?: string
    target?: string
    type?: string
}
export class DOMHTMLAnchorElement {
    /* Properties of WebKit.DOMHTMLAnchorElement */
    charset: string
    coords: string
    download: string
    hash: string
    host: string
    hostname: string
    href: string
    hreflang: string
    name: string
    readonly origin: string
    pathname: string
    ping: string
    port: string
    protocol: string
    rel: string
    rev: string
    search: string
    shape: string
    target: string
    readonly text: string
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLAnchorElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLAnchorElement */
    getCharset(): string
    getCoords(): string
    getDownload(): string
    getHash(): string
    getHost(): string
    getHostname(): string
    getHref(): string
    getHreflang(): string
    getName(): string
    getOrigin(): string
    getPathname(): string
    getPing(): string
    getPort(): string
    getProtocol(): string
    getRel(): string
    getRev(): string
    getSearch(): string
    getShape(): string
    getTarget(): string
    getText(): string
    setCharset(value: string): void
    setCoords(value: string): void
    setDownload(value: string): void
    setHash(value: string): void
    setHost(value: string): void
    setHostname(value: string): void
    setHref(value: string): void
    setHreflang(value: string): void
    setName(value: string): void
    setPathname(value: string): void
    setPing(value: string): void
    setPort(value: string): void
    setProtocol(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setSearch(value: string): void
    setShape(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::coords", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::coords", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::download", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::download", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::download", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::download", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::download", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hash", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hash", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hreflang", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hreflang", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pathname", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pathname", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ping", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ping", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rel", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rel", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rev", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rev", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shape", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shape", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLAnchorElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAnchorElement_ConstructProps)
    _init (config?: DOMHTMLAnchorElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLAppletElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    alt?: string
    archive?: string
    code?: string
    codeBase?: string
    height?: string
    hspace?: number
    name?: string
    object?: string
    vspace?: number
    width?: string
}
export class DOMHTMLAppletElement {
    /* Properties of WebKit.DOMHTMLAppletElement */
    align: string
    alt: string
    archive: string
    code: string
    codeBase: string
    height: string
    hspace: number
    name: string
    object: string
    vspace: number
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLAppletElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLAppletElement */
    getAlign(): string
    getAlt(): string
    getArchive(): string
    getCode(): string
    getCodeBase(): string
    getHeight(): string
    getHspace(): number
    getName(): string
    getObject(): string
    getVspace(): number
    getWidth(): string
    setAlign(value: string): void
    setAlt(value: string): void
    setArchive(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setObject(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::archive", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::archive", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-base", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-base", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLAppletElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAppletElement_ConstructProps)
    _init (config?: DOMHTMLAppletElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLAreaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    alt?: string
    coords?: string
    href?: string
    noHref?: boolean
    ping?: string
    shape?: string
    target?: string
}
export class DOMHTMLAreaElement {
    /* Properties of WebKit.DOMHTMLAreaElement */
    alt: string
    coords: string
    readonly hash: string
    readonly host: string
    readonly hostname: string
    href: string
    noHref: boolean
    readonly pathname: string
    ping: string
    readonly port: string
    readonly protocol: string
    readonly search: string
    shape: string
    target: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLAreaElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLAreaElement */
    getAlt(): string
    getCoords(): string
    getHash(): string
    getHost(): string
    getHostname(): string
    getHref(): string
    getNoHref(): boolean
    getPathname(): string
    getPing(): string
    getPort(): string
    getProtocol(): string
    getSearch(): string
    getShape(): string
    getTarget(): string
    setAlt(value: string): void
    setCoords(value: string): void
    setHref(value: string): void
    setNoHref(value: boolean): void
    setPing(value: string): void
    setShape(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::coords", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::coords", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hash", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hash", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-href", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-href", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pathname", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pathname", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ping", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ping", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shape", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shape", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAreaElement_ConstructProps)
    _init (config?: DOMHTMLAreaElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLAudioElement_ConstructProps extends DOMHTMLMediaElement_ConstructProps {
}
export class DOMHTMLAudioElement {
    /* Properties of WebKit.DOMHTMLMediaElement */
    readonly audioTracks: DOMAudioTrackList
    autoplay: boolean
    readonly buffered: DOMTimeRanges
    readonly controller: DOMMediaController
    controls: boolean
    readonly currentSrc: string
    currentTime: number
    defaultMuted: boolean
    defaultPlaybackRate: number
    readonly duration: number
    readonly ended: boolean
    readonly error: DOMMediaError
    loop: boolean
    mediaGroup: string
    muted: boolean
    readonly networkState: number
    readonly paused: boolean
    playbackRate: number
    readonly played: DOMTimeRanges
    preload: string
    readonly readyState: number
    readonly seekable: DOMTimeRanges
    readonly seeking: boolean
    src: string
    readonly textTracks: DOMTextTrackList
    readonly videoTracks: DOMVideoTrackList
    volume: number
    readonly webkitAudioDecodedByteCount: number
    webkitClosedCaptionsVisible: boolean
    readonly webkitCurrentPlaybackTargetIsWireless: boolean
    readonly webkitHasClosedCaptions: boolean
    webkitPreservesPitch: boolean
    readonly webkitVideoDecodedByteCount: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLAudioElement */
    parentInstance: DOMHTMLMediaElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMediaElement */
    addTextTrack(kind: string, label: string, language: string): DOMTextTrack
    canPlayType(type: string): string
    fastSeek(time: number): void
    getAudioTracks(): DOMAudioTrackList
    getAutoplay(): boolean
    getBuffered(): DOMTimeRanges
    getController(): DOMMediaController
    getControls(): boolean
    getCurrentSrc(): string
    getCurrentTime(): number
    getDefaultMuted(): boolean
    getDefaultPlaybackRate(): number
    getDuration(): number
    getEnded(): boolean
    getError(): DOMMediaError
    getInitialTime(): number
    getLoop(): boolean
    getMediaGroup(): string
    getMuted(): boolean
    getNetworkState(): number
    getPaused(): boolean
    getPlaybackRate(): number
    getPlayed(): DOMTimeRanges
    getPreload(): string
    getReadyState(): number
    getSeekable(): DOMTimeRanges
    getSeeking(): boolean
    getSrc(): string
    getStartTime(): number
    getTextTracks(): DOMTextTrackList
    getVideoTracks(): DOMVideoTrackList
    getVolume(): number
    getWebkitAudioDecodedByteCount(): number
    getWebkitClosedCaptionsVisible(): boolean
    getWebkitCurrentPlaybackTargetIsWireless(): boolean
    getWebkitHasClosedCaptions(): boolean
    getWebkitPreservesPitch(): boolean
    getWebkitVideoDecodedByteCount(): number
    load(): void
    pause(): void
    play(): void
    setAutoplay(value: boolean): void
    setControls(value: boolean): void
    setCurrentTime(value: number): void
    setDefaultMuted(value: boolean): void
    setDefaultPlaybackRate(value: number): void
    setLoop(value: boolean): void
    setMediaGroup(value: string): void
    setMuted(value: boolean): void
    setPlaybackRate(value: number): void
    setPreload(value: string): void
    setSrc(value: string): void
    setVolume(value: number): void
    setWebkitClosedCaptionsVisible(value: boolean): void
    setWebkitPreservesPitch(value: boolean): void
    webkitShowPlaybackTargetPicker(): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoplay", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoplay", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffered", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffered", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controller", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controller", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controls", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controls", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-src", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-src", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-time", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-time", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-muted", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-muted", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duration", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ended", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ended", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-group", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-group", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::muted", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::muted", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-state", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-state", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paused", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paused", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::played", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::played", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preload", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preload", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seekable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seekable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seeking", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seeking", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLAudioElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAudioElement_ConstructProps)
    _init (config?: DOMHTMLAudioElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLBRElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    clear?: string
}
export class DOMHTMLBRElement {
    /* Properties of WebKit.DOMHTMLBRElement */
    clear: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLBRElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLBRElement */
    getClear(): string
    setClear(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::clear", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clear", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLBRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBRElement_ConstructProps)
    _init (config?: DOMHTMLBRElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLBaseElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    href?: string
    target?: string
}
export class DOMHTMLBaseElement {
    /* Properties of WebKit.DOMHTMLBaseElement */
    href: string
    target: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLBaseElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLBaseElement */
    getHref(): string
    getTarget(): string
    setHref(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLBaseElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBaseElement_ConstructProps)
    _init (config?: DOMHTMLBaseElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLBaseFontElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    color?: string
    face?: string
    size?: number
}
export class DOMHTMLBaseFontElement {
    /* Properties of WebKit.DOMHTMLBaseFontElement */
    color: string
    face: string
    size: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLBaseFontElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLBaseFontElement */
    getColor(): string
    getFace(): string
    getSize(): number
    setColor(value: string): void
    setFace(value: string): void
    setSize(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::color", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::face", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::face", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLBaseFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBaseFontElement_ConstructProps)
    _init (config?: DOMHTMLBaseFontElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLBodyElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    aLink?: string
    background?: string
    bgColor?: string
    link?: string
    text?: string
    vLink?: string
}
export class DOMHTMLBodyElement {
    /* Properties of WebKit.DOMHTMLBodyElement */
    aLink: string
    background: string
    bgColor: string
    link: string
    text: string
    vLink: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLBodyElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLBodyElement */
    getALink(): string
    getBackground(): string
    getBgColor(): string
    getLink(): string
    getText(): string
    getVLink(): string
    setALink(value: string): void
    setBackground(value: string): void
    setBgColor(value: string): void
    setLink(value: string): void
    setText(value: string): void
    setVLink(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::a-link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::a-link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-link", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLBodyElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBodyElement_ConstructProps)
    _init (config?: DOMHTMLBodyElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLButtonElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    autofocus?: boolean
    disabled?: boolean
    formAction?: string
    formEnctype?: string
    formMethod?: string
    formNoValidate?: boolean
    formTarget?: string
    name?: string
    type?: string
    value?: string
}
export class DOMHTMLButtonElement {
    /* Properties of WebKit.DOMHTMLButtonElement */
    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    formAction: string
    formEnctype: string
    formMethod: string
    formNoValidate: boolean
    formTarget: string
    readonly labels: DOMNodeList
    name: string
    type: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    value: string
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLButtonElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLButtonElement */
    checkValidity(): boolean
    getAutofocus(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getFormAction(): string
    getFormEnctype(): string
    getFormMethod(): string
    getFormNoValidate(): boolean
    getFormTarget(): string
    getLabels(): DOMNodeList
    getName(): string
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getValue(): string
    getWillValidate(): boolean
    setAutofocus(value: boolean): void
    setCustomValidity(error: string): void
    setDisabled(value: boolean): void
    setFormAction(value: string): void
    setFormEnctype(value: string): void
    setFormMethod(value: string): void
    setFormNoValidate(value: boolean): void
    setFormTarget(value: string): void
    setName(value: string): void
    setValue(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-action", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-action", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-enctype", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-enctype", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-method", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-method", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-no-validate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-no-validate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-target", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-target", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::labels", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::labels", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLButtonElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLButtonElement_ConstructProps)
    _init (config?: DOMHTMLButtonElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLCanvasElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    height?: number
    width?: number
}
export class DOMHTMLCanvasElement {
    /* Properties of WebKit.DOMHTMLCanvasElement */
    height: number
    width: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLCanvasElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLCanvasElement */
    getHeight(): number
    getWidth(): number
    setHeight(value: number): void
    setWidth(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLCanvasElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLCanvasElement_ConstructProps)
    _init (config?: DOMHTMLCanvasElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLCollection_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMHTMLCollection {
    /* Properties of WebKit.DOMHTMLCollection */
    readonly length: number
    /* Fields of WebKit.DOMHTMLCollection */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLCollection */
    getLength(): number
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLCollection_ConstructProps)
    _init (config?: DOMHTMLCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLDListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    compact?: boolean
}
export class DOMHTMLDListElement {
    /* Properties of WebKit.DOMHTMLDListElement */
    compact: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLDListElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLDListElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compact", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLDListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDListElement_ConstructProps)
    _init (config?: DOMHTMLDListElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLDetailsElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    open?: boolean
}
export class DOMHTMLDetailsElement {
    /* Properties of WebKit.DOMHTMLDetailsElement */
    open: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLDetailsElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLDetailsElement */
    getOpen(): boolean
    setOpen(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::open", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::open", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::open", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::open", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::open", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLDetailsElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDetailsElement_ConstructProps)
    _init (config?: DOMHTMLDetailsElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLDirectoryElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    compact?: boolean
}
export class DOMHTMLDirectoryElement {
    /* Properties of WebKit.DOMHTMLDirectoryElement */
    compact: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLDirectoryElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLDirectoryElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compact", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLDirectoryElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDirectoryElement_ConstructProps)
    _init (config?: DOMHTMLDirectoryElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLDivElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
}
export class DOMHTMLDivElement {
    /* Properties of WebKit.DOMHTMLDivElement */
    align: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLDivElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLDivElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLDivElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDivElement_ConstructProps)
    _init (config?: DOMHTMLDivElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLDocument_ConstructProps extends DOMDocument_ConstructProps {
    alinkColor?: string
    bgColor?: string
    designMode?: string
    dir?: string
    fgColor?: string
    linkColor?: string
    vlinkColor?: string
}
export class DOMHTMLDocument {
    /* Properties of WebKit.DOMHTMLDocument */
    readonly activeElement: DOMElement
    alinkColor: string
    bgColor: string
    readonly compatMode: string
    designMode: string
    dir: string
    readonly embeds: DOMHTMLCollection
    fgColor: string
    readonly height: number
    linkColor: string
    readonly plugins: DOMHTMLCollection
    readonly scripts: DOMHTMLCollection
    vlinkColor: string
    readonly width: number
    /* Properties of WebKit.DOMDocument */
    readonly anchors: DOMHTMLCollection
    readonly applets: DOMHTMLCollection
    readonly body: DOMHTMLElement
    readonly characterSet: string
    charset: string
    cookie: string
    readonly currentScript: DOMHTMLScriptElement
    readonly defaultCharset: string
    readonly defaultView: DOMDOMWindow
    readonly doctype: DOMDocumentType
    readonly documentElement: DOMElement
    documentUri: string
    readonly domain: string
    readonly forms: DOMHTMLCollection
    readonly head: DOMHTMLHeadElement
    readonly hidden: boolean
    readonly images: DOMHTMLCollection
    readonly implementation: DOMDOMImplementation
    readonly inputEncoding: string
    readonly lastModified: string
    readonly links: DOMHTMLCollection
    readonly preferredStylesheetSet: string
    readonly readyState: string
    readonly referrer: string
    readonly securityPolicy: DOMDOMSecurityPolicy
    selectedStylesheetSet: string
    readonly styleSheets: DOMStyleSheetList
    title: string
    readonly url: string
    readonly visibilityState: string
    readonly webkitCurrentFullScreenElement: DOMElement
    readonly webkitFullScreenKeyboardInputAllowed: boolean
    readonly webkitFullscreenElement: DOMElement
    readonly webkitFullscreenEnabled: boolean
    readonly webkitIsFullScreen: boolean
    readonly webkitPointerLockElement: DOMElement
    readonly xmlEncoding: string
    xmlStandalone: boolean
    xmlVersion: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLDocument */
    parentInstance: DOMDocument
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLDocument */
    captureEvents(): void
    clear(): void
    close(): void
    getActiveElement(): DOMElement
    getAlinkColor(): string
    getBgColor(): string
    getCompatMode(): string
    getDesignMode(): string
    getDir(): string
    getEmbeds(): DOMHTMLCollection
    getFgColor(): string
    getHeight(): number
    getLinkColor(): string
    getPlugins(): DOMHTMLCollection
    getScripts(): DOMHTMLCollection
    getVlinkColor(): string
    getWidth(): number
    hasFocus(): boolean
    open(): void
    releaseEvents(): void
    setAlinkColor(value: string): void
    setBgColor(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setFgColor(value: string): void
    setLinkColor(value: string): void
    setVlinkColor(value: string): void
    /* Methods of WebKit.DOMDocument */
    adoptNode(source: DOMNode): DOMNode
    caretRangeFromPoint(x: number, y: number): DOMRange
    createAttribute(name: string): DOMAttr
    createAttributeNs(namespaceURI: string | null, qualifiedName: string): DOMAttr
    createCdataSection(data: string): DOMCDATASection
    createComment(data: string): DOMComment
    createCssStyleDeclaration(): DOMCSSStyleDeclaration
    createDocumentFragment(): DOMDocumentFragment
    createElement(tagName: string): DOMElement
    createElementNs(namespaceURI: string | null, qualifiedName: string): DOMElement
    createEntityReference(name?: string | null): DOMEntityReference
    createEvent(eventType: string): DOMEvent
    createExpression(expression: string, resolver: DOMXPathNSResolver): DOMXPathExpression
    createNodeIterator(root: DOMNode, whatToShow: number, filter: DOMNodeFilter, expandEntityReferences: boolean): DOMNodeIterator
    createNsResolver(nodeResolver: DOMNode): DOMXPathNSResolver
    createProcessingInstruction(target: string, data: string): DOMProcessingInstruction
    createRange(): DOMRange
    createTextNode(data: string): DOMText
    createTouch(window: DOMDOMWindow, target: DOMEventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, webkitRadiusX: number, webkitRadiusY: number, webkitRotationAngle: number, webkitForce: number): DOMTouch
    createTreeWalker(root: DOMNode, whatToShow: number, filter: DOMNodeFilter, expandEntityReferences: boolean): DOMTreeWalker
    elementFromPoint(x: number, y: number): DOMElement
    evaluate(expression: string, contextNode: DOMNode, resolver: DOMXPathNSResolver | null, type: number, inResult?: DOMXPathResult | null): DOMXPathResult
    execCommand(command: string, userInterface: boolean, value: string): boolean
    getAnchors(): DOMHTMLCollection
    getApplets(): DOMHTMLCollection
    getBody(): DOMHTMLElement
    getCharacterSet(): string
    getCharset(): string
    getCookie(): string
    getCurrentScript(): DOMHTMLScriptElement
    getDefaultCharset(): string
    getDefaultView(): DOMDOMWindow
    getDoctype(): DOMDocumentType
    getDocumentElement(): DOMElement
    getDocumentUri(): string
    getDomain(): string
    getElementById(elementId: string): DOMElement
    getElementsByClassName(tagname: string): DOMNodeList
    getElementsByName(elementName: string): DOMNodeList
    getElementsByTagName(tagname: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getForms(): DOMHTMLCollection
    getHead(): DOMHTMLHeadElement
    getHidden(): boolean
    getImages(): DOMHTMLCollection
    getImplementation(): DOMDOMImplementation
    getInputEncoding(): string
    getLastModified(): string
    getLinks(): DOMHTMLCollection
    getOverrideStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getPreferredStylesheetSet(): string
    getReadyState(): string
    getReferrer(): string
    getSecurityPolicy(): DOMDOMSecurityPolicy
    getSelectedStylesheetSet(): string
    getStyleSheets(): DOMStyleSheetList
    getTitle(): string
    getUrl(): string
    getVisibilityState(): string
    getWebkitCurrentFullScreenElement(): DOMElement
    getWebkitFullScreenKeyboardInputAllowed(): boolean
    getWebkitFullscreenElement(): DOMElement
    getWebkitFullscreenEnabled(): boolean
    getWebkitHidden(): boolean
    getWebkitIsFullScreen(): boolean
    getWebkitPointerLockElement(): DOMElement
    getWebkitVisibilityState(): string
    getXmlEncoding(): string
    getXmlStandalone(): boolean
    getXmlVersion(): string
    importNode(importedNode: DOMNode, deep: boolean): DOMNode
    queryCommandEnabled(command: string): boolean
    queryCommandIndeterm(command: string): boolean
    queryCommandState(command: string): boolean
    queryCommandSupported(command: string): boolean
    queryCommandValue(command: string): string
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    setBody(value: DOMHTMLElement): void
    setCharset(value: string): void
    setCookie(value: string): void
    setDocumentUri(value: string): void
    setSelectedStylesheetSet(value: string): void
    setTitle(value: string): void
    setXmlStandalone(value: boolean): void
    setXmlVersion(value: string): void
    webkitCancelFullScreen(): void
    webkitExitFullscreen(): void
    webkitExitPointerLock(): void
    webkitGetNamedFlows(): DOMDOMNamedFlowCollection
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alink-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alink-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::design-mode", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::design-mode", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::embeds", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::embeds", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fg-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fg-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugins", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugins", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scripts", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scripts", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlink-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlink-color", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchors", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchors", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::applets", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::applets", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::body", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::body", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cookie", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cookie", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-script", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-script", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-charset", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-charset", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-view", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-view", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::forms", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forms", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::head", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::head", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::images", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::images", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-encoding", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-encoding", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-modified", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-modified", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::links", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::links", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-stylesheet-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-stylesheet-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::referrer", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::referrer", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-policy", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-policy", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-stylesheet-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-stylesheet-set", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-sheets", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-sheets", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visibility-state", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visibility-state", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-full-screen-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-full-screen-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-enabled", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-is-full-screen", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-is-full-screen", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-pointer-lock-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-pointer-lock-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-encoding", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-encoding", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-standalone", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-standalone", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-version", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-version", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDocument_ConstructProps)
    _init (config?: DOMHTMLDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLElement_ConstructProps extends DOMElement_ConstructProps {
    accessKey?: string
    contentEditable?: string
    dir?: string
    draggable?: boolean
    hidden?: boolean
    innerHtml?: string
    innerText?: string
    lang?: string
    outerHtml?: string
    outerText?: string
    spellcheck?: boolean
    tabIndex?: number
    title?: string
    translate?: boolean
    webkitdropzone?: string
}
export class DOMHTMLElement {
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLElement */
    parentInstance: DOMElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLElement_ConstructProps)
    _init (config?: DOMHTMLElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLEmbedElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    height?: number
    name?: string
    src?: string
    type?: string
    width?: number
}
export class DOMHTMLEmbedElement {
    /* Properties of WebKit.DOMHTMLEmbedElement */
    align: string
    height: number
    name: string
    src: string
    type: string
    width: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLEmbedElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLEmbedElement */
    getAlign(): string
    getHeight(): number
    getName(): string
    getSrc(): string
    getWidth(): number
    setAlign(value: string): void
    setHeight(value: number): void
    setName(value: string): void
    setSrc(value: string): void
    setWidth(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLEmbedElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLEmbedElement_ConstructProps)
    _init (config?: DOMHTMLEmbedElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLFieldSetElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    disabled?: boolean
    name?: string
}
export class DOMHTMLFieldSetElement {
    /* Properties of WebKit.DOMHTMLFieldSetElement */
    disabled: boolean
    readonly elements: DOMHTMLCollection
    readonly form: DOMHTMLFormElement
    name: string
    readonly type: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLFieldSetElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLFieldSetElement */
    checkValidity(): boolean
    getDisabled(): boolean
    getElements(): DOMHTMLCollection
    getForm(): DOMHTMLFormElement
    getName(): string
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getWillValidate(): boolean
    setCustomValidity(error: string): void
    setDisabled(value: boolean): void
    setName(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::elements", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::elements", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLFieldSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFieldSetElement_ConstructProps)
    _init (config?: DOMHTMLFieldSetElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLFontElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    color?: string
    face?: string
    size?: string
}
export class DOMHTMLFontElement {
    /* Properties of WebKit.DOMHTMLFontElement */
    color: string
    face: string
    size: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLFontElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLFontElement */
    getColor(): string
    getFace(): string
    getSize(): string
    setColor(value: string): void
    setFace(value: string): void
    setSize(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::color", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::face", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::face", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLFontElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFontElement_ConstructProps)
    _init (config?: DOMHTMLFontElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLFormElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    acceptCharset?: string
    action?: string
    autocapitalize?: string
    autocomplete?: string
    autocorrect?: boolean
    encoding?: string
    enctype?: string
    method?: string
    name?: string
    noValidate?: boolean
    target?: string
}
export class DOMHTMLFormElement {
    /* Properties of WebKit.DOMHTMLFormElement */
    acceptCharset: string
    action: string
    autocapitalize: string
    autocomplete: string
    autocorrect: boolean
    readonly elements: DOMHTMLCollection
    encoding: string
    enctype: string
    readonly length: number
    method: string
    name: string
    noValidate: boolean
    target: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLFormElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLFormElement */
    checkValidity(): boolean
    dispatchFormChange(): void
    dispatchFormInput(): void
    getAcceptCharset(): string
    getAction(): string
    getAutocapitalize(): string
    getAutocomplete(): string
    getAutocorrect(): boolean
    getElements(): DOMHTMLCollection
    getEncoding(): string
    getEnctype(): string
    getLength(): number
    getMethod(): string
    getName(): string
    getNoValidate(): boolean
    getTarget(): string
    reset(): void
    setAcceptCharset(value: string): void
    setAction(value: string): void
    setAutocapitalize(value: string): void
    setAutocomplete(value: string): void
    setAutocorrect(value: boolean): void
    setEncoding(value: string): void
    setEnctype(value: string): void
    setMethod(value: string): void
    setName(value: string): void
    setNoValidate(value: boolean): void
    setTarget(value: string): void
    submit(): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accept-charset", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept-charset", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocomplete", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocomplete", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::elements", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::elements", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enctype", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enctype", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-validate", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-validate", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLFormElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFormElement_ConstructProps)
    _init (config?: DOMHTMLFormElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLFrameElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    frameBorder?: string
    longDesc?: string
    marginHeight?: string
    marginWidth?: string
    name?: string
    noResize?: boolean
    scrolling?: string
    src?: string
}
export class DOMHTMLFrameElement {
    /* Properties of WebKit.DOMHTMLFrameElement */
    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string
    readonly height: number
    longDesc: string
    marginHeight: string
    marginWidth: string
    name: string
    noResize: boolean
    scrolling: string
    src: string
    readonly width: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLFrameElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLFrameElement */
    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string
    getHeight(): number
    getLongDesc(): string
    getMarginHeight(): string
    getMarginWidth(): string
    getName(): string
    getNoResize(): boolean
    getScrolling(): string
    getSrc(): string
    getWidth(): number
    setFrameBorder(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setNoResize(value: boolean): void
    setScrolling(value: string): void
    setSrc(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-document", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-window", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-window", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-border", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-border", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-resize", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-resize", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFrameElement_ConstructProps)
    _init (config?: DOMHTMLFrameElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLFrameSetElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    cols?: string
    rows?: string
}
export class DOMHTMLFrameSetElement {
    /* Properties of WebKit.DOMHTMLFrameSetElement */
    cols: string
    rows: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLFrameSetElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLFrameSetElement */
    getCols(): string
    getRows(): string
    setCols(value: string): void
    setRows(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cols", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cols", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLFrameSetElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFrameSetElement_ConstructProps)
    _init (config?: DOMHTMLFrameSetElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLHRElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    noShade?: boolean
    size?: string
    width?: string
}
export class DOMHTMLHRElement {
    /* Properties of WebKit.DOMHTMLHRElement */
    align: string
    noShade: boolean
    size: string
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLHRElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLHRElement */
    getAlign(): string
    getNoShade(): boolean
    getSize(): string
    getWidth(): string
    setAlign(value: string): void
    setNoShade(value: boolean): void
    setSize(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-shade", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-shade", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLHRElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHRElement_ConstructProps)
    _init (config?: DOMHTMLHRElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLHeadElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    profile?: string
}
export class DOMHTMLHeadElement {
    /* Properties of WebKit.DOMHTMLHeadElement */
    profile: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLHeadElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLHeadElement */
    getProfile(): string
    setProfile(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::profile", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::profile", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLHeadElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHeadElement_ConstructProps)
    _init (config?: DOMHTMLHeadElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLHeadingElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
}
export class DOMHTMLHeadingElement {
    /* Properties of WebKit.DOMHTMLHeadingElement */
    align: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLHeadingElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLHeadingElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLHeadingElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHeadingElement_ConstructProps)
    _init (config?: DOMHTMLHeadingElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLHtmlElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    manifest?: string
    version?: string
}
export class DOMHTMLHtmlElement {
    /* Properties of WebKit.DOMHTMLHtmlElement */
    manifest: string
    version: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLHtmlElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLHtmlElement */
    getManifest(): string
    getVersion(): string
    setManifest(value: string): void
    setVersion(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manifest", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manifest", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manifest", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manifest", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manifest", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLHtmlElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHtmlElement_ConstructProps)
    _init (config?: DOMHTMLHtmlElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLIFrameElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    frameBorder?: string
    height?: string
    longDesc?: string
    marginHeight?: string
    marginWidth?: string
    name?: string
    sandbox?: string
    scrolling?: string
    seamless?: boolean
    src?: string
    srcdoc?: string
    width?: string
}
export class DOMHTMLIFrameElement {
    /* Properties of WebKit.DOMHTMLIFrameElement */
    align: string
    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string
    height: string
    longDesc: string
    marginHeight: string
    marginWidth: string
    name: string
    sandbox: string
    scrolling: string
    seamless: boolean
    src: string
    srcdoc: string
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLIFrameElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLIFrameElement */
    getAlign(): string
    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string
    getHeight(): string
    getLongDesc(): string
    getMarginHeight(): string
    getMarginWidth(): string
    getName(): string
    getSandbox(): string
    getScrolling(): string
    getSeamless(): boolean
    getSrc(): string
    getSrcdoc(): string
    getWidth(): string
    setAlign(value: string): void
    setFrameBorder(value: string): void
    setHeight(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setSandbox(value: string): void
    setScrolling(value: string): void
    setSeamless(value: boolean): void
    setSrc(value: string): void
    setSrcdoc(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-document", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-window", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-window", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-border", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-border", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sandbox", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sandbox", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sandbox", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sandbox", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sandbox", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seamless", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seamless", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seamless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seamless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seamless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::srcdoc", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::srcdoc", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::srcdoc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::srcdoc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::srcdoc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLIFrameElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLIFrameElement_ConstructProps)
    _init (config?: DOMHTMLIFrameElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLImageElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    alt?: string
    border?: string
    crossOrigin?: string
    height?: number
    hspace?: number
    isMap?: boolean
    longDesc?: string
    lowsrc?: string
    name?: string
    src?: string
    srcset?: string
    useMap?: string
    vspace?: number
    width?: number
}
export class DOMHTMLImageElement {
    /* Properties of WebKit.DOMHTMLImageElement */
    align: string
    alt: string
    border: string
    readonly complete: boolean
    crossOrigin: string
    height: number
    hspace: number
    isMap: boolean
    longDesc: string
    lowsrc: string
    name: string
    readonly naturalHeight: number
    readonly naturalWidth: number
    src: string
    srcset: string
    useMap: string
    vspace: number
    width: number
    readonly x: number
    readonly y: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLImageElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLImageElement */
    getAlign(): string
    getAlt(): string
    getBorder(): string
    getComplete(): boolean
    getCrossOrigin(): string
    getHeight(): number
    getHspace(): number
    getIsMap(): boolean
    getLongDesc(): string
    getLowsrc(): string
    getName(): string
    getNaturalHeight(): number
    getNaturalWidth(): number
    getSrc(): string
    getSrcset(): string
    getUseMap(): string
    getVspace(): number
    getWidth(): number
    getX(): number
    getY(): number
    setAlign(value: string): void
    setAlt(value: string): void
    setBorder(value: string): void
    setCrossOrigin(value: string): void
    setHeight(value: number): void
    setHspace(value: number): void
    setIsMap(value: boolean): void
    setLongDesc(value: string): void
    setLowsrc(value: string): void
    setName(value: string): void
    setSrc(value: string): void
    setSrcset(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complete", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complete", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cross-origin", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cross-origin", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-map", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-map", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lowsrc", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lowsrc", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::natural-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::natural-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::srcset", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::srcset", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::srcset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::srcset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::srcset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLImageElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLImageElement_ConstructProps)
    _init (config?: DOMHTMLImageElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLInputElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    accept?: string
    align?: string
    alt?: string
    autocapitalize?: string
    autocomplete?: string
    autocorrect?: boolean
    autofocus?: boolean
    capture?: string
    checked?: boolean
    defaultChecked?: boolean
    defaultValue?: string
    dirName?: string
    disabled?: boolean
    formAction?: string
    formEnctype?: string
    formMethod?: string
    formNoValidate?: boolean
    formTarget?: string
    height?: number
    incremental?: boolean
    indeterminate?: boolean
    max?: string
    maxLength?: number
    min?: string
    multiple?: boolean
    name?: string
    pattern?: string
    placeholder?: string
    readOnly?: boolean
    required?: boolean
    size?: number
    src?: string
    step?: string
    type?: string
    useMap?: string
    value?: string
    valueAsNumber?: number
    webkitGrammar?: boolean
    webkitSpeech?: boolean
    webkitdirectory?: boolean
    width?: number
}
export class DOMHTMLInputElement {
    /* Properties of WebKit.DOMHTMLInputElement */
    accept: string
    align: string
    alt: string
    autocapitalize: string
    autocomplete: string
    autocorrect: boolean
    autofocus: boolean
    capture: string
    checked: boolean
    defaultChecked: boolean
    defaultValue: string
    dirName: string
    disabled: boolean
    readonly files: DOMFileList
    readonly form: DOMHTMLFormElement
    formAction: string
    formEnctype: string
    formMethod: string
    formNoValidate: boolean
    formTarget: string
    height: number
    incremental: boolean
    indeterminate: boolean
    readonly labels: DOMNodeList
    readonly list: DOMHTMLElement
    max: string
    maxLength: number
    min: string
    multiple: boolean
    name: string
    pattern: string
    placeholder: string
    readOnly: boolean
    required: boolean
    size: number
    src: string
    step: string
    type: string
    useMap: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    value: string
    valueAsNumber: number
    webkitGrammar: boolean
    webkitSpeech: boolean
    webkitdirectory: boolean
    width: number
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLInputElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLInputElement */
    checkValidity(): boolean
    getAccept(): string
    getAlign(): string
    getAlt(): string
    getAutocapitalize(): string
    getAutocomplete(): string
    getAutocorrect(): boolean
    getAutofocus(): boolean
    getCapture(): string
    getChecked(): boolean
    getDefaultChecked(): boolean
    getDefaultValue(): string
    getDirName(): string
    getDisabled(): boolean
    getFiles(): DOMFileList
    getForm(): DOMHTMLFormElement
    getFormAction(): string
    getFormEnctype(): string
    getFormMethod(): string
    getFormNoValidate(): boolean
    getFormTarget(): string
    getHeight(): number
    getIncremental(): boolean
    getIndeterminate(): boolean
    getLabels(): DOMNodeList
    getList(): DOMHTMLElement
    getMax(): string
    getMaxLength(): number
    getMin(): string
    getMultiple(): boolean
    getName(): string
    getPattern(): string
    getPlaceholder(): string
    getReadOnly(): boolean
    getRequired(): boolean
    getSize(): number
    getSrc(): string
    getStep(): string
    getUseMap(): string
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getValue(): string
    getValueAsNumber(): number
    getWebkitGrammar(): boolean
    getWebkitSpeech(): boolean
    getWebkitdirectory(): boolean
    getWidth(): number
    getWillValidate(): boolean
    isEdited(): boolean
    select(): void
    setAccept(value: string): void
    setAlign(value: string): void
    setAlt(value: string): void
    setAutocapitalize(value: string): void
    setAutocomplete(value: string): void
    setAutocorrect(value: boolean): void
    setAutofocus(value: boolean): void
    setCapture(value: string): void
    setChecked(value: boolean): void
    setCustomValidity(error: string): void
    setDefaultChecked(value: boolean): void
    setDefaultValue(value: string): void
    setDirName(value: string): void
    setDisabled(value: boolean): void
    setFiles(value: DOMFileList): void
    setFormAction(value: string): void
    setFormEnctype(value: string): void
    setFormMethod(value: string): void
    setFormNoValidate(value: boolean): void
    setFormTarget(value: string): void
    setHeight(value: number): void
    setIncremental(value: boolean): void
    setIndeterminate(value: boolean): void
    setMax(value: string): void
    setMaxLength(value: number): void
    setMin(value: string): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setPattern(value: string): void
    setPlaceholder(value: string): void
    setRangeText(replacement: string, start: number, end: number, selectionMode: string): void
    setReadOnly(value: boolean): void
    setRequired(value: boolean): void
    setSize(value: number): void
    setSrc(value: string): void
    setStep(value: string): void
    setUseMap(value: string): void
    setValue(value: string): void
    setValueAsNumber(value: number): void
    setValueForUser(value: string): void
    setWebkitGrammar(value: boolean): void
    setWebkitSpeech(value: boolean): void
    setWebkitdirectory(value: boolean): void
    setWidth(value: number): void
    stepDown(n: number): void
    stepUp(n: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accept", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocomplete", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocomplete", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocomplete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capture", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capture", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::checked", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::checked", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-checked", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-checked", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::files", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::files", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-action", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-action", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-enctype", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-enctype", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-method", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-method", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-no-validate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-no-validate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-no-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form-target", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form-target", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::incremental", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::incremental", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::incremental", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::incremental", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::incremental", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indeterminate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indeterminate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::labels", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::labels", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-length", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::min", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiple", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiple", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pattern", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pattern", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::placeholder", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::placeholder", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::required", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::required", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::step", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::step", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value-as-number", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-as-number", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-as-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-as-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-as-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-grammar", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-grammar", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-grammar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-grammar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-grammar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-speech", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-speech", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-speech", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-speech", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-speech", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdirectory", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdirectory", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdirectory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdirectory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdirectory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLInputElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLInputElement_ConstructProps)
    _init (config?: DOMHTMLInputElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLKeygenElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    autofocus?: boolean
    challenge?: string
    disabled?: boolean
    keytype?: string
    name?: string
}
export class DOMHTMLKeygenElement {
    /* Properties of WebKit.DOMHTMLKeygenElement */
    autofocus: boolean
    challenge: string
    disabled: boolean
    readonly form: DOMHTMLFormElement
    keytype: string
    readonly labels: DOMNodeList
    name: string
    readonly type: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLKeygenElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLKeygenElement */
    checkValidity(): boolean
    getAutofocus(): boolean
    getChallenge(): string
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getKeytype(): string
    getLabels(): DOMNodeList
    getName(): string
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getWillValidate(): boolean
    setAutofocus(value: boolean): void
    setChallenge(value: string): void
    setCustomValidity(error: string): void
    setDisabled(value: boolean): void
    setKeytype(value: string): void
    setName(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::challenge", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::challenge", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::challenge", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::challenge", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::challenge", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keytype", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keytype", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keytype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keytype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keytype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::labels", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::labels", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLKeygenElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLKeygenElement_ConstructProps)
    _init (config?: DOMHTMLKeygenElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLLIElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    type?: string
    value?: number
}
export class DOMHTMLLIElement {
    /* Properties of WebKit.DOMHTMLLIElement */
    type: string
    value: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLLIElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLLIElement */
    getValue(): number
    setValue(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLLIElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLIElement_ConstructProps)
    _init (config?: DOMHTMLLIElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLLabelElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    htmlFor?: string
}
export class DOMHTMLLabelElement {
    /* Properties of WebKit.DOMHTMLLabelElement */
    readonly control: DOMHTMLElement
    readonly form: DOMHTMLFormElement
    htmlFor: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLLabelElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLLabelElement */
    getControl(): DOMHTMLElement
    getForm(): DOMHTMLFormElement
    getHtmlFor(): string
    setHtmlFor(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::control", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::control", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::html-for", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html-for", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLLabelElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLabelElement_ConstructProps)
    _init (config?: DOMHTMLLabelElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLLegendElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
}
export class DOMHTMLLegendElement {
    /* Properties of WebKit.DOMHTMLLegendElement */
    align: string
    readonly form: DOMHTMLFormElement
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLLegendElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLLegendElement */
    getAlign(): string
    getForm(): DOMHTMLFormElement
    setAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLLegendElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLegendElement_ConstructProps)
    _init (config?: DOMHTMLLegendElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLLinkElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    charset?: string
    disabled?: boolean
    href?: string
    hreflang?: string
    media?: string
    rel?: string
    rev?: string
    target?: string
    type?: string
}
export class DOMHTMLLinkElement {
    /* Properties of WebKit.DOMHTMLLinkElement */
    charset: string
    disabled: boolean
    href: string
    hreflang: string
    media: string
    rel: string
    rev: string
    readonly sheet: DOMStyleSheet
    target: string
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLLinkElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLLinkElement */
    getCharset(): string
    getDisabled(): boolean
    getHref(): string
    getHreflang(): string
    getMedia(): string
    getRel(): string
    getRev(): string
    getSheet(): DOMStyleSheet
    getTarget(): string
    setCharset(value: string): void
    setDisabled(value: boolean): void
    setHref(value: string): void
    setHreflang(value: string): void
    setMedia(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hreflang", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hreflang", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rel", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rel", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rev", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rev", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sheet", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLLinkElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLinkElement_ConstructProps)
    _init (config?: DOMHTMLLinkElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLMapElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    name?: string
}
export class DOMHTMLMapElement {
    /* Properties of WebKit.DOMHTMLMapElement */
    readonly areas: DOMHTMLCollection
    name: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLMapElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMapElement */
    getAreas(): DOMHTMLCollection
    getName(): string
    setName(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::areas", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::areas", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLMapElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMapElement_ConstructProps)
    _init (config?: DOMHTMLMapElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLMarqueeElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    behavior?: string
    bgColor?: string
    direction?: string
    height?: string
    hspace?: number
    loop?: number
    scrollAmount?: number
    scrollDelay?: number
    trueSpeed?: boolean
    vspace?: number
    width?: string
}
export class DOMHTMLMarqueeElement {
    /* Properties of WebKit.DOMHTMLMarqueeElement */
    behavior: string
    bgColor: string
    direction: string
    height: string
    hspace: number
    loop: number
    scrollAmount: number
    scrollDelay: number
    trueSpeed: boolean
    vspace: number
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLMarqueeElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMarqueeElement */
    getBehavior(): string
    getBgColor(): string
    getDirection(): string
    getHeight(): string
    getHspace(): number
    getLoop(): number
    getScrollAmount(): number
    getScrollDelay(): number
    getTrueSpeed(): boolean
    getVspace(): number
    getWidth(): string
    setBehavior(value: string): void
    setBgColor(value: string): void
    setDirection(value: string): void
    setHeight(value: string): void
    setHspace(value: number): void
    setLoop(value: number): void
    setScrollAmount(value: number): void
    setScrollDelay(value: number): void
    setTrueSpeed(value: boolean): void
    setVspace(value: number): void
    setWidth(value: string): void
    start(): void
    stop(): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::behavior", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::behavior", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::direction", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-amount", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-amount", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-amount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-amount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-amount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-delay", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-delay", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::true-speed", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::true-speed", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::true-speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::true-speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::true-speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLMarqueeElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMarqueeElement_ConstructProps)
    _init (config?: DOMHTMLMarqueeElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLMediaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    autoplay?: boolean
    controls?: boolean
    currentTime?: number
    defaultMuted?: boolean
    defaultPlaybackRate?: number
    loop?: boolean
    mediaGroup?: string
    muted?: boolean
    playbackRate?: number
    preload?: string
    src?: string
    volume?: number
    webkitClosedCaptionsVisible?: boolean
    webkitPreservesPitch?: boolean
}
export class DOMHTMLMediaElement {
    /* Properties of WebKit.DOMHTMLMediaElement */
    readonly audioTracks: DOMAudioTrackList
    autoplay: boolean
    readonly buffered: DOMTimeRanges
    readonly controller: DOMMediaController
    controls: boolean
    readonly currentSrc: string
    currentTime: number
    defaultMuted: boolean
    defaultPlaybackRate: number
    readonly duration: number
    readonly ended: boolean
    readonly error: DOMMediaError
    loop: boolean
    mediaGroup: string
    muted: boolean
    readonly networkState: number
    readonly paused: boolean
    playbackRate: number
    readonly played: DOMTimeRanges
    preload: string
    readonly readyState: number
    readonly seekable: DOMTimeRanges
    readonly seeking: boolean
    src: string
    readonly textTracks: DOMTextTrackList
    readonly videoTracks: DOMVideoTrackList
    volume: number
    readonly webkitAudioDecodedByteCount: number
    webkitClosedCaptionsVisible: boolean
    readonly webkitCurrentPlaybackTargetIsWireless: boolean
    readonly webkitHasClosedCaptions: boolean
    webkitPreservesPitch: boolean
    readonly webkitVideoDecodedByteCount: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLMediaElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMediaElement */
    addTextTrack(kind: string, label: string, language: string): DOMTextTrack
    canPlayType(type: string): string
    fastSeek(time: number): void
    getAudioTracks(): DOMAudioTrackList
    getAutoplay(): boolean
    getBuffered(): DOMTimeRanges
    getController(): DOMMediaController
    getControls(): boolean
    getCurrentSrc(): string
    getCurrentTime(): number
    getDefaultMuted(): boolean
    getDefaultPlaybackRate(): number
    getDuration(): number
    getEnded(): boolean
    getError(): DOMMediaError
    getInitialTime(): number
    getLoop(): boolean
    getMediaGroup(): string
    getMuted(): boolean
    getNetworkState(): number
    getPaused(): boolean
    getPlaybackRate(): number
    getPlayed(): DOMTimeRanges
    getPreload(): string
    getReadyState(): number
    getSeekable(): DOMTimeRanges
    getSeeking(): boolean
    getSrc(): string
    getStartTime(): number
    getTextTracks(): DOMTextTrackList
    getVideoTracks(): DOMVideoTrackList
    getVolume(): number
    getWebkitAudioDecodedByteCount(): number
    getWebkitClosedCaptionsVisible(): boolean
    getWebkitCurrentPlaybackTargetIsWireless(): boolean
    getWebkitHasClosedCaptions(): boolean
    getWebkitPreservesPitch(): boolean
    getWebkitVideoDecodedByteCount(): number
    load(): void
    pause(): void
    play(): void
    setAutoplay(value: boolean): void
    setControls(value: boolean): void
    setCurrentTime(value: number): void
    setDefaultMuted(value: boolean): void
    setDefaultPlaybackRate(value: number): void
    setLoop(value: boolean): void
    setMediaGroup(value: string): void
    setMuted(value: boolean): void
    setPlaybackRate(value: number): void
    setPreload(value: string): void
    setSrc(value: string): void
    setVolume(value: number): void
    setWebkitClosedCaptionsVisible(value: boolean): void
    setWebkitPreservesPitch(value: boolean): void
    webkitShowPlaybackTargetPicker(): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoplay", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoplay", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffered", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffered", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controller", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controller", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controls", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controls", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-src", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-src", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-time", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-time", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-muted", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-muted", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duration", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ended", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ended", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-group", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-group", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::muted", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::muted", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-state", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-state", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paused", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paused", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::played", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::played", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preload", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preload", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seekable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seekable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seeking", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seeking", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLMediaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMediaElement_ConstructProps)
    _init (config?: DOMHTMLMediaElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLMenuElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    compact?: boolean
}
export class DOMHTMLMenuElement {
    /* Properties of WebKit.DOMHTMLMenuElement */
    compact: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLMenuElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMenuElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compact", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLMenuElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMenuElement_ConstructProps)
    _init (config?: DOMHTMLMenuElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLMetaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    content?: string
    httpEquiv?: string
    name?: string
    scheme?: string
}
export class DOMHTMLMetaElement {
    /* Properties of WebKit.DOMHTMLMetaElement */
    content: string
    httpEquiv: string
    name: string
    scheme: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLMetaElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLMetaElement */
    getContent(): string
    getHttpEquiv(): string
    getName(): string
    getScheme(): string
    setContent(value: string): void
    setHttpEquiv(value: string): void
    setName(value: string): void
    setScheme(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::http-equiv", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::http-equiv", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scheme", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scheme", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLMetaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMetaElement_ConstructProps)
    _init (config?: DOMHTMLMetaElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLModElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    cite?: string
    dateTime?: string
}
export class DOMHTMLModElement {
    /* Properties of WebKit.DOMHTMLModElement */
    cite: string
    dateTime: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLModElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLModElement */
    getCite(): string
    getDateTime(): string
    setCite(value: string): void
    setDateTime(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cite", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cite", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::date-time", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-time", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLModElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLModElement_ConstructProps)
    _init (config?: DOMHTMLModElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLOListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    compact?: boolean
    reversed?: boolean
    start?: number
    type?: string
}
export class DOMHTMLOListElement {
    /* Properties of WebKit.DOMHTMLOListElement */
    compact: boolean
    reversed: boolean
    start: number
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLOListElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLOListElement */
    getCompact(): boolean
    getReversed(): boolean
    getStart(): number
    setCompact(value: boolean): void
    setReversed(value: boolean): void
    setStart(value: number): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compact", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reversed", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reversed", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reversed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reversed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reversed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLOListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOListElement_ConstructProps)
    _init (config?: DOMHTMLOListElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLObjectElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    archive?: string
    border?: string
    code?: string
    codeBase?: string
    codeType?: string
    data?: string
    declare?: boolean
    height?: string
    hspace?: number
    name?: string
    standby?: string
    type?: string
    useMap?: string
    vspace?: number
    width?: string
}
export class DOMHTMLObjectElement {
    /* Properties of WebKit.DOMHTMLObjectElement */
    align: string
    archive: string
    border: string
    code: string
    codeBase: string
    codeType: string
    readonly contentDocument: DOMDocument
    data: string
    declare: boolean
    readonly form: DOMHTMLFormElement
    height: string
    hspace: number
    name: string
    standby: string
    type: string
    useMap: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    vspace: number
    width: string
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLObjectElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLObjectElement */
    checkValidity(): boolean
    getAlign(): string
    getArchive(): string
    getBorder(): string
    getCode(): string
    getCodeBase(): string
    getCodeType(): string
    getContentDocument(): DOMDocument
    getData(): string
    getDeclare(): boolean
    getForm(): DOMHTMLFormElement
    getHeight(): string
    getHspace(): number
    getName(): string
    getStandby(): string
    getUseMap(): string
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getVspace(): number
    getWidth(): string
    getWillValidate(): boolean
    setAlign(value: string): void
    setArchive(value: string): void
    setBorder(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setCodeType(value: string): void
    setCustomValidity(error: string): void
    setData(value: string): void
    setDeclare(value: boolean): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setStandby(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::archive", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::archive", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-base", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-base", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-document", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::declare", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::declare", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::standby", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::standby", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLObjectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLObjectElement_ConstructProps)
    _init (config?: DOMHTMLObjectElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLOptGroupElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    disabled?: boolean
    label?: string
}
export class DOMHTMLOptGroupElement {
    /* Properties of WebKit.DOMHTMLOptGroupElement */
    disabled: boolean
    label: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLOptGroupElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLOptGroupElement */
    getDisabled(): boolean
    getLabel(): string
    setDisabled(value: boolean): void
    setLabel(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLOptGroupElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptGroupElement_ConstructProps)
    _init (config?: DOMHTMLOptGroupElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLOptionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    defaultSelected?: boolean
    disabled?: boolean
    label?: string
    selected?: boolean
    value?: string
}
export class DOMHTMLOptionElement {
    /* Properties of WebKit.DOMHTMLOptionElement */
    defaultSelected: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    readonly index: number
    label: string
    selected: boolean
    readonly text: string
    value: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLOptionElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLOptionElement */
    getDefaultSelected(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getIndex(): number
    getLabel(): string
    getSelected(): boolean
    getText(): string
    getValue(): string
    setDefaultSelected(value: boolean): void
    setDisabled(value: boolean): void
    setLabel(value: string): void
    setSelected(value: boolean): void
    setValue(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-selected", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-selected", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLOptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptionElement_ConstructProps)
    _init (config?: DOMHTMLOptionElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLOptionsCollection_ConstructProps extends DOMHTMLCollection_ConstructProps {
    selectedIndex?: number
}
export class DOMHTMLOptionsCollection {
    /* Properties of WebKit.DOMHTMLOptionsCollection */
    readonly length: number
    selectedIndex: number
    /* Fields of WebKit.DOMHTMLOptionsCollection */
    parentInstance: DOMHTMLCollection
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLOptionsCollection */
    getLength(): number
    getSelectedIndex(): number
    namedItem(name: string): DOMNode
    setSelectedIndex(value: number): void
    /* Methods of WebKit.DOMHTMLCollection */
    item(index: number): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-index", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-index", callback: (($obj: DOMHTMLOptionsCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptionsCollection_ConstructProps)
    _init (config?: DOMHTMLOptionsCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLParagraphElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
}
export class DOMHTMLParagraphElement {
    /* Properties of WebKit.DOMHTMLParagraphElement */
    align: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLParagraphElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLParagraphElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLParagraphElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLParagraphElement_ConstructProps)
    _init (config?: DOMHTMLParagraphElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLParamElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    name?: string
    type?: string
    value?: string
    valueType?: string
}
export class DOMHTMLParamElement {
    /* Properties of WebKit.DOMHTMLParamElement */
    name: string
    type: string
    value: string
    valueType: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLParamElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLParamElement */
    getName(): string
    getValue(): string
    getValueType(): string
    setName(value: string): void
    setValue(value: string): void
    setValueType(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value-type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLParamElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLParamElement_ConstructProps)
    _init (config?: DOMHTMLParamElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLPreElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    width?: number
    wrap?: boolean
}
export class DOMHTMLPreElement {
    /* Properties of WebKit.DOMHTMLPreElement */
    width: number
    wrap: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLPreElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLPreElement */
    getWidth(): number
    getWrap(): boolean
    setWidth(value: number): void
    setWrap(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLPreElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLPreElement_ConstructProps)
    _init (config?: DOMHTMLPreElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLPropertiesCollection_ConstructProps extends DOMHTMLCollection_ConstructProps {
}
export class DOMHTMLPropertiesCollection {
    /* Properties of WebKit.DOMHTMLPropertiesCollection */
    readonly length: number
    readonly names: DOMDOMStringList
    /* Fields of WebKit.DOMHTMLCollection */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLCollection */
    getLength(): number
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::names", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::names", callback: (($obj: DOMHTMLPropertiesCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::names", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::names", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::names", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLPropertiesCollection_ConstructProps)
    _init (config?: DOMHTMLPropertiesCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static getLength(self: object): number
    static getNames(self: object): DOMDOMStringList
    static item(self: object, index: number): DOMNode
    static namedItem(self: object, name: string): object
    static $gtype: GObject.Type
}
export interface DOMHTMLQuoteElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    cite?: string
}
export class DOMHTMLQuoteElement {
    /* Properties of WebKit.DOMHTMLQuoteElement */
    cite: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLQuoteElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLQuoteElement */
    getCite(): string
    setCite(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cite", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cite", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLQuoteElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLQuoteElement_ConstructProps)
    _init (config?: DOMHTMLQuoteElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLScriptElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    async?: boolean
    charset?: string
    crossOrigin?: string
    defer?: boolean
    event?: string
    htmlFor?: string
    nonce?: string
    src?: string
    text?: string
    type?: string
}
export class DOMHTMLScriptElement {
    /* Properties of WebKit.DOMHTMLScriptElement */
    async: boolean
    charset: string
    crossOrigin: string
    defer: boolean
    event: string
    htmlFor: string
    nonce: string
    src: string
    text: string
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLScriptElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLScriptElement */
    getAsync(): boolean
    getCharset(): string
    getCrossOrigin(): string
    getDefer(): boolean
    getEvent(): string
    getHtmlFor(): string
    getNonce(): string
    getSrc(): string
    getText(): string
    setAsync(value: boolean): void
    setCharset(value: string): void
    setCrossOrigin(value: string): void
    setDefer(value: boolean): void
    setEvent(value: string): void
    setHtmlFor(value: string): void
    setNonce(value: string): void
    setSrc(value: string): void
    setText(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::async", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::async", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::async", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::async", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::async", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cross-origin", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cross-origin", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cross-origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::defer", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::defer", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::html-for", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html-for", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nonce", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nonce", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nonce", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nonce", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nonce", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLScriptElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLScriptElement_ConstructProps)
    _init (config?: DOMHTMLScriptElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLSelectElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    autofocus?: boolean
    disabled?: boolean
    length?: number
    multiple?: boolean
    name?: string
    required?: boolean
    selectedIndex?: number
    size?: number
    value?: string
}
export class DOMHTMLSelectElement {
    /* Properties of WebKit.DOMHTMLSelectElement */
    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    readonly labels: DOMNodeList
    length: number
    multiple: boolean
    name: string
    readonly options: DOMHTMLOptionsCollection
    required: boolean
    selectedIndex: number
    readonly selectedOptions: DOMHTMLCollection
    size: number
    readonly type: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    value: string
    readonly willValidate: boolean
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLSelectElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLSelectElement */
    add(element: DOMHTMLElement, before: DOMHTMLElement): void
    checkValidity(): boolean
    getAutofocus(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getLabels(): DOMNodeList
    getLength(): number
    getMultiple(): boolean
    getName(): string
    getOptions(): DOMHTMLOptionsCollection
    getRequired(): boolean
    getSelectedIndex(): number
    getSelectedOptions(): DOMHTMLCollection
    getSize(): number
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getValue(): string
    getWillValidate(): boolean
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    remove(index: number): void
    setAutofocus(value: boolean): void
    setCustomValidity(error: string): void
    setDisabled(value: boolean): void
    setLength(value: number): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setRequired(value: boolean): void
    setSelectedIndex(value: number): void
    setSize(value: number): void
    setValue(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::labels", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::labels", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiple", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiple", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::options", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::required", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::required", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-index", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-index", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-options", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-options", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLSelectElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLSelectElement_ConstructProps)
    _init (config?: DOMHTMLSelectElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLStyleElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    disabled?: boolean
    media?: string
    type?: string
}
export class DOMHTMLStyleElement {
    /* Properties of WebKit.DOMHTMLStyleElement */
    disabled: boolean
    media: string
    readonly sheet: DOMStyleSheet
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLStyleElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLStyleElement */
    getDisabled(): boolean
    getMedia(): string
    getScoped(): boolean
    getSheet(): DOMStyleSheet
    setDisabled(value: boolean): void
    setMedia(value: string): void
    setScoped(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sheet", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLStyleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLStyleElement_ConstructProps)
    _init (config?: DOMHTMLStyleElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableCaptionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
}
export class DOMHTMLTableCaptionElement {
    /* Properties of WebKit.DOMHTMLTableCaptionElement */
    align: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableCaptionElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableCaptionElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableCaptionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableCaptionElement_ConstructProps)
    _init (config?: DOMHTMLTableCaptionElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableCellElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    abbr?: string
    align?: string
    axis?: string
    bgColor?: string
    ch?: string
    chOff?: string
    colSpan?: number
    headers?: string
    height?: string
    noWrap?: boolean
    rowSpan?: number
    scope?: string
    vAlign?: string
    width?: string
}
export class DOMHTMLTableCellElement {
    /* Properties of WebKit.DOMHTMLTableCellElement */
    abbr: string
    align: string
    axis: string
    bgColor: string
    readonly cellIndex: number
    ch: string
    chOff: string
    colSpan: number
    headers: string
    height: string
    noWrap: boolean
    rowSpan: number
    scope: string
    vAlign: string
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableCellElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableCellElement */
    getAbbr(): string
    getAlign(): string
    getAxis(): string
    getBgColor(): string
    getCellIndex(): number
    getCh(): string
    getChOff(): string
    getColSpan(): number
    getHeaders(): string
    getHeight(): string
    getNoWrap(): boolean
    getRowSpan(): number
    getScope(): string
    getVAlign(): string
    getWidth(): string
    setAbbr(value: string): void
    setAlign(value: string): void
    setAxis(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setColSpan(value: number): void
    setHeaders(value: string): void
    setHeight(value: string): void
    setNoWrap(value: boolean): void
    setRowSpan(value: number): void
    setScope(value: string): void
    setVAlign(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::abbr", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abbr", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::axis", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::axis", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-index", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-index", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::col-span", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::col-span", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::headers", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::headers", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-wrap", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-wrap", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::row-span", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-span", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scope", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scope", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableCellElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableCellElement_ConstructProps)
    _init (config?: DOMHTMLTableCellElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableColElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    ch?: string
    chOff?: string
    span?: number
    vAlign?: string
    width?: string
}
export class DOMHTMLTableColElement {
    /* Properties of WebKit.DOMHTMLTableColElement */
    align: string
    ch: string
    chOff: string
    span: number
    vAlign: string
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableColElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableColElement */
    getAlign(): string
    getCh(): string
    getChOff(): string
    getSpan(): number
    getVAlign(): string
    getWidth(): string
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setSpan(value: number): void
    setVAlign(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::span", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::span", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableColElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableColElement_ConstructProps)
    _init (config?: DOMHTMLTableColElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    bgColor?: string
    border?: string
    cellPadding?: string
    cellSpacing?: string
    frame?: string
    rules?: string
    summary?: string
    width?: string
}
export class DOMHTMLTableElement {
    /* Properties of WebKit.DOMHTMLTableElement */
    align: string
    bgColor: string
    border: string
    readonly caption: DOMHTMLTableCaptionElement
    cellPadding: string
    cellSpacing: string
    frame: string
    readonly rows: DOMHTMLCollection
    rules: string
    summary: string
    readonly tBodies: DOMHTMLCollection
    readonly tFoot: DOMHTMLTableSectionElement
    readonly tHead: DOMHTMLTableSectionElement
    width: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableElement */
    createCaption(): DOMHTMLElement
    createTBody(): DOMHTMLElement
    createTFoot(): DOMHTMLElement
    createTHead(): DOMHTMLElement
    deleteCaption(): void
    deleteRow(index: number): void
    deleteTFoot(): void
    deleteTHead(): void
    getAlign(): string
    getBgColor(): string
    getBorder(): string
    getCaption(): DOMHTMLTableCaptionElement
    getCellPadding(): string
    getCellSpacing(): string
    getFrame(): string
    getRows(): DOMHTMLCollection
    getRules(): string
    getSummary(): string
    getTBodies(): DOMHTMLCollection
    getTFoot(): DOMHTMLTableSectionElement
    getTHead(): DOMHTMLTableSectionElement
    getWidth(): string
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setBorder(value: string): void
    setCaption(value: DOMHTMLTableCaptionElement): void
    setCellPadding(value: string): void
    setCellSpacing(value: string): void
    setFrame(value: string): void
    setRules(value: string): void
    setSummary(value: string): void
    setTFoot(value: DOMHTMLTableSectionElement): void
    setTHead(value: DOMHTMLTableSectionElement): void
    setWidth(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::caption", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::caption", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-padding", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-padding", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-spacing", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-spacing", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rules", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rules", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::summary", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::summary", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-bodies", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-bodies", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-foot", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-foot", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-head", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-head", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableElement_ConstructProps)
    _init (config?: DOMHTMLTableElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableRowElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    bgColor?: string
    ch?: string
    chOff?: string
    vAlign?: string
}
export class DOMHTMLTableRowElement {
    /* Properties of WebKit.DOMHTMLTableRowElement */
    align: string
    bgColor: string
    readonly cells: DOMHTMLCollection
    ch: string
    chOff: string
    readonly rowIndex: number
    readonly sectionRowIndex: number
    vAlign: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableRowElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableRowElement */
    deleteCell(index: number): void
    getAlign(): string
    getBgColor(): string
    getCells(): DOMHTMLCollection
    getCh(): string
    getChOff(): string
    getRowIndex(): number
    getSectionRowIndex(): number
    getVAlign(): string
    insertCell(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cells", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cells", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::row-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::section-row-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::section-row-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableRowElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableRowElement_ConstructProps)
    _init (config?: DOMHTMLTableRowElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTableSectionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    align?: string
    ch?: string
    chOff?: string
    vAlign?: string
}
export class DOMHTMLTableSectionElement {
    /* Properties of WebKit.DOMHTMLTableSectionElement */
    align: string
    ch: string
    chOff: string
    readonly rows: DOMHTMLCollection
    vAlign: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTableSectionElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTableSectionElement */
    deleteRow(index: number): void
    getAlign(): string
    getCh(): string
    getChOff(): string
    getRows(): DOMHTMLCollection
    getVAlign(): string
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTableSectionElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableSectionElement_ConstructProps)
    _init (config?: DOMHTMLTableSectionElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTextAreaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    autocapitalize?: string
    autocorrect?: boolean
    autofocus?: boolean
    cols?: number
    defaultValue?: string
    dirName?: string
    disabled?: boolean
    maxLength?: number
    name?: string
    placeholder?: string
    readOnly?: boolean
    required?: boolean
    rows?: number
    selectionDirection?: string
    selectionEnd?: number
    selectionStart?: number
    value?: string
    wrap?: string
}
export class DOMHTMLTextAreaElement {
    /* Properties of WebKit.DOMHTMLTextAreaElement */
    autocapitalize: string
    autocorrect: boolean
    autofocus: boolean
    cols: number
    defaultValue: string
    dirName: string
    disabled: boolean
    readonly form: DOMHTMLFormElement
    readonly labels: DOMNodeList
    maxLength: number
    name: string
    placeholder: string
    readOnly: boolean
    required: boolean
    rows: number
    selectionDirection: string
    selectionEnd: number
    selectionStart: number
    readonly textLength: number
    readonly type: string
    readonly validationMessage: string
    readonly validity: DOMValidityState
    value: string
    readonly willValidate: boolean
    wrap: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTextAreaElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTextAreaElement */
    checkValidity(): boolean
    getAutocapitalize(): string
    getAutocorrect(): boolean
    getAutofocus(): boolean
    getCols(): number
    getDefaultValue(): string
    getDirName(): string
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getLabels(): DOMNodeList
    getMaxLength(): number
    getName(): string
    getPlaceholder(): string
    getReadOnly(): boolean
    getRequired(): boolean
    getRows(): number
    getSelectionDirection(): string
    getSelectionEnd(): number
    getSelectionStart(): number
    getTextLength(): number
    getValidationMessage(): string
    getValidity(): DOMValidityState
    getValue(): string
    getWillValidate(): boolean
    getWrap(): string
    isEdited(): boolean
    select(): void
    setAutocapitalize(value: string): void
    setAutocorrect(value: boolean): void
    setAutofocus(value: boolean): void
    setCols(value: number): void
    setCustomValidity(error: string): void
    setDefaultValue(value: string): void
    setDirName(value: string): void
    setDisabled(value: boolean): void
    setMaxLength(value: number): void
    setName(value: string): void
    setPlaceholder(value: string): void
    setRangeText(replacement: string, start: number, end: number, selectionMode: string): void
    setReadOnly(value: boolean): void
    setRequired(value: boolean): void
    setRows(value: number): void
    setSelectionDirection(value: string): void
    setSelectionEnd(value: number): void
    setSelectionRange(start: number, end: number, direction: string): void
    setSelectionStart(value: number): void
    setValue(value: string): void
    setWrap(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocapitalize", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocapitalize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autocorrect", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autocorrect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cols", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cols", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::labels", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::labels", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::labels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-length", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::placeholder", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::placeholder", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::placeholder", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::required", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::required", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selection-direction", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-direction", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selection-direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selection-direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selection-direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selection-end", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-end", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selection-start", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-start", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-length", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-length", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation-message", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation-message", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTextAreaElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTextAreaElement_ConstructProps)
    _init (config?: DOMHTMLTextAreaElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLTitleElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    text?: string
}
export class DOMHTMLTitleElement {
    /* Properties of WebKit.DOMHTMLTitleElement */
    text: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLTitleElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLTitleElement */
    getText(): string
    setText(value: string): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLTitleElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTitleElement_ConstructProps)
    _init (config?: DOMHTMLTitleElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLUListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    compact?: boolean
    type?: string
}
export class DOMHTMLUListElement {
    /* Properties of WebKit.DOMHTMLUListElement */
    compact: boolean
    type: string
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLUListElement */
    parentInstance: DOMHTMLElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLUListElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compact", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLUListElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLUListElement_ConstructProps)
    _init (config?: DOMHTMLUListElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHTMLVideoElement_ConstructProps extends DOMHTMLMediaElement_ConstructProps {
    height?: number
    poster?: string
    webkitWirelessVideoPlaybackDisabled?: boolean
    width?: number
}
export class DOMHTMLVideoElement {
    /* Properties of WebKit.DOMHTMLVideoElement */
    height: number
    poster: string
    readonly videoHeight: number
    readonly videoWidth: number
    readonly webkitDecodedFrameCount: number
    readonly webkitDisplayingFullscreen: boolean
    readonly webkitDroppedFrameCount: number
    readonly webkitSupportsFullscreen: boolean
    webkitWirelessVideoPlaybackDisabled: boolean
    width: number
    /* Properties of WebKit.DOMHTMLMediaElement */
    readonly audioTracks: DOMAudioTrackList
    autoplay: boolean
    readonly buffered: DOMTimeRanges
    readonly controller: DOMMediaController
    controls: boolean
    readonly currentSrc: string
    currentTime: number
    defaultMuted: boolean
    defaultPlaybackRate: number
    readonly duration: number
    readonly ended: boolean
    readonly error: DOMMediaError
    loop: boolean
    mediaGroup: string
    muted: boolean
    readonly networkState: number
    readonly paused: boolean
    playbackRate: number
    readonly played: DOMTimeRanges
    preload: string
    readonly readyState: number
    readonly seekable: DOMTimeRanges
    readonly seeking: boolean
    src: string
    readonly textTracks: DOMTextTrackList
    readonly videoTracks: DOMVideoTrackList
    volume: number
    readonly webkitAudioDecodedByteCount: number
    webkitClosedCaptionsVisible: boolean
    readonly webkitCurrentPlaybackTargetIsWireless: boolean
    readonly webkitHasClosedCaptions: boolean
    webkitPreservesPitch: boolean
    readonly webkitVideoDecodedByteCount: number
    /* Properties of WebKit.DOMHTMLElement */
    accessKey: string
    readonly children: DOMHTMLCollection
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerHtml: string
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerHtml: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    readonly lastElementChild: DOMElement
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMHTMLVideoElement */
    parentInstance: DOMHTMLMediaElement
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHTMLVideoElement */
    getHeight(): number
    getPoster(): string
    getVideoHeight(): number
    getVideoWidth(): number
    getWebkitDecodedFrameCount(): number
    getWebkitDisplayingFullscreen(): boolean
    getWebkitDroppedFrameCount(): number
    getWebkitSupportsFullscreen(): boolean
    getWebkitWirelessVideoPlaybackDisabled(): boolean
    getWidth(): number
    setHeight(value: number): void
    setPoster(value: string): void
    setWebkitWirelessVideoPlaybackDisabled(value: boolean): void
    setWidth(value: number): void
    webkitEnterFullScreen(): void
    webkitEnterFullscreen(): void
    webkitExitFullScreen(): void
    webkitExitFullscreen(): void
    /* Methods of WebKit.DOMHTMLMediaElement */
    addTextTrack(kind: string, label: string, language: string): DOMTextTrack
    canPlayType(type: string): string
    fastSeek(time: number): void
    getAudioTracks(): DOMAudioTrackList
    getAutoplay(): boolean
    getBuffered(): DOMTimeRanges
    getController(): DOMMediaController
    getControls(): boolean
    getCurrentSrc(): string
    getCurrentTime(): number
    getDefaultMuted(): boolean
    getDefaultPlaybackRate(): number
    getDuration(): number
    getEnded(): boolean
    getError(): DOMMediaError
    getInitialTime(): number
    getLoop(): boolean
    getMediaGroup(): string
    getMuted(): boolean
    getNetworkState(): number
    getPaused(): boolean
    getPlaybackRate(): number
    getPlayed(): DOMTimeRanges
    getPreload(): string
    getReadyState(): number
    getSeekable(): DOMTimeRanges
    getSeeking(): boolean
    getSrc(): string
    getStartTime(): number
    getTextTracks(): DOMTextTrackList
    getVideoTracks(): DOMVideoTrackList
    getVolume(): number
    getWebkitAudioDecodedByteCount(): number
    getWebkitClosedCaptionsVisible(): boolean
    getWebkitCurrentPlaybackTargetIsWireless(): boolean
    getWebkitHasClosedCaptions(): boolean
    getWebkitPreservesPitch(): boolean
    getWebkitVideoDecodedByteCount(): number
    load(): void
    pause(): void
    play(): void
    setAutoplay(value: boolean): void
    setControls(value: boolean): void
    setCurrentTime(value: number): void
    setDefaultMuted(value: boolean): void
    setDefaultPlaybackRate(value: number): void
    setLoop(value: boolean): void
    setMediaGroup(value: string): void
    setMuted(value: boolean): void
    setPlaybackRate(value: number): void
    setPreload(value: string): void
    setSrc(value: string): void
    setVolume(value: number): void
    setWebkitClosedCaptionsVisible(value: boolean): void
    setWebkitPreservesPitch(value: boolean): void
    webkitShowPlaybackTargetPicker(): void
    /* Methods of WebKit.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getId(): string
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getItemId(): string
    getItemProp(): DOMDOMSettableTokenList
    getItemRef(): DOMDOMSettableTokenList
    getItemScope(): boolean
    getItemType(): object
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    setAccessKey(value: string): void
    setClassName(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setInnerText(value: string): void
    setItemId(value: string): void
    setItemScope(value: boolean): void
    setLang(value: string): void
    setOuterHtml(value: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit.DOMElement */
    blur(): void
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getChildElementCount(): number
    getClientHeight(): number
    getClientLeft(): number
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(name: string): DOMNodeList
    getElementsByTagName(name: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverflow(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullScreen(flags: number): void
    webkitRequestFullscreen(): void
    webkitRequestPointerLock(): void
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::poster", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::poster", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::poster", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::poster", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::poster", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::video-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::video-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::video-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::video-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::video-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::video-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::video-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::video-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::video-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::video-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-decoded-frame-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-decoded-frame-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-decoded-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-decoded-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-decoded-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-displaying-fullscreen", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-displaying-fullscreen", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-displaying-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-displaying-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-displaying-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-dropped-frame-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-dropped-frame-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-dropped-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-dropped-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-dropped-frame-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-supports-fullscreen", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-supports-fullscreen", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-supports-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-supports-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-supports-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-wireless-video-playback-disabled", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-wireless-video-playback-disabled", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-wireless-video-playback-disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-wireless-video-playback-disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-wireless-video-playback-disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoplay", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoplay", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoplay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffered", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffered", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controller", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controller", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controller", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::controls", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::controls", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::controls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-src", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-src", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-time", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-time", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-muted", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-muted", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-playback-rate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duration", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ended", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ended", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-group", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-group", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::muted", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::muted", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-state", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-state", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paused", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paused", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::playback-rate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::played", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::played", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preload", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preload", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preload", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seekable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seekable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seeking", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seeking", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seeking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::video-tracks", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::video-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-audio-decoded-byte-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-audio-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-closed-captions-visible", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-closed-captions-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-playback-target-is-wireless", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-has-closed-captions", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-has-closed-captions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-preserves-pitch", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-preserves-pitch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-video-decoded-byte-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-video-decoded-byte-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMHTMLVideoElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLVideoElement_ConstructProps)
    _init (config?: DOMHTMLVideoElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMHistory_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMHistory {
    /* Properties of WebKit.DOMHistory */
    readonly length: number
    /* Fields of WebKit.DOMHistory */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMHistory */
    back(): void
    forward(): void
    getLength(): number
    go(distance: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMHistory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMHistory, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMHistory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMHistory, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHistory_ConstructProps)
    _init (config?: DOMHistory_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMKeyboardEvent_ConstructProps extends DOMUIEvent_ConstructProps {
}
export class DOMKeyboardEvent {
    /* Properties of WebKit.DOMKeyboardEvent */
    readonly altGraphKey: boolean
    readonly altKey: boolean
    readonly ctrlKey: boolean
    readonly keyIdentifier: string
    readonly keyLocation: number
    readonly metaKey: boolean
    readonly shiftKey: boolean
    /* Properties of WebKit.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    readonly which: number
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMKeyboardEvent */
    parentInstance: DOMUIEvent
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMKeyboardEvent */
    getAltGraphKey(): boolean
    getAltKey(): boolean
    getCtrlKey(): boolean
    getKeyIdentifier(): string
    getKeyLocation(): number
    getMetaKey(): boolean
    getModifierState(keyIdentifierArg: string): boolean
    getShiftKey(): boolean
    initKeyboardEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, keyIdentifier: string, location: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, altGraphKey: boolean): void
    /* Methods of WebKit.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    getWhich(): number
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-graph-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-graph-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-identifier", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-identifier", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-location", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-location", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::which", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::which", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMKeyboardEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMKeyboardEvent_ConstructProps)
    _init (config?: DOMKeyboardEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMLocation_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMLocation {
    /* Properties of WebKit.DOMLocation */
    readonly ancestorOrigins: DOMDOMStringList
    readonly hash: string
    readonly host: string
    readonly hostname: string
    readonly href: string
    readonly origin: string
    readonly pathname: string
    readonly port: string
    readonly protocol: string
    readonly search: string
    /* Fields of WebKit.DOMLocation */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMLocation */
    getAncestorOrigins(): DOMDOMStringList
    getHash(): string
    getHost(): string
    getHostname(): string
    getHref(): string
    getOrigin(): string
    getPathname(): string
    getPort(): string
    getProtocol(): string
    getSearch(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ancestor-origins", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ancestor-origins", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ancestor-origins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ancestor-origins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ancestor-origins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hash", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hash", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pathname", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pathname", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search", callback: (($obj: DOMLocation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMLocation_ConstructProps)
    _init (config?: DOMLocation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMediaController_ConstructProps extends DOMObject_ConstructProps {
    currentTime?: number
    defaultPlaybackRate?: number
    muted?: boolean
    playbackRate?: number
    volume?: number
}
export class DOMMediaController {
    /* Properties of WebKit.DOMMediaController */
    readonly buffered: DOMTimeRanges
    currentTime: number
    defaultPlaybackRate: number
    readonly duration: number
    muted: boolean
    readonly paused: boolean
    playbackRate: number
    readonly playbackState: string
    readonly played: DOMTimeRanges
    readonly seekable: DOMTimeRanges
    volume: number
    /* Fields of WebKit.DOMMediaController */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMMediaController */
    getBuffered(): DOMTimeRanges
    getCurrentTime(): number
    getDefaultPlaybackRate(): number
    getDuration(): number
    getMuted(): boolean
    getPaused(): boolean
    getPlaybackRate(): number
    getPlaybackState(): string
    getPlayed(): DOMTimeRanges
    getSeekable(): DOMTimeRanges
    getVolume(): number
    pause(): void
    play(): void
    setCurrentTime(value: number): void
    setDefaultPlaybackRate(value: number): void
    setMuted(value: boolean): void
    setPlaybackRate(value: number): void
    setVolume(value: number): void
    unpause(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMMediaController */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffered", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffered", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-time", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-time", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-playback-rate", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-playback-rate", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duration", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::muted", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::muted", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::muted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paused", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paused", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paused", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::playback-rate", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::playback-rate", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::playback-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::playback-state", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::playback-state", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::playback-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::playback-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::playback-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::played", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::played", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::played", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seekable", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seekable", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seekable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume", callback: (($obj: DOMMediaController, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMediaController_ConstructProps)
    _init (config?: DOMMediaController_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMediaError_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMMediaError {
    /* Properties of WebKit.DOMMediaError */
    readonly code: number
    /* Fields of WebKit.DOMMediaError */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMMediaError */
    getCode(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMediaError, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMediaError, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code", callback: (($obj: DOMMediaError, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code", callback: (($obj: DOMMediaError, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMediaError_ConstructProps)
    _init (config?: DOMMediaError_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMediaList_ConstructProps extends DOMObject_ConstructProps {
    mediaText?: string
}
export class DOMMediaList {
    /* Properties of WebKit.DOMMediaList */
    readonly length: number
    mediaText: string
    /* Fields of WebKit.DOMMediaList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMMediaList */
    appendMedium(newMedium: string): void
    deleteMedium(oldMedium: string): void
    getLength(): number
    getMediaText(): string
    item(index: number): string
    setMediaText(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-text", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-text", callback: (($obj: DOMMediaList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMediaList_ConstructProps)
    _init (config?: DOMMediaList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMediaQueryList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMMediaQueryList {
    /* Properties of WebKit.DOMMediaQueryList */
    readonly matches: boolean
    readonly media: string
    /* Fields of WebKit.DOMMediaQueryList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMMediaQueryList */
    getMatches(): boolean
    getMedia(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::matches", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::matches", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DOMMediaQueryList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMediaQueryList_ConstructProps)
    _init (config?: DOMMediaQueryList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMemoryInfo_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMMemoryInfo {
    /* Properties of WebKit.DOMMemoryInfo */
    readonly jsHeapSizeLimit: number
    readonly totalJsHeapSize: number
    readonly usedJsHeapSize: number
    /* Fields of WebKit.DOMObject */
    parentInstance: GObject.Object
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::js-heap-size-limit", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::js-heap-size-limit", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::js-heap-size-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::js-heap-size-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::js-heap-size-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::total-js-heap-size", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-js-heap-size", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::total-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::total-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::total-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::used-js-heap-size", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::used-js-heap-size", callback: (($obj: DOMMemoryInfo, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::used-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::used-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::used-js-heap-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMemoryInfo_ConstructProps)
    _init (config?: DOMMemoryInfo_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static getJsHeapSizeLimit(self: object): number
    static getTotalJsHeapSize(self: object): number
    static getUsedJsHeapSize(self: object): number
    static $gtype: GObject.Type
}
export interface DOMMessagePort_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMMessagePort {
    /* Fields of WebKit.DOMMessagePort */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMMessagePort */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMessagePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMessagePort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMessagePort_ConstructProps)
    _init (config?: DOMMessagePort_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMicroDataItemValue_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMMicroDataItemValue {
    /* Fields of WebKit.DOMObject */
    parentInstance: GObject.Object
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMicroDataItemValue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMicroDataItemValue, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMicroDataItemValue_ConstructProps)
    _init (config?: DOMMicroDataItemValue_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMMouseEvent_ConstructProps extends DOMUIEvent_ConstructProps {
}
export class DOMMouseEvent {
    /* Properties of WebKit.DOMMouseEvent */
    readonly altKey: boolean
    readonly button: number
    readonly clientX: number
    readonly clientY: number
    readonly ctrlKey: boolean
    readonly fromElement: DOMNode
    readonly metaKey: boolean
    readonly offsetX: number
    readonly offsetY: number
    readonly relatedTarget: DOMEventTarget
    readonly screenX: number
    readonly screenY: number
    readonly shiftKey: boolean
    readonly toElement: DOMNode
    readonly webkitMovementX: number
    readonly webkitMovementY: number
    readonly x: number
    readonly y: number
    /* Properties of WebKit.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    readonly which: number
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMMouseEvent */
    parentInstance: DOMUIEvent
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMMouseEvent */
    getAltKey(): boolean
    getButton(): number
    getClientX(): number
    getClientY(): number
    getCtrlKey(): boolean
    getFromElement(): DOMNode
    getMetaKey(): boolean
    getOffsetX(): number
    getOffsetY(): number
    getRelatedTarget(): DOMEventTarget
    getScreenX(): number
    getScreenY(): number
    getShiftKey(): boolean
    getToElement(): DOMNode
    getWebkitMovementX(): number
    getWebkitMovementY(): number
    getX(): number
    getY(): number
    initMouseEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, button: number, relatedTarget: DOMEventTarget): void
    /* Methods of WebKit.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    getWhich(): number
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::button", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::button", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::related-target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::to-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-movement-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-movement-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-movement-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-movement-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::which", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::which", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMMouseEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMouseEvent_ConstructProps)
    _init (config?: DOMMouseEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNamedNodeMap_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMNamedNodeMap {
    /* Properties of WebKit.DOMNamedNodeMap */
    readonly length: number
    /* Fields of WebKit.DOMNamedNodeMap */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNamedNodeMap */
    getLength(): number
    getNamedItem(name: string): DOMNode
    getNamedItemNs(namespaceURI: string, localName: string): DOMNode
    item(index: number): DOMNode
    removeNamedItem(name: string): DOMNode
    removeNamedItemNs(namespaceURI: string, localName: string): DOMNode
    setNamedItem(node: DOMNode): DOMNode
    setNamedItemNs(node: DOMNode): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNamedNodeMap_ConstructProps)
    _init (config?: DOMNamedNodeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNavigator_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMNavigator {
    /* Properties of WebKit.DOMNavigator */
    readonly appCodeName: string
    readonly appName: string
    readonly appVersion: string
    readonly cookieEnabled: boolean
    readonly geolocation: DOMGeolocation
    readonly language: string
    readonly mimeTypes: DOMDOMMimeTypeArray
    readonly onLine: boolean
    readonly platform: string
    readonly plugins: DOMDOMPluginArray
    readonly product: string
    readonly productSub: string
    readonly userAgent: string
    readonly vendor: string
    readonly vendorSub: string
    readonly webkitBattery: DOMBatteryManager
    readonly webkitPersistentStorage: DOMStorageQuota
    readonly webkitTemporaryStorage: DOMStorageQuota
    /* Fields of WebKit.DOMNavigator */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNavigator */
    getAppCodeName(): string
    getAppName(): string
    getAppVersion(): string
    getCookieEnabled(): boolean
    getGeolocation(): DOMGeolocation
    getLanguage(): string
    getMimeTypes(): DOMDOMMimeTypeArray
    getOnLine(): boolean
    getPlatform(): string
    getPlugins(): DOMDOMPluginArray
    getProduct(): string
    getProductSub(): string
    getStorageUpdates(): void
    getUserAgent(): string
    getVendor(): string
    getVendorSub(): string
    getWebkitBattery(): DOMBatteryManager
    getWebkitPersistentStorage(): DOMStorageQuota
    getWebkitTemporaryStorage(): DOMStorageQuota
    isProtocolHandlerRegistered(scheme: string, url: string): string
    javaEnabled(): boolean
    registerProtocolHandler(scheme: string, url: string, title: string): void
    unregisterProtocolHandler(scheme: string, url: string): void
    webkitGetGamepads(): DOMGamepadList
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-code-name", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-code-name", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-code-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-code-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-code-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-name", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-name", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-version", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-version", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cookie-enabled", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cookie-enabled", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cookie-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cookie-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cookie-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::geolocation", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::geolocation", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::geolocation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::geolocation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::geolocation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mime-types", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mime-types", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::on-line", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::on-line", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::on-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::on-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::on-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::platform", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::platform", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::platform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::platform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::platform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugins", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugins", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product-sub", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product-sub", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::user-agent", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-agent", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor-sub", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor-sub", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor-sub", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-battery", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-battery", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-battery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-battery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-battery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-persistent-storage", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-persistent-storage", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-persistent-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-persistent-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-persistent-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-temporary-storage", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-temporary-storage", callback: (($obj: DOMNavigator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-temporary-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-temporary-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-temporary-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNavigator_ConstructProps)
    _init (config?: DOMNavigator_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNode_ConstructProps extends DOMObject_ConstructProps {
    nodeValue?: string
    prefix?: string
    textContent?: string
}
export class DOMNode {
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMNode */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNode_ConstructProps)
    _init (config?: DOMNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNodeFilter_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMNodeFilter {
    /* Fields of WebKit.DOMNodeFilter */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNodeFilter */
    acceptNode(n: DOMNode): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNodeFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNodeFilter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNodeFilter_ConstructProps)
    _init (config?: DOMNodeFilter_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNodeIterator_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMNodeIterator {
    /* Properties of WebKit.DOMNodeIterator */
    readonly expandEntityReferences: boolean
    readonly filter: DOMNodeFilter
    readonly pointerBeforeReferenceNode: boolean
    readonly referenceNode: DOMNode
    readonly root: DOMNode
    readonly whatToShow: number
    /* Fields of WebKit.DOMNodeIterator */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNodeIterator */
    detach(): void
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getPointerBeforeReferenceNode(): boolean
    getReferenceNode(): DOMNode
    getRoot(): DOMNode
    getWhatToShow(): number
    nextNode(): DOMNode
    previousNode(): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expand-entity-references", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand-entity-references", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DOMNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNodeIterator_ConstructProps)
    _init (config?: DOMNodeIterator_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMNodeList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMNodeList {
    /* Properties of WebKit.DOMNodeList */
    readonly length: number
    /* Fields of WebKit.DOMNodeList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNodeList */
    getLength(): number
    item(index: number): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMNodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNodeList_ConstructProps)
    _init (config?: DOMNodeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMObject_ConstructProps extends GObject.Object_ConstructProps {
    coreObject?: object
}
export class DOMObject {
    /* Fields of WebKit.DOMObject */
    parentInstance: GObject.Object
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMObject_ConstructProps)
    _init (config?: DOMObject_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPerformance_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMPerformance {
    /* Properties of WebKit.DOMPerformance */
    readonly navigation: DOMPerformanceNavigation
    readonly timing: DOMPerformanceTiming
    /* Fields of WebKit.DOMPerformance */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMPerformance */
    getMemory(): object
    getNavigation(): DOMPerformanceNavigation
    getTiming(): DOMPerformanceTiming
    now(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMPerformance */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::navigation", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::navigation", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timing", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timing", callback: (($obj: DOMPerformance, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPerformance_ConstructProps)
    _init (config?: DOMPerformance_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPerformanceEntry_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMPerformanceEntry {
    /* Properties of WebKit.DOMPerformanceEntry */
    readonly duration: number
    readonly entryType: string
    readonly name: string
    readonly startTime: number
    /* Fields of WebKit.DOMPerformanceEntry */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMPerformanceEntry */
    getDuration(): number
    getEntryType(): string
    getName(): string
    getStartTime(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duration", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entry-type", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entry-type", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entry-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entry-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entry-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-time", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-time", callback: (($obj: DOMPerformanceEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPerformanceEntry_ConstructProps)
    _init (config?: DOMPerformanceEntry_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPerformanceEntryList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMPerformanceEntryList {
    /* Properties of WebKit.DOMPerformanceEntryList */
    readonly length: number
    /* Fields of WebKit.DOMPerformanceEntryList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMPerformanceEntryList */
    getLength(): number
    item(index: number): DOMPerformanceEntry
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPerformanceEntryList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPerformanceEntryList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMPerformanceEntryList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMPerformanceEntryList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPerformanceEntryList_ConstructProps)
    _init (config?: DOMPerformanceEntryList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPerformanceNavigation_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMPerformanceNavigation {
    /* Properties of WebKit.DOMPerformanceNavigation */
    readonly redirectCount: number
    readonly type: number
    /* Fields of WebKit.DOMPerformanceNavigation */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMPerformanceNavigation */
    getRedirectCount(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::redirect-count", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::redirect-count", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::redirect-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::redirect-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::redirect-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMPerformanceNavigation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPerformanceNavigation_ConstructProps)
    _init (config?: DOMPerformanceNavigation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPerformanceTiming_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMPerformanceTiming {
    /* Properties of WebKit.DOMPerformanceTiming */
    readonly connectEnd: number
    readonly connectStart: number
    readonly domComplete: number
    readonly domContentLoadedEventEnd: number
    readonly domContentLoadedEventStart: number
    readonly domInteractive: number
    readonly domLoading: number
    readonly domainLookupEnd: number
    readonly domainLookupStart: number
    readonly fetchStart: number
    readonly loadEventEnd: number
    readonly loadEventStart: number
    readonly navigationStart: number
    readonly redirectEnd: number
    readonly redirectStart: number
    readonly requestStart: number
    readonly responseEnd: number
    readonly responseStart: number
    readonly secureConnectionStart: number
    readonly unloadEventEnd: number
    readonly unloadEventStart: number
    /* Fields of WebKit.DOMPerformanceTiming */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMPerformanceTiming */
    getConnectEnd(): number
    getConnectStart(): number
    getDomComplete(): number
    getDomContentLoadedEventEnd(): number
    getDomContentLoadedEventStart(): number
    getDomInteractive(): number
    getDomLoading(): number
    getDomainLookupEnd(): number
    getDomainLookupStart(): number
    getFetchStart(): number
    getLoadEventEnd(): number
    getLoadEventStart(): number
    getNavigationStart(): number
    getRedirectEnd(): number
    getRedirectStart(): number
    getRequestStart(): number
    getResponseEnd(): number
    getResponseStart(): number
    getSecureConnectionStart(): number
    getUnloadEventEnd(): number
    getUnloadEventStart(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connect-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connect-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connect-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connect-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dom-complete", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dom-complete", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dom-complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dom-complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dom-complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dom-content-loaded-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dom-content-loaded-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dom-content-loaded-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dom-content-loaded-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dom-content-loaded-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dom-content-loaded-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dom-content-loaded-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dom-content-loaded-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dom-content-loaded-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dom-content-loaded-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dom-interactive", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dom-interactive", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dom-interactive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dom-interactive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dom-interactive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dom-loading", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dom-loading", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dom-loading", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dom-loading", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dom-loading", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain-lookup-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-lookup-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain-lookup-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain-lookup-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain-lookup-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain-lookup-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-lookup-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain-lookup-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain-lookup-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain-lookup-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fetch-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fetch-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fetch-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fetch-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fetch-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::load-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::load-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::load-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::load-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::load-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::load-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::load-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::load-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::navigation-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::navigation-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::navigation-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::navigation-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::navigation-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::redirect-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::redirect-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::redirect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::redirect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::redirect-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::redirect-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::redirect-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::redirect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::redirect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::redirect-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::request-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::request-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::request-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::request-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::response-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::response-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::response-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::response-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::response-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::response-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::response-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::response-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::response-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::response-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::secure-connection-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secure-connection-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::secure-connection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::secure-connection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::secure-connection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unload-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unload-event-end", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unload-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unload-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unload-event-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unload-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unload-event-start", callback: (($obj: DOMPerformanceTiming, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unload-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unload-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unload-event-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPerformanceTiming_ConstructProps)
    _init (config?: DOMPerformanceTiming_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMProcessingInstruction_ConstructProps extends DOMCharacterData_ConstructProps {
}
export class DOMProcessingInstruction {
    /* Properties of WebKit.DOMProcessingInstruction */
    readonly sheet: DOMStyleSheet
    readonly target: string
    /* Properties of WebKit.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMProcessingInstruction */
    parentInstance: DOMCharacterData
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMProcessingInstruction */
    getData(): string
    getSheet(): DOMStyleSheet
    getTarget(): string
    setData(value: string): void
    /* Methods of WebKit.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getLength(): number
    insertData(offset: number, data: string): void
    remove(): void
    replaceData(offset: number, length: number, data: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sheet", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMProcessingInstruction_ConstructProps)
    _init (config?: DOMProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMPropertyNodeList_ConstructProps extends DOMNodeList_ConstructProps {
}
export class DOMPropertyNodeList {
    /* Properties of WebKit.DOMPropertyNodeList */
    readonly length: number
    /* Fields of WebKit.DOMNodeList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMNodeList */
    getLength(): number
    item(index: number): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMPropertyNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMPropertyNodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMPropertyNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMPropertyNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMPropertyNodeList_ConstructProps)
    _init (config?: DOMPropertyNodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static getLength(self: object): number
    static item(self: object, index: number): DOMNode
    static $gtype: GObject.Type
}
export interface DOMRange_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMRange {
    /* Properties of WebKit.DOMRange */
    readonly collapsed: boolean
    readonly commonAncestorContainer: DOMNode
    readonly endContainer: DOMNode
    readonly endOffset: number
    readonly startContainer: DOMNode
    readonly startOffset: number
    readonly text: string
    /* Fields of WebKit.DOMRange */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMRange */
    cloneContents(): DOMDocumentFragment
    cloneRange(): DOMRange
    collapse(toStart: boolean): void
    compareBoundaryPoints(how: number, sourceRange: DOMRange): number
    compareNode(refNode: DOMNode): number
    comparePoint(refNode: DOMNode, offset: number): number
    createContextualFragment(html: string): DOMDocumentFragment
    deleteContents(): void
    detach(): void
    expand(unit: string): void
    extractContents(): DOMDocumentFragment
    getCollapsed(): boolean
    getCommonAncestorContainer(): DOMNode
    getEndContainer(): DOMNode
    getEndOffset(): number
    getStartContainer(): DOMNode
    getStartOffset(): number
    getText(): string
    insertNode(newNode: DOMNode): void
    intersectsNode(refNode: DOMNode): boolean
    isPointInRange(refNode: DOMNode, offset: number): boolean
    selectNode(refNode: DOMNode): void
    selectNodeContents(refNode: DOMNode): void
    setEnd(refNode: DOMNode, offset: number): void
    setEndAfter(refNode: DOMNode): void
    setEndBefore(refNode: DOMNode): void
    setStart(refNode: DOMNode, offset: number): void
    setStartAfter(refNode: DOMNode): void
    setStartBefore(refNode: DOMNode): void
    surroundContents(newParent: DOMNode): void
    toString(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMRange_ConstructProps)
    _init (config?: DOMRange_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMScreen_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMScreen {
    /* Properties of WebKit.DOMScreen */
    readonly availHeight: number
    readonly availLeft: number
    readonly availTop: number
    readonly availWidth: number
    readonly colorDepth: number
    readonly height: number
    readonly pixelDepth: number
    readonly width: number
    /* Fields of WebKit.DOMScreen */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMScreen */
    getAvailHeight(): number
    getAvailLeft(): number
    getAvailTop(): number
    getAvailWidth(): number
    getColorDepth(): number
    getHeight(): number
    getPixelDepth(): number
    getWidth(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::avail-height", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avail-height", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::avail-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::avail-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::avail-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::avail-left", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avail-left", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::avail-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::avail-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::avail-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::avail-top", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avail-top", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::avail-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::avail-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::avail-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::avail-width", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avail-width", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::avail-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::avail-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::avail-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::color-depth", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color-depth", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::color-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::color-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::color-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixel-depth", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixel-depth", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixel-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixel-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixel-depth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: DOMScreen, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMScreen_ConstructProps)
    _init (config?: DOMScreen_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMShadowRoot_ConstructProps extends DOMDocumentFragment_ConstructProps {
    applyAuthorStyles?: boolean
    innerHtml?: string
    resetStyleInheritance?: boolean
}
export class DOMShadowRoot {
    /* Properties of WebKit.DOMShadowRoot */
    readonly activeElement: DOMElement
    applyAuthorStyles: boolean
    innerHtml: string
    resetStyleInheritance: boolean
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMShadowRoot */
    parentInstance: DOMDocumentFragment
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMShadowRoot */
    elementFromPoint(x: number, y: number): DOMElement
    getActiveElement(): DOMElement
    getApplyAuthorStyles(): boolean
    getElementById(elementId: string): DOMElement
    getElementsByClassName(className: string): DOMNodeList
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameNs(namespaceURI: string, localName: string): DOMNodeList
    getInnerHtml(): string
    getResetStyleInheritance(): boolean
    getSelection(): DOMDOMSelection
    setApplyAuthorStyles(value: boolean): void
    setInnerHtml(value: string): void
    setResetStyleInheritance(value: boolean): void
    /* Methods of WebKit.DOMDocumentFragment */
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-element", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-element", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apply-author-styles", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apply-author-styles", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apply-author-styles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apply-author-styles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apply-author-styles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reset-style-inheritance", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reset-style-inheritance", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reset-style-inheritance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reset-style-inheritance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reset-style-inheritance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMShadowRoot, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMShadowRoot_ConstructProps)
    _init (config?: DOMShadowRoot_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStorage_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMStorage {
    /* Properties of WebKit.DOMStorage */
    readonly length: number
    /* Fields of WebKit.DOMStorage */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMStorage */
    clear(): void
    getItem(key: string): string
    getLength(): number
    key(index: number): string
    removeItem(key: string): void
    setItem(key: string, data: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStorage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStorage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMStorage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMStorage, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStorage_ConstructProps)
    _init (config?: DOMStorage_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStorageInfo_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMStorageInfo {
    /* Fields of WebKit.DOMStorageInfo */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStorageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStorageInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStorageInfo_ConstructProps)
    _init (config?: DOMStorageInfo_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStorageQuota_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMStorageQuota {
    /* Fields of WebKit.DOMStorageQuota */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStorageQuota, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStorageQuota, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStorageQuota_ConstructProps)
    _init (config?: DOMStorageQuota_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStyleMedia_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMStyleMedia {
    /* Properties of WebKit.DOMStyleMedia */
    readonly type: string
    /* Fields of WebKit.DOMStyleMedia */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMStyleMedia */
    matchMedium(mediaquery: string): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStyleMedia, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStyleMedia, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMStyleMedia, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMStyleMedia, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStyleMedia_ConstructProps)
    _init (config?: DOMStyleMedia_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStyleSheet_ConstructProps extends DOMObject_ConstructProps {
    disabled?: boolean
}
export class DOMStyleSheet {
    /* Properties of WebKit.DOMStyleSheet */
    disabled: boolean
    readonly href: string
    readonly media: DOMMediaList
    readonly ownerNode: DOMNode
    readonly parentStyleSheet: DOMStyleSheet
    readonly title: string
    readonly type: string
    /* Fields of WebKit.DOMStyleSheet */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMStyleSheet */
    getDisabled(): boolean
    getHref(): string
    getMedia(): DOMMediaList
    getOwnerNode(): DOMNode
    getParentStyleSheet(): DOMStyleSheet
    getTitle(): string
    setDisabled(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-node", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-node", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMStyleSheet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStyleSheet_ConstructProps)
    _init (config?: DOMStyleSheet_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMStyleSheetList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMStyleSheetList {
    /* Properties of WebKit.DOMStyleSheetList */
    readonly length: number
    /* Fields of WebKit.DOMStyleSheetList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMStyleSheetList */
    getLength(): number
    item(index: number): DOMStyleSheet
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMStyleSheetList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMStyleSheetList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMStyleSheetList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMStyleSheetList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStyleSheetList_ConstructProps)
    _init (config?: DOMStyleSheetList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMText_ConstructProps extends DOMCharacterData_ConstructProps {
}
export class DOMText {
    /* Properties of WebKit.DOMText */
    readonly wholeText: string
    /* Properties of WebKit.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly localName: string
    readonly namespaceUri: string
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    prefix: string
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit.DOMText */
    parentInstance: DOMCharacterData
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMText */
    getWholeText(): string
    replaceWholeText(content: string): DOMText
    splitText(offset: number): DOMText
    /* Methods of WebKit.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    remove(): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    dispatchEvent(event: DOMEvent): boolean
    getAttributes(): DOMNamedNodeMap
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasAttributes(): boolean
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMNode */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DOMText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMText_ConstructProps)
    _init (config?: DOMText_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTextTrack_ConstructProps extends DOMObject_ConstructProps {
    mode?: string
}
export class DOMTextTrack {
    /* Properties of WebKit.DOMTextTrack */
    readonly activeCues: DOMTextTrackCueList
    readonly cues: DOMTextTrackCueList
    readonly id: string
    readonly kind: string
    readonly label: string
    readonly language: string
    mode: string
    /* Fields of WebKit.DOMTextTrack */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTextTrack */
    addCue(cue: DOMTextTrackCue): void
    dispatchEvent(evt: DOMEvent): boolean
    getActiveCues(): DOMTextTrackCueList
    getCues(): DOMTextTrackCueList
    getId(): string
    getKind(): string
    getLabel(): string
    getLanguage(): string
    getMode(): string
    removeCue(cue: DOMTextTrackCue): void
    setMode(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMTextTrack */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-cues", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-cues", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cues", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cues", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cues", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::kind", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kind", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DOMTextTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTextTrack_ConstructProps)
    _init (config?: DOMTextTrack_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTextTrackCue_ConstructProps extends DOMObject_ConstructProps {
    align?: string
    endTime?: number
    id?: string
    line?: number
    pauseOnExit?: boolean
    position?: number
    size?: number
    snapToLines?: boolean
    startTime?: number
    text?: string
    vertical?: string
}
export class DOMTextTrackCue {
    /* Properties of WebKit.DOMTextTrackCue */
    align: string
    endTime: number
    id: string
    line: number
    pauseOnExit: boolean
    position: number
    size: number
    snapToLines: boolean
    startTime: number
    text: string
    readonly track: DOMTextTrack
    vertical: string
    /* Fields of WebKit.DOMTextTrackCue */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTextTrackCue */
    dispatchEvent(evt: DOMEvent): boolean
    getAlign(): string
    getCueAsHtml(): DOMDocumentFragment
    getEndTime(): number
    getId(): string
    getLine(): number
    getPauseOnExit(): boolean
    getPosition(): number
    getSize(): number
    getSnapToLines(): boolean
    getStartTime(): number
    getText(): string
    getTrack(): DOMTextTrack
    getVertical(): string
    setAlign(value: string): void
    setEndTime(value: number): void
    setId(value: string): void
    setLine(value: number): void
    setPauseOnExit(value: boolean): void
    setPosition(value: number): void
    setSize(value: number): void
    setSnapToLines(value: boolean): void
    setStartTime(value: number): void
    setText(value: string): void
    setVertical(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMTextTrackCue */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-time", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-time", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::line", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pause-on-exit", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pause-on-exit", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pause-on-exit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pause-on-exit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pause-on-exit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::position", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::snap-to-lines", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snap-to-lines", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::snap-to-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::snap-to-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::snap-to-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-time", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-time", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::track", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::track", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::track", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::track", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::track", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vertical", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vertical", callback: (($obj: DOMTextTrackCue, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vertical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vertical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vertical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTextTrackCue_ConstructProps)
    _init (config?: DOMTextTrackCue_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTextTrackCueList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMTextTrackCueList {
    /* Properties of WebKit.DOMTextTrackCueList */
    readonly length: number
    /* Fields of WebKit.DOMTextTrackCueList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTextTrackCueList */
    getCueById(id: string): DOMTextTrackCue
    getLength(): number
    item(index: number): DOMTextTrackCue
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTextTrackCueList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTextTrackCueList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMTextTrackCueList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMTextTrackCueList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTextTrackCueList_ConstructProps)
    _init (config?: DOMTextTrackCueList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTextTrackList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMTextTrackList {
    /* Properties of WebKit.DOMTextTrackList */
    readonly length: number
    /* Fields of WebKit.DOMTextTrackList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTextTrackList */
    dispatchEvent(evt: DOMEvent): boolean
    getLength(): number
    getTrackById(id: string): DOMTextTrack
    item(index: number): DOMTextTrack
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMTextTrackList */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTextTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTextTrackList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMTextTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMTextTrackList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTextTrackList_ConstructProps)
    _init (config?: DOMTextTrackList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTimeRanges_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMTimeRanges {
    /* Properties of WebKit.DOMTimeRanges */
    readonly length: number
    /* Fields of WebKit.DOMTimeRanges */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTimeRanges */
    end(index: number): number
    getLength(): number
    start(index: number): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTimeRanges, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTimeRanges, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMTimeRanges, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMTimeRanges, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTimeRanges_ConstructProps)
    _init (config?: DOMTimeRanges_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTouch_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMTouch {
    /* Properties of WebKit.DOMTouch */
    readonly clientX: number
    readonly clientY: number
    readonly identifier: number
    readonly pageX: number
    readonly pageY: number
    readonly screenX: number
    readonly screenY: number
    readonly target: DOMEventTarget
    readonly webkitForce: number
    readonly webkitRadiusX: number
    readonly webkitRadiusY: number
    readonly webkitRotationAngle: number
    /* Fields of WebKit.DOMTouch */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTouch */
    getClientX(): number
    getClientY(): number
    getIdentifier(): number
    getPageX(): number
    getPageY(): number
    getScreenX(): number
    getScreenY(): number
    getTarget(): DOMEventTarget
    getWebkitForce(): number
    getWebkitRadiusX(): number
    getWebkitRadiusY(): number
    getWebkitRotationAngle(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::identifier", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-force", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-force", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-force", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-force", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-force", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-radius-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-radius-x", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-radius-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-radius-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-radius-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-radius-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-radius-y", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-radius-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-radius-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-radius-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-rotation-angle", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-rotation-angle", callback: (($obj: DOMTouch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-rotation-angle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-rotation-angle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-rotation-angle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTouch_ConstructProps)
    _init (config?: DOMTouch_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTrackEvent_ConstructProps extends DOMEvent_ConstructProps {
}
export class DOMTrackEvent {
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMTrackEvent */
    parentInstance: DOMEvent
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMTrackEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTrackEvent_ConstructProps)
    _init (config?: DOMTrackEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMTreeWalker_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMTreeWalker {
    /* Properties of WebKit.DOMTreeWalker */
    readonly currentNode: DOMNode
    readonly expandEntityReferences: boolean
    readonly filter: DOMNodeFilter
    readonly root: DOMNode
    readonly whatToShow: number
    /* Fields of WebKit.DOMTreeWalker */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMTreeWalker */
    firstChild(): DOMNode
    getCurrentNode(): DOMNode
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getRoot(): DOMNode
    getWhatToShow(): number
    lastChild(): DOMNode
    nextNode(): DOMNode
    nextSibling(): DOMNode
    parentNode(): DOMNode
    previousNode(): DOMNode
    previousSibling(): DOMNode
    setCurrentNode(value: DOMNode): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expand-entity-references", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand-entity-references", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expand-entity-references", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DOMTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTreeWalker_ConstructProps)
    _init (config?: DOMTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMUIEvent_ConstructProps extends DOMEvent_ConstructProps {
}
export class DOMUIEvent {
    /* Properties of WebKit.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    readonly which: number
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMUIEvent */
    parentInstance: DOMEvent
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    getWhich(): number
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::which", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::which", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMUIEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMUIEvent_ConstructProps)
    _init (config?: DOMUIEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMValidityState_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMValidityState {
    /* Properties of WebKit.DOMValidityState */
    readonly badInput: boolean
    readonly customError: boolean
    readonly patternMismatch: boolean
    readonly rangeOverflow: boolean
    readonly rangeUnderflow: boolean
    readonly stepMismatch: boolean
    readonly tooLong: boolean
    readonly typeMismatch: boolean
    readonly valid: boolean
    readonly valueMissing: boolean
    /* Fields of WebKit.DOMValidityState */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMValidityState */
    getBadInput(): boolean
    getCustomError(): boolean
    getPatternMismatch(): boolean
    getRangeOverflow(): boolean
    getRangeUnderflow(): boolean
    getStepMismatch(): boolean
    getTooLong(): boolean
    getTypeMismatch(): boolean
    getValid(): boolean
    getValueMissing(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bad-input", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bad-input", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bad-input", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bad-input", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bad-input", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::custom-error", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::custom-error", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::custom-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::custom-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::custom-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pattern-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pattern-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pattern-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pattern-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pattern-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::range-overflow", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::range-overflow", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::range-overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::range-overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::range-overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::range-underflow", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::range-underflow", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::range-underflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::range-underflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::range-underflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::step-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::step-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::step-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::step-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::step-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::too-long", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::too-long", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::too-long", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::too-long", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::too-long", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-mismatch", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-mismatch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valid", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value-missing", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-missing", callback: (($obj: DOMValidityState, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMValidityState_ConstructProps)
    _init (config?: DOMValidityState_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMVideoPlaybackQuality_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMVideoPlaybackQuality {
    /* Properties of WebKit.DOMVideoPlaybackQuality */
    readonly corruptedVideoFrames: number
    readonly creationTime: number
    readonly droppedVideoFrames: number
    readonly totalFrameDelay: number
    readonly totalVideoFrames: number
    /* Fields of WebKit.DOMVideoPlaybackQuality */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMVideoPlaybackQuality */
    getCorruptedVideoFrames(): number
    getCreationTime(): number
    getDroppedVideoFrames(): number
    getTotalFrameDelay(): number
    getTotalVideoFrames(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::corrupted-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::corrupted-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::corrupted-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::corrupted-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::corrupted-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::creation-time", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::creation-time", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::creation-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::creation-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::creation-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dropped-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dropped-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dropped-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dropped-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dropped-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::total-frame-delay", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-frame-delay", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::total-frame-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::total-frame-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::total-frame-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::total-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-video-frames", callback: (($obj: DOMVideoPlaybackQuality, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::total-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::total-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::total-video-frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMVideoPlaybackQuality_ConstructProps)
    _init (config?: DOMVideoPlaybackQuality_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMVideoTrack_ConstructProps extends DOMObject_ConstructProps {
    selected?: boolean
}
export class DOMVideoTrack {
    /* Properties of WebKit.DOMVideoTrack */
    readonly id: string
    readonly kind: string
    readonly label: string
    readonly language: string
    selected: boolean
    /* Fields of WebKit.DOMVideoTrack */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMVideoTrack */
    getId(): string
    getKind(): string
    getLabel(): string
    getLanguage(): string
    getSelected(): boolean
    setSelected(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::kind", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kind", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected", callback: (($obj: DOMVideoTrack, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMVideoTrack_ConstructProps)
    _init (config?: DOMVideoTrack_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMVideoTrackList_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMVideoTrackList {
    /* Properties of WebKit.DOMVideoTrackList */
    readonly length: number
    /* Fields of WebKit.DOMVideoTrackList */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMVideoTrackList */
    dispatchEvent(evt: DOMEvent): boolean
    getLength(): number
    getTrackById(id: string): DOMVideoTrack
    item(index: number): DOMVideoTrack
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMVideoTrackList */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMVideoTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMVideoTrackList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DOMVideoTrackList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DOMVideoTrackList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMVideoTrackList_ConstructProps)
    _init (config?: DOMVideoTrackList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMWebKitNamedFlow_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMWebKitNamedFlow {
    /* Properties of WebKit.DOMWebKitNamedFlow */
    readonly firstEmptyRegionIndex: number
    readonly name: string
    readonly overset: boolean
    /* Fields of WebKit.DOMWebKitNamedFlow */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMWebKitNamedFlow */
    dispatchEvent(event: DOMEvent): boolean
    getContent(): DOMNodeList
    getContentNodes(): DOMNodeList
    getFirstEmptyRegionIndex(): number
    getName(): string
    getOverflow(): boolean
    getOverset(): boolean
    getRegions(): DOMNodeList
    getRegionsByContent(contentNode: DOMNode): DOMNodeList
    getRegionsByContentNode(contentNode: DOMNode): DOMNodeList
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of WebKit.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of WebKit.DOMWebKitNamedFlow */
    vfuncAddEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    vfuncDispatchEvent(event: DOMEvent): boolean
    vfuncRemoveEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-empty-region-index", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-empty-region-index", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-empty-region-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-empty-region-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-empty-region-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overset", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overset", callback: (($obj: DOMWebKitNamedFlow, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMWebKitNamedFlow_ConstructProps)
    _init (config?: DOMWebKitNamedFlow_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMWebKitPoint_ConstructProps extends DOMObject_ConstructProps {
    x?: number
    y?: number
}
export class DOMWebKitPoint {
    /* Properties of WebKit.DOMWebKitPoint */
    x: number
    y: number
    /* Fields of WebKit.DOMWebKitPoint */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMWebKitPoint */
    getX(): number
    getY(): number
    setX(value: number): void
    setY(value: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: DOMWebKitPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMWebKitPoint_ConstructProps)
    _init (config?: DOMWebKitPoint_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMWheelEvent_ConstructProps extends DOMMouseEvent_ConstructProps {
}
export class DOMWheelEvent {
    /* Properties of WebKit.DOMWheelEvent */
    readonly deltaMode: number
    readonly deltaX: number
    readonly deltaY: number
    readonly deltaZ: number
    readonly webkitDirectionInvertedFromDevice: boolean
    readonly wheelDelta: number
    readonly wheelDeltaX: number
    readonly wheelDeltaY: number
    /* Properties of WebKit.DOMMouseEvent */
    readonly altKey: boolean
    readonly button: number
    readonly clientX: number
    readonly clientY: number
    readonly ctrlKey: boolean
    readonly fromElement: DOMNode
    readonly metaKey: boolean
    readonly offsetX: number
    readonly offsetY: number
    readonly relatedTarget: DOMEventTarget
    readonly screenX: number
    readonly screenY: number
    readonly shiftKey: boolean
    readonly toElement: DOMNode
    readonly webkitMovementX: number
    readonly webkitMovementY: number
    readonly x: number
    readonly y: number
    /* Properties of WebKit.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    readonly which: number
    /* Properties of WebKit.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly defaultPrevented: boolean
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit.DOMWheelEvent */
    parentInstance: DOMMouseEvent
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMWheelEvent */
    getDeltaMode(): number
    getDeltaX(): number
    getDeltaY(): number
    getDeltaZ(): number
    getWebkitDirectionInvertedFromDevice(): boolean
    getWheelDelta(): number
    getWheelDeltaX(): number
    getWheelDeltaY(): number
    initWheelEvent(wheelDeltaX: number, wheelDeltaY: number, view: DOMDOMWindow, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean): void
    /* Methods of WebKit.DOMMouseEvent */
    getAltKey(): boolean
    getButton(): number
    getClientX(): number
    getClientY(): number
    getCtrlKey(): boolean
    getFromElement(): DOMNode
    getMetaKey(): boolean
    getOffsetX(): number
    getOffsetY(): number
    getRelatedTarget(): DOMEventTarget
    getScreenX(): number
    getScreenY(): number
    getShiftKey(): boolean
    getToElement(): DOMNode
    getWebkitMovementX(): number
    getWebkitMovementY(): number
    getX(): number
    getY(): number
    initMouseEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, button: number, relatedTarget: DOMEventTarget): void
    /* Methods of WebKit.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    getWhich(): number
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getDefaultPrevented(): boolean
    getEventPhase(): number
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopImmediatePropagation(): void
    stopPropagation(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delta-mode", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delta-mode", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delta-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delta-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delta-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delta-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delta-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delta-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delta-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delta-z", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delta-z", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delta-z", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delta-z", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delta-z", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-direction-inverted-from-device", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-direction-inverted-from-device", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-direction-inverted-from-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-direction-inverted-from-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-direction-inverted-from-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wheel-delta", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wheel-delta-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wheel-delta-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::button", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::button", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::related-target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::to-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-movement-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-movement-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-movement-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-movement-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-movement-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-movement-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::which", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::which", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::which", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: DOMWheelEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMWheelEvent_ConstructProps)
    _init (config?: DOMWheelEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMXPathExpression_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMXPathExpression {
    /* Fields of WebKit.DOMXPathExpression */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMXPathExpression */
    evaluate(contextNode: DOMNode, type: number, inResult: DOMXPathResult): DOMXPathResult
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMXPathExpression, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMXPathExpression, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMXPathExpression_ConstructProps)
    _init (config?: DOMXPathExpression_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMXPathNSResolver_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMXPathNSResolver {
    /* Fields of WebKit.DOMXPathNSResolver */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMXPathNSResolver */
    lookupNamespaceUri(prefix: string): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMXPathNSResolver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMXPathNSResolver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMXPathNSResolver_ConstructProps)
    _init (config?: DOMXPathNSResolver_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DOMXPathResult_ConstructProps extends DOMObject_ConstructProps {
}
export class DOMXPathResult {
    /* Properties of WebKit.DOMXPathResult */
    readonly booleanValue: boolean
    readonly invalidIteratorState: boolean
    readonly numberValue: number
    readonly resultType: number
    readonly singleNodeValue: DOMNode
    readonly snapshotLength: number
    readonly stringValue: string
    /* Fields of WebKit.DOMXPathResult */
    parentInstance: DOMObject
    /* Fields of WebKit.DOMObject */
    coreObject: object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.DOMXPathResult */
    getBooleanValue(): boolean
    getInvalidIteratorState(): boolean
    getNumberValue(): number
    getResultType(): number
    getSingleNodeValue(): DOMNode
    getSnapshotLength(): number
    getStringValue(): string
    iterateNext(): DOMNode
    snapshotItem(index: number): DOMNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invalid-iterator-state", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invalid-iterator-state", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::result-type", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::result-type", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::single-node-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::single-node-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::snapshot-length", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snapshot-length", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: DOMXPathResult, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMXPathResult_ConstructProps)
    _init (config?: DOMXPathResult_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Download_ConstructProps extends GObject.Object_ConstructProps {
    destinationUri?: string
    networkRequest?: NetworkRequest
    networkResponse?: NetworkResponse
}
export class Download {
    /* Properties of WebKit.Download */
    readonly currentSize: number
    destinationUri: string
    readonly progress: number
    readonly status: DownloadStatus
    readonly suggestedFilename: string
    readonly totalSize: number
    /* Fields of WebKit.Download */
    parentInstance: GObject.Object
    priv: DownloadPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.Download */
    cancel(): void
    getCurrentSize(): number
    getDestinationUri(): string
    getElapsedTime(): number
    getNetworkRequest(): NetworkRequest
    getNetworkResponse(): NetworkResponse
    getProgress(): number
    getStatus(): DownloadStatus
    getSuggestedFilename(): string
    getTotalSize(): number
    getUri(): string
    setDestinationUri(destinationUri: string): void
    start(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.Download */
    connect(sigName: "error", callback: (($obj: Download, errorCode: number, errorDetail: number, reason: string) => boolean)): number
    connect_after(sigName: "error", callback: (($obj: Download, errorCode: number, errorDetail: number, reason: string) => boolean)): number
    emit(sigName: "error", errorCode: number, errorDetail: number, reason: string): void
    on(sigName: "error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-size", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-size", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::destination-uri", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::destination-uri", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::destination-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::destination-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::destination-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::status", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suggested-filename", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suggested-filename", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::total-size", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-size", callback: (($obj: Download, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::total-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::total-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::total-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Download_ConstructProps)
    _init (config?: Download_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(request: NetworkRequest): Download
    static $gtype: GObject.Type
}
export interface FaviconDatabase_ConstructProps extends GObject.Object_ConstructProps {
    path?: string
}
export class FaviconDatabase {
    /* Properties of WebKit.FaviconDatabase */
    path: string
    /* Fields of WebKit.FaviconDatabase */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.FaviconDatabase */
    clear(): void
    getFaviconPixbuf(pageUri: string, width: number, height: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    getFaviconPixbufFinish(result: Gio.AsyncResult): GdkPixbuf.Pixbuf
    getFaviconUri(pageUri: string): string
    getPath(): string
    setPath(path?: string | null): void
    tryGetFaviconPixbuf(pageUri: string, width: number, height: number): GdkPixbuf.Pixbuf
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.FaviconDatabase */
    connect(sigName: "icon-loaded", callback: (($obj: FaviconDatabase, frameUri: string) => void)): number
    connect_after(sigName: "icon-loaded", callback: (($obj: FaviconDatabase, frameUri: string) => void)): number
    emit(sigName: "icon-loaded", frameUri: string): void
    on(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FaviconDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FaviconDatabase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: FaviconDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: FaviconDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FaviconDatabase_ConstructProps)
    _init (config?: FaviconDatabase_ConstructProps): void
    static $gtype: GObject.Type
}
export interface FileChooserRequest_ConstructProps extends GObject.Object_ConstructProps {
}
export class FileChooserRequest {
    /* Properties of WebKit.FileChooserRequest */
    readonly filter: Gtk.FileFilter
    readonly mimeTypes: string[]
    readonly selectMultiple: boolean
    readonly selectedFiles: string[]
    /* Fields of WebKit.FileChooserRequest */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.FileChooserRequest */
    getMimeTypes(): string[]
    getMimeTypesFilter(): Gtk.FileFilter
    getSelectMultiple(): boolean
    getSelectedFiles(): string[]
    selectFiles(files: string[]): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mime-types", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mime-types", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mime-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::select-multiple", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::select-multiple", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::select-multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::select-multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::select-multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-files", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-files", callback: (($obj: FileChooserRequest, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FileChooserRequest_ConstructProps)
    _init (config?: FileChooserRequest_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GeolocationPolicyDecision_ConstructProps extends GObject.Object_ConstructProps {
}
export class GeolocationPolicyDecision {
    /* Fields of WebKit.GeolocationPolicyDecision */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GeolocationPolicyDecision, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GeolocationPolicyDecision, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GeolocationPolicyDecision_ConstructProps)
    _init (config?: GeolocationPolicyDecision_ConstructProps): void
    static $gtype: GObject.Type
}
export interface HitTestResult_ConstructProps extends GObject.Object_ConstructProps {
    context?: HitTestResultContext
    imageUri?: string
    innerNode?: DOMNode
    linkUri?: string
    mediaUri?: string
    x?: number
    y?: number
}
export class HitTestResult {
    /* Fields of WebKit.HitTestResult */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HitTestResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HitTestResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HitTestResult_ConstructProps)
    _init (config?: HitTestResult_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IconDatabase_ConstructProps extends GObject.Object_ConstructProps {
    path?: string
}
export class IconDatabase {
    /* Properties of WebKit.IconDatabase */
    path: string
    /* Fields of WebKit.IconDatabase */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.IconDatabase */
    clear(): void
    getIconPixbuf(pageUri: string): GdkPixbuf.Pixbuf
    getIconUri(pageUri: string): string
    getPath(): string
    setPath(path: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.IconDatabase */
    connect(sigName: "icon-loaded", callback: (($obj: IconDatabase, frame: WebFrame, frameUri: string) => void)): number
    connect_after(sigName: "icon-loaded", callback: (($obj: IconDatabase, frame: WebFrame, frameUri: string) => void)): number
    emit(sigName: "icon-loaded", frame: WebFrame, frameUri: string): void
    on(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IconDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IconDatabase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: IconDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: IconDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IconDatabase_ConstructProps)
    _init (config?: IconDatabase_ConstructProps): void
    static $gtype: GObject.Type
}
export interface NetworkRequest_ConstructProps extends GObject.Object_ConstructProps {
    message?: Soup.Message
    uri?: string
}
export class NetworkRequest {
    /* Properties of WebKit.NetworkRequest */
    uri: string
    /* Fields of WebKit.NetworkRequest */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.NetworkRequest */
    getMessage(): Soup.Message
    getUri(): string
    setUri(uri: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: NetworkRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NetworkRequest, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: NetworkRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: NetworkRequest, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NetworkRequest_ConstructProps)
    _init (config?: NetworkRequest_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(uri: string): NetworkRequest
    static $gtype: GObject.Type
}
export interface NetworkResponse_ConstructProps extends GObject.Object_ConstructProps {
    message?: Soup.Message
    uri?: string
}
export class NetworkResponse {
    /* Properties of WebKit.NetworkResponse */
    readonly suggestedFilename: string
    uri: string
    /* Fields of WebKit.NetworkResponse */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.NetworkResponse */
    getMessage(): Soup.Message
    getSuggestedFilename(): string
    getUri(): string
    setUri(uri: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suggested-filename", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suggested-filename", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: NetworkResponse, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NetworkResponse_ConstructProps)
    _init (config?: NetworkResponse_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(uri: string): NetworkResponse
    static $gtype: GObject.Type
}
export interface SecurityOrigin_ConstructProps extends GObject.Object_ConstructProps {
    webDatabaseQuota?: number
}
export class SecurityOrigin {
    /* Properties of WebKit.SecurityOrigin */
    readonly host: string
    readonly port: number
    readonly protocol: string
    webDatabaseQuota: number
    readonly webDatabaseUsage: number
    /* Fields of WebKit.SecurityOrigin */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.SecurityOrigin */
    getAllWebDatabases(): WebDatabase[]
    getHost(): string
    getPort(): number
    getProtocol(): string
    getWebDatabaseQuota(): number
    getWebDatabaseUsage(): number
    setWebDatabaseQuota(quota: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::web-database-quota", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::web-database-quota", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::web-database-quota", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::web-database-quota", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::web-database-quota", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::web-database-usage", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::web-database-usage", callback: (($obj: SecurityOrigin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::web-database-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::web-database-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::web-database-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SecurityOrigin_ConstructProps)
    _init (config?: SecurityOrigin_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SoupAuthDialog_ConstructProps extends GObject.Object_ConstructProps {
}
export class SoupAuthDialog {
    /* Fields of WebKit.SoupAuthDialog */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Soup.SessionFeature */
    addFeature(type: GObject.Type): boolean
    attach(session: Soup.Session): void
    detach(session: Soup.Session): void
    hasFeature(type: GObject.Type): boolean
    removeFeature(type: GObject.Type): boolean
    /* Virtual methods of WebKit.SoupAuthDialog */
    vfuncAddFeature(type: GObject.Type): boolean
    vfuncAttach(session: Soup.Session): void
    vfuncDetach(session: Soup.Session): void
    vfuncHasFeature(type: GObject.Type): boolean
    vfuncRemoveFeature(type: GObject.Type): boolean
    vfuncRequestQueued(session: Soup.Session, msg: Soup.Message): void
    vfuncRequestStarted(session: Soup.Session, msg: Soup.Message, socket: Soup.Socket): void
    vfuncRequestUnqueued(session: Soup.Session, msg: Soup.Message): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.SoupAuthDialog */
    connect(sigName: "current-toplevel", callback: (($obj: SoupAuthDialog, message: Soup.Message) => Gtk.Widget)): number
    connect_after(sigName: "current-toplevel", callback: (($obj: SoupAuthDialog, message: Soup.Message) => Gtk.Widget)): number
    emit(sigName: "current-toplevel", message: Soup.Message): void
    on(sigName: "current-toplevel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "current-toplevel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "current-toplevel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SoupAuthDialog, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SoupAuthDialog, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SoupAuthDialog_ConstructProps)
    _init (config?: SoupAuthDialog_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ViewportAttributes_ConstructProps extends GObject.Object_ConstructProps {
    availableHeight?: number
    availableWidth?: number
    desktopWidth?: number
    deviceDpi?: number
    deviceHeight?: number
    deviceWidth?: number
}
export class ViewportAttributes {
    /* Properties of WebKit.ViewportAttributes */
    availableHeight: number
    availableWidth: number
    desktopWidth: number
    deviceDpi: number
    deviceHeight: number
    readonly devicePixelRatio: number
    deviceWidth: number
    readonly height: number
    readonly initialScaleFactor: number
    readonly maximumScaleFactor: number
    readonly minimumScaleFactor: number
    readonly userScalable: boolean
    readonly valid: boolean
    readonly width: number
    /* Fields of WebKit.ViewportAttributes */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.ViewportAttributes */
    recompute(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::desktop-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::desktop-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::desktop-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::desktop-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::desktop-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-dpi", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-dpi", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-pixel-ratio", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-pixel-ratio", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::maximum-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maximum-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::maximum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::maximum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::maximum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minimum-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-scale-factor", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minimum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minimum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minimum-scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::user-scalable", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-scalable", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::user-scalable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::user-scalable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::user-scalable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valid", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: ViewportAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ViewportAttributes_ConstructProps)
    _init (config?: ViewportAttributes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebBackForwardList_ConstructProps extends GObject.Object_ConstructProps {
}
export class WebBackForwardList {
    /* Fields of WebKit.WebBackForwardList */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebBackForwardList */
    addItem(historyItem: WebHistoryItem): void
    clear(): void
    containsItem(historyItem: WebHistoryItem): boolean
    getBackItem(): WebHistoryItem
    getBackLength(): number
    getBackListWithLimit(limit: number): WebHistoryItem[]
    getCurrentItem(): WebHistoryItem
    getForwardItem(): WebHistoryItem
    getForwardLength(): number
    getForwardListWithLimit(limit: number): WebHistoryItem[]
    getLimit(): number
    getNthItem(index: number): WebHistoryItem
    goBack(): void
    goForward(): void
    goToItem(historyItem: WebHistoryItem): void
    setLimit(limit: number): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebBackForwardList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebBackForwardList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebBackForwardList_ConstructProps)
    _init (config?: WebBackForwardList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebDataSource_ConstructProps extends GObject.Object_ConstructProps {
}
export class WebDataSource {
    /* Fields of WebKit.WebDataSource */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebDataSource */
    getData(): GLib.String
    getEncoding(): string
    getInitialRequest(): NetworkRequest
    getMainResource(): WebResource
    getRequest(): NetworkRequest
    getSubresources(): WebResource[]
    getUnreachableUri(): string
    getWebFrame(): WebFrame
    isLoading(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebDataSource, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebDataSource, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebDataSource_ConstructProps)
    _init (config?: WebDataSource_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): WebDataSource
    static newWithRequest(request: NetworkRequest): WebDataSource
    static $gtype: GObject.Type
}
export interface WebDatabase_ConstructProps extends GObject.Object_ConstructProps {
    name?: string
    securityOrigin?: SecurityOrigin
}
export class WebDatabase {
    /* Properties of WebKit.WebDatabase */
    readonly displayName: string
    readonly expectedSize: number
    readonly filename: string
    readonly size: number
    /* Fields of WebKit.WebDatabase */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebDatabase */
    getDisplayName(): string
    getExpectedSize(): number
    getFilename(): string
    getName(): string
    getSecurityOrigin(): SecurityOrigin
    getSize(): number
    remove(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::display-name", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expected-size", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expected-size", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expected-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expected-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expected-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filename", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: WebDatabase, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebDatabase_ConstructProps)
    _init (config?: WebDatabase_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebFrame_ConstructProps extends GObject.Object_ConstructProps {
}
export class WebFrame {
    /* Properties of WebKit.WebFrame */
    readonly horizontalScrollbarPolicy: Gtk.PolicyType
    readonly loadStatus: LoadStatus
    readonly name: string
    readonly title: string
    readonly uri: string
    readonly verticalScrollbarPolicy: Gtk.PolicyType
    /* Fields of WebKit.WebFrame */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebFrame */
    findFrame(name: string): WebFrame
    getDataSource(): WebDataSource
    getDomDocument(): DOMDocument
    getGlobalContext(): JavaScriptCore.GlobalContext
    getHorizontalScrollbarPolicy(): Gtk.PolicyType
    getLoadStatus(): LoadStatus
    getName(): string
    getNetworkResponse(): NetworkResponse
    getParent(): WebFrame
    getProvisionalDataSource(): WebDataSource
    getRangeForWordAroundCaret(): DOMRange
    getSecurityOrigin(): SecurityOrigin
    getTitle(): string
    getUri(): string
    getVerticalScrollbarPolicy(): Gtk.PolicyType
    getWebView(): WebView
    loadAlternateString(content: string, baseUrl: string, unreachableUrl: string): void
    loadRequest(request: NetworkRequest): void
    loadString(content: string, mimeType: string, encoding: string, baseUri: string): void
    loadUri(uri: string): void
    print(): void
    printFull(operation: Gtk.PrintOperation, action: Gtk.PrintOperationAction): Gtk.PrintOperationResult
    reload(): void
    replaceSelection(text: string): void
    stopLoading(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.WebFrame */
    connect(sigName: "cleared", callback: (($obj: WebFrame) => void)): number
    connect_after(sigName: "cleared", callback: (($obj: WebFrame) => void)): number
    emit(sigName: "cleared"): void
    on(sigName: "cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "hovering-over-link", callback: (($obj: WebFrame, object: string, p0: string) => void)): number
    connect_after(sigName: "hovering-over-link", callback: (($obj: WebFrame, object: string, p0: string) => void)): number
    emit(sigName: "hovering-over-link", object: string, p0: string): void
    on(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "insecure-content-run", callback: (($obj: WebFrame, securityOrigin: SecurityOrigin, url: string) => void)): number
    connect_after(sigName: "insecure-content-run", callback: (($obj: WebFrame, securityOrigin: SecurityOrigin, url: string) => void)): number
    emit(sigName: "insecure-content-run", securityOrigin: SecurityOrigin, url: string): void
    on(sigName: "insecure-content-run", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "insecure-content-run", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "insecure-content-run", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-committed", callback: (($obj: WebFrame) => void)): number
    connect_after(sigName: "load-committed", callback: (($obj: WebFrame) => void)): number
    emit(sigName: "load-committed"): void
    on(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-content-length-received", callback: (($obj: WebFrame, webResource: WebResource, lengthReceived: number) => void)): number
    connect_after(sigName: "resource-content-length-received", callback: (($obj: WebFrame, webResource: WebResource, lengthReceived: number) => void)): number
    emit(sigName: "resource-content-length-received", webResource: WebResource, lengthReceived: number): void
    on(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-load-failed", callback: (($obj: WebFrame, webResource: WebResource, error: object) => void)): number
    connect_after(sigName: "resource-load-failed", callback: (($obj: WebFrame, webResource: WebResource, error: object) => void)): number
    emit(sigName: "resource-load-failed", webResource: WebResource, error: object): void
    on(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-load-finished", callback: (($obj: WebFrame, webResource: WebResource) => void)): number
    connect_after(sigName: "resource-load-finished", callback: (($obj: WebFrame, webResource: WebResource) => void)): number
    emit(sigName: "resource-load-finished", webResource: WebResource): void
    on(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-request-starting", callback: (($obj: WebFrame, webResource: WebResource, request: NetworkRequest, response: NetworkResponse) => void)): number
    connect_after(sigName: "resource-request-starting", callback: (($obj: WebFrame, webResource: WebResource, request: NetworkRequest, response: NetworkResponse) => void)): number
    emit(sigName: "resource-request-starting", webResource: WebResource, request: NetworkRequest, response: NetworkResponse): void
    on(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-response-received", callback: (($obj: WebFrame, webResource: WebResource, response: NetworkResponse) => void)): number
    connect_after(sigName: "resource-response-received", callback: (($obj: WebFrame, webResource: WebResource, response: NetworkResponse) => void)): number
    emit(sigName: "resource-response-received", webResource: WebResource, response: NetworkResponse): void
    on(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "scrollbars-policy-changed", callback: (($obj: WebFrame) => boolean)): number
    connect_after(sigName: "scrollbars-policy-changed", callback: (($obj: WebFrame) => boolean)): number
    emit(sigName: "scrollbars-policy-changed"): void
    on(sigName: "scrollbars-policy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "scrollbars-policy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "scrollbars-policy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "title-changed", callback: (($obj: WebFrame, title: string) => void)): number
    connect_after(sigName: "title-changed", callback: (($obj: WebFrame, title: string) => void)): number
    emit(sigName: "title-changed", title: string): void
    on(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::horizontal-scrollbar-policy", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::horizontal-scrollbar-policy", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::horizontal-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::horizontal-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::horizontal-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::load-status", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-status", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vertical-scrollbar-policy", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vertical-scrollbar-policy", callback: (($obj: WebFrame, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vertical-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vertical-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vertical-scrollbar-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebFrame_ConstructProps)
    _init (config?: WebFrame_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(webView: WebView): WebFrame
    static $gtype: GObject.Type
}
export interface WebHistoryItem_ConstructProps extends GObject.Object_ConstructProps {
    alternateTitle?: string
}
export class WebHistoryItem {
    /* Properties of WebKit.WebHistoryItem */
    alternateTitle: string
    readonly lastVisitedTime: number
    readonly originalUri: string
    readonly title: string
    readonly uri: string
    /* Fields of WebKit.WebHistoryItem */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebHistoryItem */
    copy(): WebHistoryItem
    getAlternateTitle(): string
    getLastVisitedTime(): number
    getOriginalUri(): string
    getTitle(): string
    getUri(): string
    setAlternateTitle(title: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alternate-title", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alternate-title", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alternate-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alternate-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alternate-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-visited-time", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-visited-time", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-visited-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-visited-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-visited-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::original-uri", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::original-uri", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: WebHistoryItem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebHistoryItem_ConstructProps)
    _init (config?: WebHistoryItem_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): WebHistoryItem
    static newWithData(uri: string, title: string): WebHistoryItem
    static $gtype: GObject.Type
}
export interface WebInspector_ConstructProps extends GObject.Object_ConstructProps {
    javascriptProfilingEnabled?: boolean
    timelineProfilingEnabled?: boolean
}
export class WebInspector {
    /* Properties of WebKit.WebInspector */
    readonly inspectedUri: string
    javascriptProfilingEnabled: boolean
    timelineProfilingEnabled: boolean
    readonly webView: WebView
    /* Fields of WebKit.WebInspector */
    parentInstance: GObject.Object
    priv: WebInspectorPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebInspector */
    close(): void
    getInspectedUri(): string
    getWebView(): WebView
    inspectCoordinates(x: number, y: number): void
    inspectNode(node: DOMNode): void
    show(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.WebInspector */
    connect(sigName: "attach-window", callback: (($obj: WebInspector) => boolean)): number
    connect_after(sigName: "attach-window", callback: (($obj: WebInspector) => boolean)): number
    emit(sigName: "attach-window"): void
    on(sigName: "attach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "attach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "attach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "close-window", callback: (($obj: WebInspector) => boolean)): number
    connect_after(sigName: "close-window", callback: (($obj: WebInspector) => boolean)): number
    emit(sigName: "close-window"): void
    on(sigName: "close-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "close-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "close-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "detach-window", callback: (($obj: WebInspector) => boolean)): number
    connect_after(sigName: "detach-window", callback: (($obj: WebInspector) => boolean)): number
    emit(sigName: "detach-window"): void
    on(sigName: "detach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "detach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "detach-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "finished", callback: (($obj: WebInspector) => void)): number
    connect_after(sigName: "finished", callback: (($obj: WebInspector) => void)): number
    emit(sigName: "finished"): void
    on(sigName: "finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "inspect-web-view", callback: (($obj: WebInspector, webView: WebView) => WebView)): number
    connect_after(sigName: "inspect-web-view", callback: (($obj: WebInspector, webView: WebView) => WebView)): number
    emit(sigName: "inspect-web-view", webView: WebView): void
    on(sigName: "inspect-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "inspect-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "inspect-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "show-window", callback: (($obj: WebInspector) => boolean)): number
    connect_after(sigName: "show-window", callback: (($obj: WebInspector) => boolean)): number
    emit(sigName: "show-window"): void
    on(sigName: "show-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "show-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "show-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inspected-uri", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inspected-uri", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inspected-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inspected-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inspected-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::javascript-profiling-enabled", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::javascript-profiling-enabled", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::javascript-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::javascript-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::javascript-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timeline-profiling-enabled", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeline-profiling-enabled", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timeline-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timeline-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timeline-profiling-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::web-view", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::web-view", callback: (($obj: WebInspector, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebInspector_ConstructProps)
    _init (config?: WebInspector_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebNavigationAction_ConstructProps extends GObject.Object_ConstructProps {
    button?: number
    modifierState?: number
    originalUri?: string
    reason?: WebNavigationReason
    targetFrame?: string
}
export class WebNavigationAction {
    /* Properties of WebKit.WebNavigationAction */
    originalUri: string
    reason: WebNavigationReason
    /* Fields of WebKit.WebNavigationAction */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebNavigationAction */
    getButton(): number
    getModifierState(): number
    getOriginalUri(): string
    getReason(): WebNavigationReason
    getTargetFrame(): string
    setOriginalUri(originalUri: string): void
    setReason(reason: WebNavigationReason): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::original-uri", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::original-uri", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::original-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reason", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reason", callback: (($obj: WebNavigationAction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebNavigationAction_ConstructProps)
    _init (config?: WebNavigationAction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebPlugin_ConstructProps extends GObject.Object_ConstructProps {
    enabled?: boolean
}
export class WebPlugin {
    /* Properties of WebKit.WebPlugin */
    enabled: boolean
    /* Fields of WebKit.WebPlugin */
    parentInstance: GObject.Object
    priv: WebPluginPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebPlugin */
    getDescription(): string
    getEnabled(): boolean
    getName(): string
    getPath(): string
    setEnabled(enabled: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebPlugin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled", callback: (($obj: WebPlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: WebPlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebPlugin_ConstructProps)
    _init (config?: WebPlugin_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebPluginDatabase_ConstructProps extends GObject.Object_ConstructProps {
}
export class WebPluginDatabase {
    /* Fields of WebKit.WebPluginDatabase */
    parentInstance: GObject.Object
    priv: WebPluginDatabasePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebPluginDatabase */
    getPluginForMimetype(mimeType: string): WebPlugin
    getPlugins(): WebPlugin[]
    refresh(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebPluginDatabase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebPluginDatabase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebPluginDatabase_ConstructProps)
    _init (config?: WebPluginDatabase_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static pluginsListFree(list: WebPlugin[]): void
    static $gtype: GObject.Type
}
export interface WebPolicyDecision_ConstructProps extends GObject.Object_ConstructProps {
}
export class WebPolicyDecision {
    /* Fields of WebKit.WebPolicyDecision */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebPolicyDecision */
    download(): void
    ignore(): void
    use(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebPolicyDecision, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebPolicyDecision, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebPolicyDecision_ConstructProps)
    _init (config?: WebPolicyDecision_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WebResource_ConstructProps extends GObject.Object_ConstructProps {
    uri?: string
}
export class WebResource {
    /* Properties of WebKit.WebResource */
    readonly encoding: string
    readonly frameName: string
    readonly mimeType: string
    /* Fields of WebKit.WebResource */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebResource */
    getData(): GLib.String
    getEncoding(): string
    getFrameName(): string
    getMimeType(): string
    getUri(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.WebResource */
    connect(sigName: "content-length-received", callback: (($obj: WebResource, lengthReceived: number) => void)): number
    connect_after(sigName: "content-length-received", callback: (($obj: WebResource, lengthReceived: number) => void)): number
    emit(sigName: "content-length-received", lengthReceived: number): void
    on(sigName: "content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-failed", callback: (($obj: WebResource, error: object) => void)): number
    connect_after(sigName: "load-failed", callback: (($obj: WebResource, error: object) => void)): number
    emit(sigName: "load-failed", error: object): void
    on(sigName: "load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-finished", callback: (($obj: WebResource) => void)): number
    connect_after(sigName: "load-finished", callback: (($obj: WebResource) => void)): number
    emit(sigName: "load-finished"): void
    on(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "response-received", callback: (($obj: WebResource, response: NetworkResponse) => void)): number
    connect_after(sigName: "response-received", callback: (($obj: WebResource, response: NetworkResponse) => void)): number
    emit(sigName: "response-received", response: NetworkResponse): void
    on(sigName: "response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-name", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-name", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mime-type", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mime-type", callback: (($obj: WebResource, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebResource_ConstructProps)
    _init (config?: WebResource_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(data: string, size: number, uri: string, mimeType: string, encoding: string, frameName: string): WebResource
    static $gtype: GObject.Type
}
export interface WebSettings_ConstructProps extends GObject.Object_ConstructProps {
    autoLoadImages?: boolean
    autoResizeWindow?: boolean
    autoShrinkImages?: boolean
    cursiveFontFamily?: string
    defaultEncoding?: string
    defaultFontFamily?: string
    defaultFontSize?: number
    defaultMonospaceFontSize?: number
    editingBehavior?: EditingBehavior
    enableAcceleratedCompositing?: boolean
    enableCaretBrowsing?: boolean
    enableDefaultContextMenu?: boolean
    enableDeveloperExtras?: boolean
    enableDisplayOfInsecureContent?: boolean
    enableDnsPrefetching?: boolean
    enableDomPaste?: boolean
    enableFileAccessFromFileUris?: boolean
    enableFrameFlattening?: boolean
    enableFullscreen?: boolean
    enableHtml5Database?: boolean
    enableHtml5LocalStorage?: boolean
    enableHyperlinkAuditing?: boolean
    enableJavaApplet?: boolean
    enableMediaStream?: boolean
    enableMediasource?: boolean
    enableOfflineWebApplicationCache?: boolean
    enablePageCache?: boolean
    enablePlugins?: boolean
    enablePrivateBrowsing?: boolean
    enableRunningOfInsecureContent?: boolean
    enableScripts?: boolean
    enableSiteSpecificQuirks?: boolean
    enableSmoothScrolling?: boolean
    enableSpatialNavigation?: boolean
    enableSpellChecking?: boolean
    enableUniversalAccessFromFileUris?: boolean
    enableWebaudio?: boolean
    enableWebgl?: boolean
    enableXssAuditor?: boolean
    enforce96Dpi?: boolean
    fantasyFontFamily?: string
    html5LocalStorageDatabasePath?: string
    javascriptCanAccessClipboard?: boolean
    javascriptCanOpenWindowsAutomatically?: boolean
    mediaPlaybackAllowsInline?: boolean
    mediaPlaybackRequiresUserGesture?: boolean
    minimumFontSize?: number
    minimumLogicalFontSize?: number
    monospaceFontFamily?: string
    printBackgrounds?: boolean
    resizableTextAreas?: boolean
    respectImageOrientation?: boolean
    sansSerifFontFamily?: string
    serifFontFamily?: string
    spellCheckingLanguages?: string
    tabKeyCyclesThroughElements?: boolean
    userAgent?: string
    userStylesheetUri?: string
    zoomStep?: number
}
export class WebSettings {
    /* Properties of WebKit.WebSettings */
    autoLoadImages: boolean
    autoResizeWindow: boolean
    autoShrinkImages: boolean
    cursiveFontFamily: string
    defaultEncoding: string
    defaultFontFamily: string
    defaultFontSize: number
    defaultMonospaceFontSize: number
    editingBehavior: EditingBehavior
    enableAcceleratedCompositing: boolean
    enableCaretBrowsing: boolean
    enableDefaultContextMenu: boolean
    enableDeveloperExtras: boolean
    enableDisplayOfInsecureContent: boolean
    enableDnsPrefetching: boolean
    enableDomPaste: boolean
    enableFileAccessFromFileUris: boolean
    enableFrameFlattening: boolean
    enableFullscreen: boolean
    enableHtml5Database: boolean
    enableHtml5LocalStorage: boolean
    enableHyperlinkAuditing: boolean
    enableJavaApplet: boolean
    enableMediaStream: boolean
    enableMediasource: boolean
    enableOfflineWebApplicationCache: boolean
    enablePageCache: boolean
    enablePlugins: boolean
    enablePrivateBrowsing: boolean
    enableRunningOfInsecureContent: boolean
    enableScripts: boolean
    enableSiteSpecificQuirks: boolean
    enableSmoothScrolling: boolean
    enableSpatialNavigation: boolean
    enableSpellChecking: boolean
    enableUniversalAccessFromFileUris: boolean
    enableWebaudio: boolean
    enableWebgl: boolean
    enableXssAuditor: boolean
    enforce96Dpi: boolean
    fantasyFontFamily: string
    html5LocalStorageDatabasePath: string
    javascriptCanAccessClipboard: boolean
    javascriptCanOpenWindowsAutomatically: boolean
    mediaPlaybackAllowsInline: boolean
    mediaPlaybackRequiresUserGesture: boolean
    minimumFontSize: number
    minimumLogicalFontSize: number
    monospaceFontFamily: string
    printBackgrounds: boolean
    resizableTextAreas: boolean
    respectImageOrientation: boolean
    sansSerifFontFamily: string
    serifFontFamily: string
    spellCheckingLanguages: string
    tabKeyCyclesThroughElements: boolean
    userAgent: string
    userStylesheetUri: string
    zoomStep: number
    /* Fields of WebKit.WebSettings */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebSettings */
    copy(): WebSettings
    getUserAgent(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-load-images", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-load-images", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-load-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-load-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-load-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-resize-window", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-resize-window", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-resize-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-resize-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-resize-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-shrink-images", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-shrink-images", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-shrink-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-shrink-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-shrink-images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursive-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursive-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursive-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursive-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursive-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-encoding", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-encoding", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-monospace-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-monospace-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-monospace-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-monospace-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-monospace-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editing-behavior", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editing-behavior", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editing-behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editing-behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editing-behavior", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-accelerated-compositing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-accelerated-compositing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-accelerated-compositing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-accelerated-compositing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-accelerated-compositing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-caret-browsing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-caret-browsing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-caret-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-caret-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-caret-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-default-context-menu", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-default-context-menu", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-default-context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-default-context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-default-context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-developer-extras", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-developer-extras", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-developer-extras", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-developer-extras", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-developer-extras", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-display-of-insecure-content", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-display-of-insecure-content", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-display-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-display-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-display-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-dns-prefetching", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-dns-prefetching", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-dns-prefetching", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-dns-prefetching", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-dns-prefetching", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-dom-paste", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-dom-paste", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-dom-paste", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-dom-paste", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-dom-paste", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-file-access-from-file-uris", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-file-access-from-file-uris", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-file-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-file-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-file-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-frame-flattening", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-frame-flattening", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-frame-flattening", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-frame-flattening", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-frame-flattening", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-fullscreen", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-fullscreen", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-html5-database", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-html5-database", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-html5-database", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-html5-database", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-html5-database", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-html5-local-storage", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-html5-local-storage", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-html5-local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-html5-local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-html5-local-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-hyperlink-auditing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-hyperlink-auditing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-hyperlink-auditing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-hyperlink-auditing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-hyperlink-auditing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-java-applet", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-java-applet", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-java-applet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-java-applet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-java-applet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-media-stream", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-media-stream", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-media-stream", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-media-stream", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-media-stream", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-mediasource", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-mediasource", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-mediasource", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-mediasource", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-mediasource", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-offline-web-application-cache", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-offline-web-application-cache", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-offline-web-application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-offline-web-application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-offline-web-application-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-page-cache", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-page-cache", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-page-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-page-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-page-cache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-plugins", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-plugins", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-private-browsing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-private-browsing", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-private-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-private-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-private-browsing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-running-of-insecure-content", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-running-of-insecure-content", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-running-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-running-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-running-of-insecure-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-scripts", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-scripts", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-site-specific-quirks", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-site-specific-quirks", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-site-specific-quirks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-site-specific-quirks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-site-specific-quirks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-smooth-scrolling", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-smooth-scrolling", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-smooth-scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-smooth-scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-smooth-scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-spatial-navigation", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-spatial-navigation", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-spatial-navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-spatial-navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-spatial-navigation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-spell-checking", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-spell-checking", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-spell-checking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-spell-checking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-spell-checking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-universal-access-from-file-uris", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-universal-access-from-file-uris", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-universal-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-universal-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-universal-access-from-file-uris", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-webaudio", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-webaudio", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-webaudio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-webaudio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-webaudio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-webgl", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-webgl", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-webgl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-webgl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-webgl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-xss-auditor", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-xss-auditor", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-xss-auditor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-xss-auditor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-xss-auditor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enforce-96-dpi", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enforce-96-dpi", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enforce-96-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enforce-96-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enforce-96-dpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fantasy-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fantasy-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fantasy-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fantasy-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fantasy-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::html5-local-storage-database-path", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html5-local-storage-database-path", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html5-local-storage-database-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html5-local-storage-database-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html5-local-storage-database-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::javascript-can-access-clipboard", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::javascript-can-access-clipboard", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::javascript-can-access-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::javascript-can-access-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::javascript-can-access-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::javascript-can-open-windows-automatically", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::javascript-can-open-windows-automatically", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::javascript-can-open-windows-automatically", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::javascript-can-open-windows-automatically", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::javascript-can-open-windows-automatically", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-playback-allows-inline", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-playback-allows-inline", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-playback-allows-inline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-playback-allows-inline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-playback-allows-inline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-playback-requires-user-gesture", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-playback-requires-user-gesture", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-playback-requires-user-gesture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-playback-requires-user-gesture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-playback-requires-user-gesture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minimum-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minimum-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minimum-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minimum-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minimum-logical-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-logical-font-size", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minimum-logical-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minimum-logical-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minimum-logical-font-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::monospace-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::monospace-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::monospace-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::monospace-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::monospace-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::print-backgrounds", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::print-backgrounds", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::print-backgrounds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::print-backgrounds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::print-backgrounds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::resizable-text-areas", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resizable-text-areas", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::resizable-text-areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::resizable-text-areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::resizable-text-areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::respect-image-orientation", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::respect-image-orientation", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::respect-image-orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::respect-image-orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::respect-image-orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sans-serif-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sans-serif-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sans-serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sans-serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sans-serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serif-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serif-font-family", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serif-font-family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spell-checking-languages", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spell-checking-languages", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spell-checking-languages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spell-checking-languages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spell-checking-languages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-key-cycles-through-elements", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-key-cycles-through-elements", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-key-cycles-through-elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-key-cycles-through-elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-key-cycles-through-elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::user-agent", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-agent", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::user-agent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::user-stylesheet-uri", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-stylesheet-uri", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::user-stylesheet-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::user-stylesheet-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::user-stylesheet-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::zoom-step", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zoom-step", callback: (($obj: WebSettings, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::zoom-step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::zoom-step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::zoom-step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebSettings_ConstructProps)
    _init (config?: WebSettings_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): WebSettings
    static $gtype: GObject.Type
}
export interface WebView_ConstructProps extends Gtk.Container_ConstructProps {
    customEncoding?: string
    editable?: boolean
    fullContentZoom?: boolean
    selfScrolling?: boolean
    settings?: WebSettings
    transparent?: boolean
    viewMode?: WebViewViewMode
    windowFeatures?: WebWindowFeatures
    zoomLevel?: number
    hadjustment?: Gtk.Adjustment
    hscrollPolicy?: Gtk.ScrollablePolicy
    vadjustment?: Gtk.Adjustment
    vscrollPolicy?: Gtk.ScrollablePolicy
}
export class WebView {
    /* Properties of WebKit.WebView */
    readonly copyTargetList: Gtk.TargetList
    customEncoding: string
    editable: boolean
    readonly encoding: string
    fullContentZoom: boolean
    readonly iconUri: string
    readonly imContext: Gtk.IMContext
    readonly loadStatus: LoadStatus
    readonly pasteTargetList: Gtk.TargetList
    readonly progress: number
    settings: WebSettings
    readonly title: string
    transparent: boolean
    readonly uri: string
    viewMode: WebViewViewMode
    readonly viewportAttributes: ViewportAttributes
    readonly webInspector: WebInspector
    windowFeatures: WebWindowFeatures
    zoomLevel: number
    /* Properties of Gtk.Container */
    borderWidth: number
    child: Gtk.Widget
    resizeMode: Gtk.ResizeMode
    /* Properties of Gtk.Widget */
    appPaintable: boolean
    canDefault: boolean
    canFocus: boolean
    readonly compositeChild: boolean
    doubleBuffered: boolean
    events: Gdk.EventMask
    expand: boolean
    focusOnClick: boolean
    halign: Gtk.Align
    hasDefault: boolean
    hasFocus: boolean
    hasTooltip: boolean
    heightRequest: number
    hexpand: boolean
    hexpandSet: boolean
    isFocus: boolean
    margin: number
    marginBottom: number
    marginEnd: number
    marginLeft: number
    marginRight: number
    marginStart: number
    marginTop: number
    name: string
    noShowAll: boolean
    opacity: number
    parent: Gtk.Container
    receivesDefault: boolean
    readonly scaleFactor: number
    sensitive: boolean
    style: Gtk.Style
    tooltipMarkup: string
    tooltipText: string
    valign: Gtk.Align
    vexpand: boolean
    vexpandSet: boolean
    visible: boolean
    widthRequest: number
    readonly window: Gdk.Window
    /* Properties of Gtk.Scrollable */
    hadjustment: Gtk.Adjustment
    hscrollPolicy: Gtk.ScrollablePolicy
    vadjustment: Gtk.Adjustment
    vscrollPolicy: Gtk.ScrollablePolicy
    /* Fields of WebKit.WebView */
    parentInstance: Gtk.Container
    /* Fields of Gtk.Container */
    widget: Gtk.Widget
    /* Fields of GObject.InitiallyUnowned */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebView */
    canCopyClipboard(): boolean
    canCutClipboard(): boolean
    canGoBack(): boolean
    canGoBackOrForward(steps: number): boolean
    canGoForward(): boolean
    canPasteClipboard(): boolean
    canRedo(): boolean
    canShowMimeType(mimeType: string): boolean
    canUndo(): boolean
    copyClipboard(): void
    cutClipboard(): void
    deleteSelection(): void
    executeScript(script: string): void
    getBackForwardList(): WebBackForwardList
    getCopyTargetList(): Gtk.TargetList
    getCustomEncoding(): string
    getDomDocument(): DOMDocument
    getEditable(): boolean
    getEncoding(): string
    getFocusedFrame(): WebFrame
    getFullContentZoom(): boolean
    getHitTestResult(event: Gdk.EventButton): HitTestResult
    getIconPixbuf(): GdkPixbuf.Pixbuf
    getIconUri(): string
    getInspector(): WebInspector
    getLoadStatus(): LoadStatus
    getMainFrame(): WebFrame
    getPasteTargetList(): Gtk.TargetList
    getProgress(): number
    getSnapshot(): cairo.Surface
    getTitle(): string
    getTransparent(): boolean
    getUri(): string
    getViewMode(): WebViewViewMode
    getViewSourceMode(): boolean
    getViewportAttributes(): ViewportAttributes
    getWindowFeatures(): WebWindowFeatures
    getZoomLevel(): number
    goBack(): void
    goBackOrForward(steps: number): void
    goForward(): void
    goToBackForwardItem(item: WebHistoryItem): boolean
    hasSelection(): boolean
    loadHtmlString(content: string, baseUri: string): void
    loadRequest(request: NetworkRequest): void
    loadString(content: string, mimeType: string, encoding: string, baseUri: string): void
    loadUri(uri: string): void
    markTextMatches(string: string, caseSensitive: boolean, limit: number): number
    moveCursor(step: Gtk.MovementStep, count: number): void
    open(uri: string): void
    pasteClipboard(): void
    redo(): void
    reload(): void
    reloadBypassCache(): void
    searchText(text: string, caseSensitive: boolean, forward: boolean, wrap: boolean): boolean
    selectAll(): void
    setCustomEncoding(encoding: string): void
    setEditable(flag: boolean): void
    setFullContentZoom(fullContentZoom: boolean): void
    setHighlightTextMatches(highlight: boolean): void
    setMaintainsBackForwardList(flag: boolean): void
    setSettings(settings: WebSettings): void
    setTransparent(flag: boolean): void
    setViewMode(mode: WebViewViewMode): void
    setViewSourceMode(viewSourceMode: boolean): void
    setZoomLevel(zoomLevel: number): void
    stopLoading(): void
    tryGetFaviconPixbuf(width: number, height: number): GdkPixbuf.Pixbuf
    undo(): void
    unmarkTextMatches(): void
    zoomIn(): void
    zoomOut(): void
    /* Methods of Gtk.Container */
    add(widget: Gtk.Widget): void
    checkResize(): void
    childGetProperty(child: Gtk.Widget, propertyName: string, value: any): void
    childNotifyByPspec(child: Gtk.Widget, pspec: GObject.ParamSpec): void
    childSetProperty(child: Gtk.Widget, propertyName: string, value: any): void
    childType(): GObject.Type
    forall(callback: Gtk.Callback): void
    foreach(callback: Gtk.Callback): void
    getBorderWidth(): number
    getChildren(): Gtk.Widget[]
    getFocusChain(): [ /* returnType */ boolean, /* focusableWidgets */ Gtk.Widget[] ]
    getFocusChild(): Gtk.Widget | null
    getFocusHadjustment(): Gtk.Adjustment | null
    getFocusVadjustment(): Gtk.Adjustment | null
    getPathForChild(child: Gtk.Widget): Gtk.WidgetPath
    getResizeMode(): Gtk.ResizeMode
    propagateDraw(child: Gtk.Widget, cr: cairo.Context): void
    remove(widget: Gtk.Widget): void
    resizeChildren(): void
    setBorderWidth(borderWidth: number): void
    setFocusChain(focusableWidgets: Gtk.Widget[]): void
    setFocusChild(child?: Gtk.Widget | null): void
    setFocusHadjustment(adjustment: Gtk.Adjustment): void
    setFocusVadjustment(adjustment: Gtk.Adjustment): void
    setReallocateRedraws(needsRedraws: boolean): void
    setResizeMode(resizeMode: Gtk.ResizeMode): void
    unsetFocusChain(): void
    /* Methods of Gtk.Widget */
    activate(): boolean
    addAccelerator(accelSignal: string, accelGroup: Gtk.AccelGroup, accelKey: number, accelMods: Gdk.ModifierType, accelFlags: Gtk.AccelFlags): void
    addDeviceEvents(device: Gdk.Device, events: Gdk.EventMask): void
    addEvents(events: number): void
    addMnemonicLabel(label: Gtk.Widget): void
    addTickCallback(callback: Gtk.TickCallback): number
    canActivateAccel(signalId: number): boolean
    childFocus(direction: Gtk.DirectionType): boolean
    childNotify(childProperty: string): void
    classPath(): [ /* pathLength */ number | null, /* path */ string | null, /* pathReversed */ string | null ]
    computeExpand(orientation: Gtk.Orientation): boolean
    createPangoContext(): Pango.Context
    createPangoLayout(text?: string | null): Pango.Layout
    destroy(): void
    destroyed(widgetPointer: Gtk.Widget): /* widgetPointer */ Gtk.Widget
    deviceIsShadowed(device: Gdk.Device): boolean
    dragBegin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: Gdk.Event | null): Gdk.DragContext
    dragBeginWithCoordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: Gdk.Event | null, x: number, y: number): Gdk.DragContext
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    dragDestAddImageTargets(): void
    dragDestAddTextTargets(): void
    dragDestAddUriTargets(): void
    dragDestFindTarget(context: Gdk.DragContext, targetList?: Gtk.TargetList | null): Gdk.Atom
    dragDestGetTargetList(): Gtk.TargetList | null
    dragDestGetTrackMotion(): boolean
    dragDestSet(flags: Gtk.DestDefaults, targets: Gtk.TargetEntry[] | null, actions: Gdk.DragAction): void
    dragDestSetProxy(proxyWindow: Gdk.Window, protocol: Gdk.DragProtocol, useCoordinates: boolean): void
    dragDestSetTargetList(targetList?: Gtk.TargetList | null): void
    dragDestSetTrackMotion(trackMotion: boolean): void
    dragDestUnset(): void
    dragGetData(context: Gdk.DragContext, target: Gdk.Atom, time: number): void
    dragHighlight(): void
    dragSourceAddImageTargets(): void
    dragSourceAddTextTargets(): void
    dragSourceAddUriTargets(): void
    dragSourceGetTargetList(): Gtk.TargetList | null
    dragSourceSet(startButtonMask: Gdk.ModifierType, targets: Gtk.TargetEntry[] | null, actions: Gdk.DragAction): void
    dragSourceSetIconGicon(icon: Gio.Icon): void
    dragSourceSetIconName(iconName: string): void
    dragSourceSetIconPixbuf(pixbuf: GdkPixbuf.Pixbuf): void
    dragSourceSetIconStock(stockId: string): void
    dragSourceSetTargetList(targetList?: Gtk.TargetList | null): void
    dragSourceUnset(): void
    dragUnhighlight(): void
    draw(cr: cairo.Context): void
    ensureStyle(): void
    errorBell(): void
    event(event: Gdk.Event): boolean
    freezeChildNotify(): void
    getAccessible(): Atk.Object
    getActionGroup(prefix: string): Gio.ActionGroup | null
    getAllocatedBaseline(): number
    getAllocatedHeight(): number
    getAllocatedSize(): [ /* allocation */ Gtk.Allocation, /* baseline */ number | null ]
    getAllocatedWidth(): number
    getAllocation(): /* allocation */ Gtk.Allocation
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    getAppPaintable(): boolean
    getCanDefault(): boolean
    getCanFocus(): boolean
    getChildRequisition(): /* requisition */ Gtk.Requisition
    getChildVisible(): boolean
    getClip(): /* clip */ Gtk.Allocation
    getClipboard(selection: Gdk.Atom): Gtk.Clipboard
    getCompositeName(): string
    getDeviceEnabled(device: Gdk.Device): boolean
    getDeviceEvents(device: Gdk.Device): Gdk.EventMask
    getDirection(): Gtk.TextDirection
    getDisplay(): Gdk.Display
    getDoubleBuffered(): boolean
    getEvents(): number
    getFocusOnClick(): boolean
    getFontMap(): Pango.FontMap | null
    getFontOptions(): cairo.FontOptions | null
    getFrameClock(): Gdk.FrameClock | null
    getHalign(): Gtk.Align
    getHasTooltip(): boolean
    getHasWindow(): boolean
    getHexpand(): boolean
    getHexpandSet(): boolean
    getMapped(): boolean
    getMarginBottom(): number
    getMarginEnd(): number
    getMarginLeft(): number
    getMarginRight(): number
    getMarginStart(): number
    getMarginTop(): number
    getModifierMask(intent: Gdk.ModifierIntent): Gdk.ModifierType
    getModifierStyle(): Gtk.RcStyle
    getName(): string
    getNoShowAll(): boolean
    getOpacity(): number
    getPangoContext(): Pango.Context
    getParent(): Gtk.Widget | null
    getParentWindow(): Gdk.Window | null
    getPath(): Gtk.WidgetPath
    getPointer(): [ /* x */ number | null, /* y */ number | null ]
    getPreferredHeight(): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null ]
    getPreferredHeightAndBaselineForWidth(width: number): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    getPreferredHeightForWidth(width: number): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null ]
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    getPreferredWidth(): [ /* minimumWidth */ number | null, /* naturalWidth */ number | null ]
    getPreferredWidthForHeight(height: number): [ /* minimumWidth */ number | null, /* naturalWidth */ number | null ]
    getRealized(): boolean
    getReceivesDefault(): boolean
    getRequestMode(): Gtk.SizeRequestMode
    getRequisition(): /* requisition */ Gtk.Requisition
    getRootWindow(): Gdk.Window
    getScaleFactor(): number
    getScreen(): Gdk.Screen
    getSensitive(): boolean
    getSettings(): Gtk.Settings
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    getState(): Gtk.StateType
    getStateFlags(): Gtk.StateFlags
    getStyle(): Gtk.Style
    getStyleContext(): Gtk.StyleContext
    getSupportMultidevice(): boolean
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    getTooltipMarkup(): string | null
    getTooltipText(): string | null
    getTooltipWindow(): Gtk.Window
    getToplevel(): Gtk.Widget
    getValign(): Gtk.Align
    getValignWithBaseline(): Gtk.Align
    getVexpand(): boolean
    getVexpandSet(): boolean
    getVisible(): boolean
    getVisual(): Gdk.Visual
    getWindow(): Gdk.Window | null
    grabAdd(): void
    grabDefault(): void
    grabFocus(): void
    grabRemove(): void
    hasGrab(): boolean
    hasRcStyle(): boolean
    hasScreen(): boolean
    hasVisibleFocus(): boolean
    hide(): void
    hideOnDelete(): boolean
    inDestruction(): boolean
    initTemplate(): void
    inputShapeCombineRegion(region?: cairo.Region | null): void
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    intersect(area: Gdk.Rectangle): [ /* returnType */ boolean, /* intersection */ Gdk.Rectangle | null ]
    isAncestor(ancestor: Gtk.Widget): boolean
    isComposited(): boolean
    isDrawable(): boolean
    isSensitive(): boolean
    isToplevel(): boolean
    isVisible(): boolean
    keynavFailed(direction: Gtk.DirectionType): boolean
    listAccelClosures(): Function
    listActionPrefixes(): string[]
    listMnemonicLabels(): Gtk.Widget[]
    map(): void
    mnemonicActivate(groupCycling: boolean): boolean
    modifyBase(state: Gtk.StateType, color?: Gdk.Color | null): void
    modifyBg(state: Gtk.StateType, color?: Gdk.Color | null): void
    modifyCursor(primary?: Gdk.Color | null, secondary?: Gdk.Color | null): void
    modifyFg(state: Gtk.StateType, color?: Gdk.Color | null): void
    modifyFont(fontDesc?: Pango.FontDescription | null): void
    modifyStyle(style: Gtk.RcStyle): void
    modifyText(state: Gtk.StateType, color?: Gdk.Color | null): void
    overrideBackgroundColor(state: Gtk.StateFlags, color?: Gdk.RGBA | null): void
    overrideColor(state: Gtk.StateFlags, color?: Gdk.RGBA | null): void
    overrideCursor(cursor?: Gdk.RGBA | null, secondaryCursor?: Gdk.RGBA | null): void
    overrideFont(fontDesc?: Pango.FontDescription | null): void
    overrideSymbolicColor(name: string, color?: Gdk.RGBA | null): void
    path(): [ /* pathLength */ number | null, /* path */ string | null, /* pathReversed */ string | null ]
    queueAllocate(): void
    queueComputeExpand(): void
    queueDraw(): void
    queueDrawArea(x: number, y: number, width: number, height: number): void
    queueDrawRegion(region: cairo.Region): void
    queueResize(): void
    queueResizeNoRedraw(): void
    realize(): void
    regionIntersect(region: cairo.Region): cairo.Region
    registerWindow(window: Gdk.Window): void
    removeAccelerator(accelGroup: Gtk.AccelGroup, accelKey: number, accelMods: Gdk.ModifierType): boolean
    removeMnemonicLabel(label: Gtk.Widget): void
    removeTickCallback(id: number): void
    renderIcon(stockId: string, size: number, detail?: string | null): GdkPixbuf.Pixbuf | null
    renderIconPixbuf(stockId: string, size: number): GdkPixbuf.Pixbuf | null
    reparent(newParent: Gtk.Widget): void
    resetRcStyles(): void
    resetStyle(): void
    sendExpose(event: Gdk.Event): number
    sendFocusChange(event: Gdk.Event): boolean
    setAccelPath(accelPath?: string | null, accelGroup?: Gtk.AccelGroup | null): void
    setAllocation(allocation: Gtk.Allocation): void
    setAppPaintable(appPaintable: boolean): void
    setCanDefault(canDefault: boolean): void
    setCanFocus(canFocus: boolean): void
    setChildVisible(isVisible: boolean): void
    setClip(clip: Gtk.Allocation): void
    setCompositeName(name: string): void
    setDeviceEnabled(device: Gdk.Device, enabled: boolean): void
    setDeviceEvents(device: Gdk.Device, events: Gdk.EventMask): void
    setDirection(dir: Gtk.TextDirection): void
    setDoubleBuffered(doubleBuffered: boolean): void
    setEvents(events: number): void
    setFocusOnClick(focusOnClick: boolean): void
    setFontMap(fontMap?: Pango.FontMap | null): void
    setFontOptions(options?: cairo.FontOptions | null): void
    setHalign(align: Gtk.Align): void
    setHasTooltip(hasTooltip: boolean): void
    setHasWindow(hasWindow: boolean): void
    setHexpand(expand: boolean): void
    setHexpandSet(set: boolean): void
    setMapped(mapped: boolean): void
    setMarginBottom(margin: number): void
    setMarginEnd(margin: number): void
    setMarginLeft(margin: number): void
    setMarginRight(margin: number): void
    setMarginStart(margin: number): void
    setMarginTop(margin: number): void
    setName(name: string): void
    setNoShowAll(noShowAll: boolean): void
    setOpacity(opacity: number): void
    setParent(parent: Gtk.Widget): void
    setParentWindow(parentWindow: Gdk.Window): void
    setRealized(realized: boolean): void
    setReceivesDefault(receivesDefault: boolean): void
    setRedrawOnAllocate(redrawOnAllocate: boolean): void
    setSensitive(sensitive: boolean): void
    setSizeRequest(width: number, height: number): void
    setState(state: Gtk.StateType): void
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    setStyle(style?: Gtk.Style | null): void
    setSupportMultidevice(supportMultidevice: boolean): void
    setTooltipMarkup(markup?: string | null): void
    setTooltipText(text?: string | null): void
    setTooltipWindow(customWindow?: Gtk.Window | null): void
    setValign(align: Gtk.Align): void
    setVexpand(expand: boolean): void
    setVexpandSet(set: boolean): void
    setVisible(visible: boolean): void
    setVisual(visual?: Gdk.Visual | null): void
    setWindow(window: Gdk.Window): void
    shapeCombineRegion(region?: cairo.Region | null): void
    show(): void
    showAll(): void
    showNow(): void
    sizeAllocate(allocation: Gtk.Allocation): void
    sizeAllocateWithBaseline(allocation: Gtk.Allocation, baseline: number): void
    sizeRequest(): /* requisition */ Gtk.Requisition
    styleAttach(): void
    styleGetProperty(propertyName: string, value: any): void
    thawChildNotify(): void
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    triggerTooltipQuery(): void
    unmap(): void
    unparent(): void
    unrealize(): void
    unregisterWindow(window: Gdk.Window): void
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gtk.Buildable */
    addChild(builder: Gtk.Builder, child: GObject.Object, type?: string | null): void
    constructChild(builder: Gtk.Builder, name: string): GObject.Object
    customFinished(builder: Gtk.Builder, child: GObject.Object | null, tagname: string, data?: object | null): void
    customTagEnd(builder: Gtk.Builder, child: GObject.Object | null, tagname: string, data?: object | null): void
    customTagStart(builder: Gtk.Builder, child: GObject.Object | null, tagname: string): [ /* returnType */ boolean, /* parser */ GLib.MarkupParser, /* data */ object | null ]
    getInternalChild(builder: Gtk.Builder, childname: string): GObject.Object
    parserFinished(builder: Gtk.Builder): void
    setBuildableProperty(builder: Gtk.Builder, name: string, value: any): void
    /* Methods of Gtk.Scrollable */
    getBorder(): [ /* returnType */ boolean, /* border */ Gtk.Border ]
    getHadjustment(): Gtk.Adjustment
    getHscrollPolicy(): Gtk.ScrollablePolicy
    getVadjustment(): Gtk.Adjustment
    getVscrollPolicy(): Gtk.ScrollablePolicy
    setHadjustment(hadjustment?: Gtk.Adjustment | null): void
    setHscrollPolicy(policy: Gtk.ScrollablePolicy): void
    setVadjustment(vadjustment?: Gtk.Adjustment | null): void
    setVscrollPolicy(policy: Gtk.ScrollablePolicy): void
    /* Virtual methods of WebKit.WebView */
    vfuncChooseFile(frame: WebFrame, oldFile: string): string
    vfuncCloseWebView(): boolean
    vfuncConsoleMessage(message: string, lineNumber: number, sourceId: string): boolean
    vfuncCopyClipboard(): void
    vfuncCutClipboard(): void
    vfuncEnteringFullscreen(): boolean
    vfuncLeavingFullscreen(): boolean
    vfuncMoveCursor(step: Gtk.MovementStep, count: number): boolean
    vfuncNavigationRequested(frame: WebFrame, request: NetworkRequest): NavigationResponse
    vfuncPasteClipboard(): void
    vfuncRedo(): void
    vfuncRunFileChooser(request: FileChooserRequest): boolean
    vfuncScriptAlert(frame: WebFrame, alertMessage: string): boolean
    vfuncScriptConfirm(frame: WebFrame, confirmMessage: string, didConfirm: boolean): boolean
    vfuncScriptPrompt(frame: WebFrame, message: string, defaultValue: string, value: string): boolean
    vfuncSelectAll(): void
    vfuncSetScrollAdjustments(hadjustment: Gtk.Adjustment, vadjustment: Gtk.Adjustment): void
    vfuncShouldAllowEditingAction(): boolean
    vfuncUndo(): void
    vfuncWebViewReady(): boolean
    vfuncAddChild(builder: Gtk.Builder, child: GObject.Object, type?: string | null): void
    vfuncConstructChild(builder: Gtk.Builder, name: string): GObject.Object
    vfuncCustomFinished(builder: Gtk.Builder, child: GObject.Object | null, tagname: string, data?: object | null): void
    vfuncCustomTagEnd(builder: Gtk.Builder, child: GObject.Object | null, tagname: string, data?: object | null): void
    vfuncCustomTagStart(builder: Gtk.Builder, child: GObject.Object | null, tagname: string): [ /* returnType */ boolean, /* parser */ GLib.MarkupParser, /* data */ object | null ]
    vfuncGetInternalChild(builder: Gtk.Builder, childname: string): GObject.Object
    vfuncGetName(): string
    vfuncParserFinished(builder: Gtk.Builder): void
    vfuncSetBuildableProperty(builder: Gtk.Builder, name: string, value: any): void
    vfuncSetName(name: string): void
    vfuncGetBorder(): [ /* returnType */ boolean, /* border */ Gtk.Border ]
    /* Virtual methods of Gtk.Container */
    vfuncAdd(widget: Gtk.Widget): void
    vfuncCheckResize(): void
    vfuncChildType(): GObject.Type
    vfuncCompositeName(child: Gtk.Widget): string
    vfuncForall(includeInternals: boolean, callback: Gtk.Callback): void
    vfuncGetChildProperty(child: Gtk.Widget, propertyId: number, value: any, pspec: GObject.ParamSpec): void
    vfuncGetPathForChild(child: Gtk.Widget): Gtk.WidgetPath
    vfuncRemove(widget: Gtk.Widget): void
    vfuncSetChildProperty(child: Gtk.Widget, propertyId: number, value: any, pspec: GObject.ParamSpec): void
    vfuncSetFocusChild(child?: Gtk.Widget | null): void
    /* Virtual methods of Gtk.Widget */
    vfuncAdjustBaselineAllocation(baseline: number): void
    vfuncAdjustBaselineRequest(minimumBaseline: number, naturalBaseline: number): void
    vfuncAdjustSizeAllocation(orientation: Gtk.Orientation, minimumSize: number, naturalSize: number, allocatedPos: number, allocatedSize: number): void
    vfuncAdjustSizeRequest(orientation: Gtk.Orientation, minimumSize: number, naturalSize: number): void
    vfuncButtonPressEvent(event: Gdk.EventButton): boolean
    vfuncButtonReleaseEvent(event: Gdk.EventButton): boolean
    vfuncCanActivateAccel(signalId: number): boolean
    vfuncChildNotify(childProperty: GObject.ParamSpec): void
    vfuncCompositedChanged(): void
    vfuncComputeExpand(hexpandP: boolean, vexpandP: boolean): void
    vfuncConfigureEvent(event: Gdk.EventConfigure): boolean
    vfuncDamageEvent(event: Gdk.EventExpose): boolean
    vfuncDeleteEvent(event: Gdk.EventAny): boolean
    vfuncDestroy(): void
    vfuncDestroyEvent(event: Gdk.EventAny): boolean
    vfuncDirectionChanged(previousDirection: Gtk.TextDirection): void
    vfuncDispatchChildPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDragBegin(context: Gdk.DragContext): void
    vfuncDragDataDelete(context: Gdk.DragContext): void
    vfuncDragDataGet(context: Gdk.DragContext, selectionData: Gtk.SelectionData, info: number, time: number): void
    vfuncDragDataReceived(context: Gdk.DragContext, x: number, y: number, selectionData: Gtk.SelectionData, info: number, time: number): void
    vfuncDragDrop(context: Gdk.DragContext, x: number, y: number, time: number): boolean
    vfuncDragEnd(context: Gdk.DragContext): void
    vfuncDragFailed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
    vfuncDragLeave(context: Gdk.DragContext, time: number): void
    vfuncDragMotion(context: Gdk.DragContext, x: number, y: number, time: number): boolean
    vfuncDraw(cr: cairo.Context): boolean
    vfuncEnterNotifyEvent(event: Gdk.EventCrossing): boolean
    vfuncEvent(event: Gdk.Event): boolean
    vfuncFocus(direction: Gtk.DirectionType): boolean
    vfuncFocusInEvent(event: Gdk.EventFocus): boolean
    vfuncFocusOutEvent(event: Gdk.EventFocus): boolean
    vfuncGetAccessible(): Atk.Object
    vfuncGetPreferredHeight(): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null ]
    vfuncGetPreferredHeightAndBaselineForWidth(width: number): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    vfuncGetPreferredHeightForWidth(width: number): [ /* minimumHeight */ number | null, /* naturalHeight */ number | null ]
    vfuncGetPreferredWidth(): [ /* minimumWidth */ number | null, /* naturalWidth */ number | null ]
    vfuncGetPreferredWidthForHeight(height: number): [ /* minimumWidth */ number | null, /* naturalWidth */ number | null ]
    vfuncGetRequestMode(): Gtk.SizeRequestMode
    vfuncGrabBrokenEvent(event: Gdk.EventGrabBroken): boolean
    vfuncGrabFocus(): void
    vfuncGrabNotify(wasGrabbed: boolean): void
    vfuncHide(): void
    vfuncHierarchyChanged(previousToplevel: Gtk.Widget): void
    vfuncKeyPressEvent(event: Gdk.EventKey): boolean
    vfuncKeyReleaseEvent(event: Gdk.EventKey): boolean
    vfuncKeynavFailed(direction: Gtk.DirectionType): boolean
    vfuncLeaveNotifyEvent(event: Gdk.EventCrossing): boolean
    vfuncMap(): void
    vfuncMapEvent(event: Gdk.EventAny): boolean
    vfuncMnemonicActivate(groupCycling: boolean): boolean
    vfuncMotionNotifyEvent(event: Gdk.EventMotion): boolean
    vfuncMoveFocus(direction: Gtk.DirectionType): void
    vfuncParentSet(previousParent: Gtk.Widget): void
    vfuncPopupMenu(): boolean
    vfuncPropertyNotifyEvent(event: Gdk.EventProperty): boolean
    vfuncProximityInEvent(event: Gdk.EventProximity): boolean
    vfuncProximityOutEvent(event: Gdk.EventProximity): boolean
    vfuncQueryTooltip(x: number, y: number, keyboardTooltip: boolean, tooltip: Gtk.Tooltip): boolean
    vfuncQueueDrawRegion(region: cairo.Region): void
    vfuncRealize(): void
    vfuncScreenChanged(previousScreen: Gdk.Screen): void
    vfuncScrollEvent(event: Gdk.EventScroll): boolean
    vfuncSelectionClearEvent(event: Gdk.EventSelection): boolean
    vfuncSelectionGet(selectionData: Gtk.SelectionData, info: number, time: number): void
    vfuncSelectionNotifyEvent(event: Gdk.EventSelection): boolean
    vfuncSelectionReceived(selectionData: Gtk.SelectionData, time: number): void
    vfuncSelectionRequestEvent(event: Gdk.EventSelection): boolean
    vfuncShow(): void
    vfuncShowAll(): void
    vfuncShowHelp(helpType: Gtk.WidgetHelpType): boolean
    vfuncSizeAllocate(allocation: Gtk.Allocation): void
    vfuncStateChanged(previousState: Gtk.StateType): void
    vfuncStateFlagsChanged(previousStateFlags: Gtk.StateFlags): void
    vfuncStyleSet(previousStyle: Gtk.Style): void
    vfuncStyleUpdated(): void
    vfuncTouchEvent(event: Gdk.EventTouch): boolean
    vfuncUnmap(): void
    vfuncUnmapEvent(event: Gdk.EventAny): boolean
    vfuncUnrealize(): void
    vfuncVisibilityNotifyEvent(event: Gdk.EventVisibility): boolean
    vfuncWindowStateEvent(event: Gdk.EventWindowState): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of WebKit.WebView */
    connect(sigName: "close-web-view", callback: (($obj: WebView) => boolean)): number
    connect_after(sigName: "close-web-view", callback: (($obj: WebView) => boolean)): number
    emit(sigName: "close-web-view"): void
    on(sigName: "close-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "close-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "close-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "console-message", callback: (($obj: WebView, message: string, line: number, sourceId: string) => boolean)): number
    connect_after(sigName: "console-message", callback: (($obj: WebView, message: string, line: number, sourceId: string) => boolean)): number
    emit(sigName: "console-message", message: string, line: number, sourceId: string): void
    on(sigName: "console-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "console-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "console-message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "context-menu", callback: (($obj: WebView, defaultMenu: Gtk.Widget, hitTestResult: HitTestResult, triggeredWithKeyboard: boolean) => boolean)): number
    connect_after(sigName: "context-menu", callback: (($obj: WebView, defaultMenu: Gtk.Widget, hitTestResult: HitTestResult, triggeredWithKeyboard: boolean) => boolean)): number
    emit(sigName: "context-menu", defaultMenu: Gtk.Widget, hitTestResult: HitTestResult, triggeredWithKeyboard: boolean): void
    on(sigName: "context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "context-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "copy-clipboard", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "copy-clipboard", callback: (($obj: WebView) => void)): number
    emit(sigName: "copy-clipboard"): void
    on(sigName: "copy-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "copy-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "copy-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "create-plugin-widget", callback: (($obj: WebView, mimeType: string, uri: string, param: GLib.HashTable) => Gtk.Widget)): number
    connect_after(sigName: "create-plugin-widget", callback: (($obj: WebView, mimeType: string, uri: string, param: GLib.HashTable) => Gtk.Widget)): number
    emit(sigName: "create-plugin-widget", mimeType: string, uri: string, param: GLib.HashTable): void
    on(sigName: "create-plugin-widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "create-plugin-widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "create-plugin-widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "create-web-view", callback: (($obj: WebView, frame: WebFrame) => WebView)): number
    connect_after(sigName: "create-web-view", callback: (($obj: WebView, frame: WebFrame) => WebView)): number
    emit(sigName: "create-web-view", frame: WebFrame): void
    on(sigName: "create-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "create-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "create-web-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "cut-clipboard", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "cut-clipboard", callback: (($obj: WebView) => void)): number
    emit(sigName: "cut-clipboard"): void
    on(sigName: "cut-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "cut-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "cut-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "database-quota-exceeded", callback: (($obj: WebView, frame: GObject.Object, database: GObject.Object) => void)): number
    connect_after(sigName: "database-quota-exceeded", callback: (($obj: WebView, frame: GObject.Object, database: GObject.Object) => void)): number
    emit(sigName: "database-quota-exceeded", frame: GObject.Object, database: GObject.Object): void
    on(sigName: "database-quota-exceeded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "database-quota-exceeded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "database-quota-exceeded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "document-load-finished", callback: (($obj: WebView, webFrame: WebFrame) => void)): number
    connect_after(sigName: "document-load-finished", callback: (($obj: WebView, webFrame: WebFrame) => void)): number
    emit(sigName: "document-load-finished", webFrame: WebFrame): void
    on(sigName: "document-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "document-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "document-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "download-requested", callback: (($obj: WebView, download: Download) => boolean)): number
    connect_after(sigName: "download-requested", callback: (($obj: WebView, download: Download) => boolean)): number
    emit(sigName: "download-requested", download: Download): void
    on(sigName: "download-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "download-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "download-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "editing-began", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "editing-began", callback: (($obj: WebView) => void)): number
    emit(sigName: "editing-began"): void
    on(sigName: "editing-began", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "editing-began", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "editing-began", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "editing-ended", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "editing-ended", callback: (($obj: WebView) => void)): number
    emit(sigName: "editing-ended"): void
    on(sigName: "editing-ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "editing-ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "editing-ended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "entering-fullscreen", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    connect_after(sigName: "entering-fullscreen", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    emit(sigName: "entering-fullscreen", element: DOMHTMLElement): void
    on(sigName: "entering-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "entering-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "entering-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "frame-created", callback: (($obj: WebView, webFrame: WebFrame) => void)): number
    connect_after(sigName: "frame-created", callback: (($obj: WebView, webFrame: WebFrame) => void)): number
    emit(sigName: "frame-created", webFrame: WebFrame): void
    on(sigName: "frame-created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "frame-created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "frame-created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "geolocation-policy-decision-cancelled", callback: (($obj: WebView, frame: WebFrame) => void)): number
    connect_after(sigName: "geolocation-policy-decision-cancelled", callback: (($obj: WebView, frame: WebFrame) => void)): number
    emit(sigName: "geolocation-policy-decision-cancelled", frame: WebFrame): void
    on(sigName: "geolocation-policy-decision-cancelled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "geolocation-policy-decision-cancelled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "geolocation-policy-decision-cancelled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "geolocation-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, policyDecision: GeolocationPolicyDecision) => boolean)): number
    connect_after(sigName: "geolocation-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, policyDecision: GeolocationPolicyDecision) => boolean)): number
    emit(sigName: "geolocation-policy-decision-requested", frame: WebFrame, policyDecision: GeolocationPolicyDecision): void
    on(sigName: "geolocation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "geolocation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "geolocation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "hovering-over-link", callback: (($obj: WebView, title: string, uri: string) => void)): number
    connect_after(sigName: "hovering-over-link", callback: (($obj: WebView, title: string, uri: string) => void)): number
    emit(sigName: "hovering-over-link", title: string, uri: string): void
    on(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "hovering-over-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "icon-loaded", callback: (($obj: WebView, iconUri: string) => void)): number
    connect_after(sigName: "icon-loaded", callback: (($obj: WebView, iconUri: string) => void)): number
    emit(sigName: "icon-loaded", iconUri: string): void
    on(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "icon-loaded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "leaving-fullscreen", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    connect_after(sigName: "leaving-fullscreen", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    emit(sigName: "leaving-fullscreen", element: DOMHTMLElement): void
    on(sigName: "leaving-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "leaving-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "leaving-fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-committed", callback: (($obj: WebView, frame: WebFrame) => void)): number
    connect_after(sigName: "load-committed", callback: (($obj: WebView, frame: WebFrame) => void)): number
    emit(sigName: "load-committed", frame: WebFrame): void
    on(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-committed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-error", callback: (($obj: WebView, webFrame: WebFrame, uri: string, webError: GLib.Error) => boolean)): number
    connect_after(sigName: "load-error", callback: (($obj: WebView, webFrame: WebFrame, uri: string, webError: GLib.Error) => boolean)): number
    emit(sigName: "load-error", webFrame: WebFrame, uri: string, webError: GLib.Error): void
    on(sigName: "load-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-finished", callback: (($obj: WebView, frame: WebFrame) => void)): number
    connect_after(sigName: "load-finished", callback: (($obj: WebView, frame: WebFrame) => void)): number
    emit(sigName: "load-finished", frame: WebFrame): void
    on(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-progress-changed", callback: (($obj: WebView, progress: number) => void)): number
    connect_after(sigName: "load-progress-changed", callback: (($obj: WebView, progress: number) => void)): number
    emit(sigName: "load-progress-changed", progress: number): void
    on(sigName: "load-progress-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-progress-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-progress-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "load-started", callback: (($obj: WebView, frame: WebFrame) => void)): number
    connect_after(sigName: "load-started", callback: (($obj: WebView, frame: WebFrame) => void)): number
    emit(sigName: "load-started", frame: WebFrame): void
    on(sigName: "load-started", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "load-started", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "load-started", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "mime-type-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, mimetype: string, policyDecision: WebPolicyDecision) => boolean)): number
    connect_after(sigName: "mime-type-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, mimetype: string, policyDecision: WebPolicyDecision) => boolean)): number
    emit(sigName: "mime-type-policy-decision-requested", frame: WebFrame, request: NetworkRequest, mimetype: string, policyDecision: WebPolicyDecision): void
    on(sigName: "mime-type-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "mime-type-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "mime-type-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "move-cursor", callback: (($obj: WebView, step: Gtk.MovementStep, count: number) => boolean)): number
    connect_after(sigName: "move-cursor", callback: (($obj: WebView, step: Gtk.MovementStep, count: number) => boolean)): number
    emit(sigName: "move-cursor", step: Gtk.MovementStep, count: number): void
    on(sigName: "move-cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "move-cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "move-cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "navigation-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision) => boolean)): number
    connect_after(sigName: "navigation-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision) => boolean)): number
    emit(sigName: "navigation-policy-decision-requested", frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision): void
    on(sigName: "navigation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "navigation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "navigation-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "navigation-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest) => NavigationResponse)): number
    connect_after(sigName: "navigation-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest) => NavigationResponse)): number
    emit(sigName: "navigation-requested", frame: WebFrame, request: NetworkRequest): void
    on(sigName: "navigation-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "navigation-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "navigation-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "new-window-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision) => boolean)): number
    connect_after(sigName: "new-window-policy-decision-requested", callback: (($obj: WebView, frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision) => boolean)): number
    emit(sigName: "new-window-policy-decision-requested", frame: WebFrame, request: NetworkRequest, navigationAction: WebNavigationAction, policyDecision: WebPolicyDecision): void
    on(sigName: "new-window-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "new-window-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "new-window-policy-decision-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "onload-event", callback: (($obj: WebView, frame: WebFrame) => void)): number
    connect_after(sigName: "onload-event", callback: (($obj: WebView, frame: WebFrame) => void)): number
    emit(sigName: "onload-event", frame: WebFrame): void
    on(sigName: "onload-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "onload-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "onload-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "paste-clipboard", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "paste-clipboard", callback: (($obj: WebView) => void)): number
    emit(sigName: "paste-clipboard"): void
    on(sigName: "paste-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "paste-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "paste-clipboard", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "populate-popup", callback: (($obj: WebView, menu: Gtk.Menu) => void)): number
    connect_after(sigName: "populate-popup", callback: (($obj: WebView, menu: Gtk.Menu) => void)): number
    emit(sigName: "populate-popup", menu: Gtk.Menu): void
    on(sigName: "populate-popup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "populate-popup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "populate-popup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "print-requested", callback: (($obj: WebView, webFrame: WebFrame) => boolean)): number
    connect_after(sigName: "print-requested", callback: (($obj: WebView, webFrame: WebFrame) => boolean)): number
    emit(sigName: "print-requested", webFrame: WebFrame): void
    on(sigName: "print-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "print-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "print-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "redo", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "redo", callback: (($obj: WebView) => void)): number
    emit(sigName: "redo"): void
    on(sigName: "redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-content-length-received", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, lengthReceived: number) => void)): number
    connect_after(sigName: "resource-content-length-received", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, lengthReceived: number) => void)): number
    emit(sigName: "resource-content-length-received", webFrame: WebFrame, webResource: WebResource, lengthReceived: number): void
    on(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-content-length-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-load-failed", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, error: GLib.Error) => void)): number
    connect_after(sigName: "resource-load-failed", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, error: GLib.Error) => void)): number
    emit(sigName: "resource-load-failed", webFrame: WebFrame, webResource: WebResource, error: GLib.Error): void
    on(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-load-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-load-finished", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource) => void)): number
    connect_after(sigName: "resource-load-finished", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource) => void)): number
    emit(sigName: "resource-load-finished", webFrame: WebFrame, webResource: WebResource): void
    on(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-load-finished", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-request-starting", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, request: NetworkRequest, response: NetworkResponse) => void)): number
    connect_after(sigName: "resource-request-starting", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, request: NetworkRequest, response: NetworkResponse) => void)): number
    emit(sigName: "resource-request-starting", webFrame: WebFrame, webResource: WebResource, request: NetworkRequest, response: NetworkResponse): void
    on(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-request-starting", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "resource-response-received", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, response: NetworkResponse) => void)): number
    connect_after(sigName: "resource-response-received", callback: (($obj: WebView, webFrame: WebFrame, webResource: WebResource, response: NetworkResponse) => void)): number
    emit(sigName: "resource-response-received", webFrame: WebFrame, webResource: WebResource, response: NetworkResponse): void
    on(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "resource-response-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "run-file-chooser", callback: (($obj: WebView, request: FileChooserRequest) => boolean)): number
    connect_after(sigName: "run-file-chooser", callback: (($obj: WebView, request: FileChooserRequest) => boolean)): number
    emit(sigName: "run-file-chooser", request: FileChooserRequest): void
    on(sigName: "run-file-chooser", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "run-file-chooser", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "run-file-chooser", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "script-alert", callback: (($obj: WebView, frame: WebFrame, message: string) => boolean)): number
    connect_after(sigName: "script-alert", callback: (($obj: WebView, frame: WebFrame, message: string) => boolean)): number
    emit(sigName: "script-alert", frame: WebFrame, message: string): void
    on(sigName: "script-alert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "script-alert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "script-alert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "script-confirm", callback: (($obj: WebView, frame: WebFrame, message: string, confirmed: object) => boolean)): number
    connect_after(sigName: "script-confirm", callback: (($obj: WebView, frame: WebFrame, message: string, confirmed: object) => boolean)): number
    emit(sigName: "script-confirm", frame: WebFrame, message: string, confirmed: object): void
    on(sigName: "script-confirm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "script-confirm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "script-confirm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "script-prompt", callback: (($obj: WebView, frame: WebFrame, message: string, default_: string, text: object) => boolean)): number
    connect_after(sigName: "script-prompt", callback: (($obj: WebView, frame: WebFrame, message: string, default_: string, text: object) => boolean)): number
    emit(sigName: "script-prompt", frame: WebFrame, message: string, default_: string, text: object): void
    on(sigName: "script-prompt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "script-prompt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "script-prompt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "select-all", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "select-all", callback: (($obj: WebView) => void)): number
    emit(sigName: "select-all"): void
    on(sigName: "select-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "select-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "select-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-changed", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "selection-changed", callback: (($obj: WebView) => void)): number
    emit(sigName: "selection-changed"): void
    on(sigName: "selection-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-apply-style", callback: (($obj: WebView, set: DOMCSSStyleDeclaration, range: DOMRange) => boolean)): number
    connect_after(sigName: "should-apply-style", callback: (($obj: WebView, set: DOMCSSStyleDeclaration, range: DOMRange) => boolean)): number
    emit(sigName: "should-apply-style", set: DOMCSSStyleDeclaration, range: DOMRange): void
    on(sigName: "should-apply-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-apply-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-apply-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-begin-editing", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    connect_after(sigName: "should-begin-editing", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    emit(sigName: "should-begin-editing", range: DOMRange): void
    on(sigName: "should-begin-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-begin-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-begin-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-change-selected-range", callback: (($obj: WebView, fromRange: DOMRange, toRange: DOMRange, affinity: SelectionAffinity, stillSelecting: boolean) => boolean)): number
    connect_after(sigName: "should-change-selected-range", callback: (($obj: WebView, fromRange: DOMRange, toRange: DOMRange, affinity: SelectionAffinity, stillSelecting: boolean) => boolean)): number
    emit(sigName: "should-change-selected-range", fromRange: DOMRange, toRange: DOMRange, affinity: SelectionAffinity, stillSelecting: boolean): void
    on(sigName: "should-change-selected-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-change-selected-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-change-selected-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-delete-range", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    connect_after(sigName: "should-delete-range", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    emit(sigName: "should-delete-range", range: DOMRange): void
    on(sigName: "should-delete-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-delete-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-delete-range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-end-editing", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    connect_after(sigName: "should-end-editing", callback: (($obj: WebView, range: DOMRange) => boolean)): number
    emit(sigName: "should-end-editing", range: DOMRange): void
    on(sigName: "should-end-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-end-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-end-editing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-insert-node", callback: (($obj: WebView, node: DOMNode, range: DOMRange, action: InsertAction) => boolean)): number
    connect_after(sigName: "should-insert-node", callback: (($obj: WebView, node: DOMNode, range: DOMRange, action: InsertAction) => boolean)): number
    emit(sigName: "should-insert-node", node: DOMNode, range: DOMRange, action: InsertAction): void
    on(sigName: "should-insert-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-insert-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-insert-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-insert-text", callback: (($obj: WebView, string: string, range: DOMRange, action: InsertAction) => boolean)): number
    connect_after(sigName: "should-insert-text", callback: (($obj: WebView, string: string, range: DOMRange, action: InsertAction) => boolean)): number
    emit(sigName: "should-insert-text", string: string, range: DOMRange, action: InsertAction): void
    on(sigName: "should-insert-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-insert-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-insert-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "should-show-delete-interface-for-element", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    connect_after(sigName: "should-show-delete-interface-for-element", callback: (($obj: WebView, element: DOMHTMLElement) => boolean)): number
    emit(sigName: "should-show-delete-interface-for-element", element: DOMHTMLElement): void
    on(sigName: "should-show-delete-interface-for-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "should-show-delete-interface-for-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "should-show-delete-interface-for-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "status-bar-text-changed", callback: (($obj: WebView, object: string) => void)): number
    connect_after(sigName: "status-bar-text-changed", callback: (($obj: WebView, object: string) => void)): number
    emit(sigName: "status-bar-text-changed", object: string): void
    on(sigName: "status-bar-text-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "status-bar-text-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "status-bar-text-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "title-changed", callback: (($obj: WebView, frame: WebFrame, title: string) => void)): number
    connect_after(sigName: "title-changed", callback: (($obj: WebView, frame: WebFrame, title: string) => void)): number
    emit(sigName: "title-changed", frame: WebFrame, title: string): void
    on(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "title-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "undo", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "undo", callback: (($obj: WebView) => void)): number
    emit(sigName: "undo"): void
    on(sigName: "undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "user-changed-contents", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "user-changed-contents", callback: (($obj: WebView) => void)): number
    emit(sigName: "user-changed-contents"): void
    on(sigName: "user-changed-contents", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "user-changed-contents", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "user-changed-contents", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "viewport-attributes-changed", callback: (($obj: WebView, object: ViewportAttributes) => void)): number
    connect_after(sigName: "viewport-attributes-changed", callback: (($obj: WebView, object: ViewportAttributes) => void)): number
    emit(sigName: "viewport-attributes-changed", object: ViewportAttributes): void
    on(sigName: "viewport-attributes-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "viewport-attributes-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "viewport-attributes-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "viewport-attributes-recompute-requested", callback: (($obj: WebView, object: ViewportAttributes) => void)): number
    connect_after(sigName: "viewport-attributes-recompute-requested", callback: (($obj: WebView, object: ViewportAttributes) => void)): number
    emit(sigName: "viewport-attributes-recompute-requested", object: ViewportAttributes): void
    on(sigName: "viewport-attributes-recompute-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "viewport-attributes-recompute-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "viewport-attributes-recompute-requested", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "web-view-ready", callback: (($obj: WebView) => boolean)): number
    connect_after(sigName: "web-view-ready", callback: (($obj: WebView) => boolean)): number
    emit(sigName: "web-view-ready"): void
    on(sigName: "web-view-ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "web-view-ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "web-view-ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "window-object-cleared", callback: (($obj: WebView, frame: WebFrame, context: object, windowObject: object) => void)): number
    connect_after(sigName: "window-object-cleared", callback: (($obj: WebView, frame: WebFrame, context: object, windowObject: object) => void)): number
    emit(sigName: "window-object-cleared", frame: WebFrame, context: object, windowObject: object): void
    on(sigName: "window-object-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "window-object-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "window-object-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of Gtk.Container */
    connect(sigName: "add", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    connect_after(sigName: "add", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    emit(sigName: "add", object: Gtk.Widget): void
    on(sigName: "add", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "add", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "add", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "check-resize", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "check-resize", callback: (($obj: WebView) => void)): number
    emit(sigName: "check-resize"): void
    on(sigName: "check-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "check-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "check-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "remove", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    connect_after(sigName: "remove", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    emit(sigName: "remove", object: Gtk.Widget): void
    on(sigName: "remove", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "remove", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "remove", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "set-focus-child", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    connect_after(sigName: "set-focus-child", callback: (($obj: WebView, object: Gtk.Widget) => void)): number
    emit(sigName: "set-focus-child", object: Gtk.Widget): void
    on(sigName: "set-focus-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "set-focus-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "set-focus-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of Gtk.Widget */
    connect(sigName: "accel-closures-changed", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "accel-closures-changed", callback: (($obj: WebView) => void)): number
    emit(sigName: "accel-closures-changed"): void
    on(sigName: "accel-closures-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "accel-closures-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "accel-closures-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "button-press-event", callback: (($obj: WebView, event: Gdk.EventButton) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: WebView, event: Gdk.EventButton) => boolean)): number
    emit(sigName: "button-press-event", event: Gdk.EventButton): void
    on(sigName: "button-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "button-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "button-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "button-release-event", callback: (($obj: WebView, event: Gdk.EventButton) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: WebView, event: Gdk.EventButton) => boolean)): number
    emit(sigName: "button-release-event", event: Gdk.EventButton): void
    on(sigName: "button-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "button-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "button-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "can-activate-accel", callback: (($obj: WebView, signalId: number) => boolean)): number
    connect_after(sigName: "can-activate-accel", callback: (($obj: WebView, signalId: number) => boolean)): number
    emit(sigName: "can-activate-accel", signalId: number): void
    on(sigName: "can-activate-accel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "can-activate-accel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "can-activate-accel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "child-notify", callback: (($obj: WebView, childProperty: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: WebView, childProperty: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", childProperty: GObject.ParamSpec): void
    on(sigName: "child-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "child-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "child-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "composited-changed", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "composited-changed", callback: (($obj: WebView) => void)): number
    emit(sigName: "composited-changed"): void
    on(sigName: "composited-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "composited-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "composited-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "configure-event", callback: (($obj: WebView, event: Gdk.EventConfigure) => boolean)): number
    connect_after(sigName: "configure-event", callback: (($obj: WebView, event: Gdk.EventConfigure) => boolean)): number
    emit(sigName: "configure-event", event: Gdk.EventConfigure): void
    on(sigName: "configure-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "configure-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "configure-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "damage-event", callback: (($obj: WebView, event: Gdk.EventExpose) => boolean)): number
    connect_after(sigName: "damage-event", callback: (($obj: WebView, event: Gdk.EventExpose) => boolean)): number
    emit(sigName: "damage-event", event: Gdk.EventExpose): void
    on(sigName: "damage-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "damage-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "damage-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "delete-event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    connect_after(sigName: "delete-event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    emit(sigName: "delete-event", event: Gdk.Event): void
    on(sigName: "delete-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "delete-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "delete-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "destroy", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: WebView) => void)): number
    emit(sigName: "destroy"): void
    on(sigName: "destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "destroy-event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    connect_after(sigName: "destroy-event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    emit(sigName: "destroy-event", event: Gdk.Event): void
    on(sigName: "destroy-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "destroy-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "destroy-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "direction-changed", callback: (($obj: WebView, previousDirection: Gtk.TextDirection) => void)): number
    connect_after(sigName: "direction-changed", callback: (($obj: WebView, previousDirection: Gtk.TextDirection) => void)): number
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    on(sigName: "direction-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-begin", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    connect_after(sigName: "drag-begin", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    emit(sigName: "drag-begin", context: Gdk.DragContext): void
    on(sigName: "drag-begin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-begin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-begin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-data-delete", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    connect_after(sigName: "drag-data-delete", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    emit(sigName: "drag-data-delete", context: Gdk.DragContext): void
    on(sigName: "drag-data-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-data-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-data-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-data-get", callback: (($obj: WebView, context: Gdk.DragContext, data: Gtk.SelectionData, info: number, time: number) => void)): number
    connect_after(sigName: "drag-data-get", callback: (($obj: WebView, context: Gdk.DragContext, data: Gtk.SelectionData, info: number, time: number) => void)): number
    emit(sigName: "drag-data-get", context: Gdk.DragContext, data: Gtk.SelectionData, info: number, time: number): void
    on(sigName: "drag-data-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-data-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-data-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-data-received", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, data: Gtk.SelectionData, info: number, time: number) => void)): number
    connect_after(sigName: "drag-data-received", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, data: Gtk.SelectionData, info: number, time: number) => void)): number
    emit(sigName: "drag-data-received", context: Gdk.DragContext, x: number, y: number, data: Gtk.SelectionData, info: number, time: number): void
    on(sigName: "drag-data-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-data-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-data-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-drop", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, time: number) => boolean)): number
    connect_after(sigName: "drag-drop", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, time: number) => boolean)): number
    emit(sigName: "drag-drop", context: Gdk.DragContext, x: number, y: number, time: number): void
    on(sigName: "drag-drop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-drop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-drop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-end", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    connect_after(sigName: "drag-end", callback: (($obj: WebView, context: Gdk.DragContext) => void)): number
    emit(sigName: "drag-end", context: Gdk.DragContext): void
    on(sigName: "drag-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-failed", callback: (($obj: WebView, context: Gdk.DragContext, result: Gtk.DragResult) => boolean)): number
    connect_after(sigName: "drag-failed", callback: (($obj: WebView, context: Gdk.DragContext, result: Gtk.DragResult) => boolean)): number
    emit(sigName: "drag-failed", context: Gdk.DragContext, result: Gtk.DragResult): void
    on(sigName: "drag-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-leave", callback: (($obj: WebView, context: Gdk.DragContext, time: number) => void)): number
    connect_after(sigName: "drag-leave", callback: (($obj: WebView, context: Gdk.DragContext, time: number) => void)): number
    emit(sigName: "drag-leave", context: Gdk.DragContext, time: number): void
    on(sigName: "drag-leave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-leave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-leave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "drag-motion", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, time: number) => boolean)): number
    connect_after(sigName: "drag-motion", callback: (($obj: WebView, context: Gdk.DragContext, x: number, y: number, time: number) => boolean)): number
    emit(sigName: "drag-motion", context: Gdk.DragContext, x: number, y: number, time: number): void
    on(sigName: "drag-motion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "drag-motion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "drag-motion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "draw", callback: (($obj: WebView, cr: cairo.Context) => boolean)): number
    connect_after(sigName: "draw", callback: (($obj: WebView, cr: cairo.Context) => boolean)): number
    emit(sigName: "draw", cr: cairo.Context): void
    on(sigName: "draw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "draw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "draw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "enter-notify-event", callback: (($obj: WebView, event: Gdk.EventCrossing) => boolean)): number
    connect_after(sigName: "enter-notify-event", callback: (($obj: WebView, event: Gdk.EventCrossing) => boolean)): number
    emit(sigName: "enter-notify-event", event: Gdk.EventCrossing): void
    on(sigName: "enter-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "enter-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "enter-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: WebView, event: Gdk.Event) => boolean)): number
    emit(sigName: "event", event: Gdk.Event): void
    on(sigName: "event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "event-after", callback: (($obj: WebView, event: Gdk.Event) => void)): number
    connect_after(sigName: "event-after", callback: (($obj: WebView, event: Gdk.Event) => void)): number
    emit(sigName: "event-after", event: Gdk.Event): void
    on(sigName: "event-after", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "event-after", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "event-after", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "focus", callback: (($obj: WebView, direction: Gtk.DirectionType) => boolean)): number
    connect_after(sigName: "focus", callback: (($obj: WebView, direction: Gtk.DirectionType) => boolean)): number
    emit(sigName: "focus", direction: Gtk.DirectionType): void
    on(sigName: "focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "focus-in-event", callback: (($obj: WebView, event: Gdk.EventFocus) => boolean)): number
    connect_after(sigName: "focus-in-event", callback: (($obj: WebView, event: Gdk.EventFocus) => boolean)): number
    emit(sigName: "focus-in-event", event: Gdk.EventFocus): void
    on(sigName: "focus-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "focus-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "focus-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "focus-out-event", callback: (($obj: WebView, event: Gdk.EventFocus) => boolean)): number
    connect_after(sigName: "focus-out-event", callback: (($obj: WebView, event: Gdk.EventFocus) => boolean)): number
    emit(sigName: "focus-out-event", event: Gdk.EventFocus): void
    on(sigName: "focus-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "focus-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "focus-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "grab-broken-event", callback: (($obj: WebView, event: Gdk.EventGrabBroken) => boolean)): number
    connect_after(sigName: "grab-broken-event", callback: (($obj: WebView, event: Gdk.EventGrabBroken) => boolean)): number
    emit(sigName: "grab-broken-event", event: Gdk.EventGrabBroken): void
    on(sigName: "grab-broken-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "grab-broken-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "grab-broken-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "grab-focus", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "grab-focus", callback: (($obj: WebView) => void)): number
    emit(sigName: "grab-focus"): void
    on(sigName: "grab-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "grab-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "grab-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "grab-notify", callback: (($obj: WebView, wasGrabbed: boolean) => void)): number
    connect_after(sigName: "grab-notify", callback: (($obj: WebView, wasGrabbed: boolean) => void)): number
    emit(sigName: "grab-notify", wasGrabbed: boolean): void
    on(sigName: "grab-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "grab-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "grab-notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "hide", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "hide", callback: (($obj: WebView) => void)): number
    emit(sigName: "hide"): void
    on(sigName: "hide", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "hide", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "hide", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "hierarchy-changed", callback: (($obj: WebView, previousToplevel?: Gtk.Widget | null) => void)): number
    connect_after(sigName: "hierarchy-changed", callback: (($obj: WebView, previousToplevel?: Gtk.Widget | null) => void)): number
    emit(sigName: "hierarchy-changed", previousToplevel?: Gtk.Widget | null): void
    on(sigName: "hierarchy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "hierarchy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "hierarchy-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "key-press-event", callback: (($obj: WebView, event: Gdk.EventKey) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: WebView, event: Gdk.EventKey) => boolean)): number
    emit(sigName: "key-press-event", event: Gdk.EventKey): void
    on(sigName: "key-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "key-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "key-press-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "key-release-event", callback: (($obj: WebView, event: Gdk.EventKey) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: WebView, event: Gdk.EventKey) => boolean)): number
    emit(sigName: "key-release-event", event: Gdk.EventKey): void
    on(sigName: "key-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "key-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "key-release-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "keynav-failed", callback: (($obj: WebView, direction: Gtk.DirectionType) => boolean)): number
    connect_after(sigName: "keynav-failed", callback: (($obj: WebView, direction: Gtk.DirectionType) => boolean)): number
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    on(sigName: "keynav-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "leave-notify-event", callback: (($obj: WebView, event: Gdk.EventCrossing) => boolean)): number
    connect_after(sigName: "leave-notify-event", callback: (($obj: WebView, event: Gdk.EventCrossing) => boolean)): number
    emit(sigName: "leave-notify-event", event: Gdk.EventCrossing): void
    on(sigName: "leave-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "leave-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "leave-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "map", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "map", callback: (($obj: WebView) => void)): number
    emit(sigName: "map"): void
    on(sigName: "map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "map-event", callback: (($obj: WebView, event: Gdk.EventAny) => boolean)): number
    connect_after(sigName: "map-event", callback: (($obj: WebView, event: Gdk.EventAny) => boolean)): number
    emit(sigName: "map-event", event: Gdk.EventAny): void
    on(sigName: "map-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "map-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "map-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "mnemonic-activate", callback: (($obj: WebView, groupCycling: boolean) => boolean)): number
    connect_after(sigName: "mnemonic-activate", callback: (($obj: WebView, groupCycling: boolean) => boolean)): number
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    on(sigName: "mnemonic-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "motion-notify-event", callback: (($obj: WebView, event: Gdk.EventMotion) => boolean)): number
    connect_after(sigName: "motion-notify-event", callback: (($obj: WebView, event: Gdk.EventMotion) => boolean)): number
    emit(sigName: "motion-notify-event", event: Gdk.EventMotion): void
    on(sigName: "motion-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "motion-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "motion-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "move-focus", callback: (($obj: WebView, direction: Gtk.DirectionType) => void)): number
    connect_after(sigName: "move-focus", callback: (($obj: WebView, direction: Gtk.DirectionType) => void)): number
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    on(sigName: "move-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "parent-set", callback: (($obj: WebView, oldParent?: Gtk.Widget | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: WebView, oldParent?: Gtk.Widget | null) => void)): number
    emit(sigName: "parent-set", oldParent?: Gtk.Widget | null): void
    on(sigName: "parent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "parent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "parent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "popup-menu", callback: (($obj: WebView) => boolean)): number
    connect_after(sigName: "popup-menu", callback: (($obj: WebView) => boolean)): number
    emit(sigName: "popup-menu"): void
    on(sigName: "popup-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "popup-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "popup-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "property-notify-event", callback: (($obj: WebView, event: Gdk.EventProperty) => boolean)): number
    connect_after(sigName: "property-notify-event", callback: (($obj: WebView, event: Gdk.EventProperty) => boolean)): number
    emit(sigName: "property-notify-event", event: Gdk.EventProperty): void
    on(sigName: "property-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "property-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "property-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "proximity-in-event", callback: (($obj: WebView, event: Gdk.EventProximity) => boolean)): number
    connect_after(sigName: "proximity-in-event", callback: (($obj: WebView, event: Gdk.EventProximity) => boolean)): number
    emit(sigName: "proximity-in-event", event: Gdk.EventProximity): void
    on(sigName: "proximity-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "proximity-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "proximity-in-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "proximity-out-event", callback: (($obj: WebView, event: Gdk.EventProximity) => boolean)): number
    connect_after(sigName: "proximity-out-event", callback: (($obj: WebView, event: Gdk.EventProximity) => boolean)): number
    emit(sigName: "proximity-out-event", event: Gdk.EventProximity): void
    on(sigName: "proximity-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "proximity-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "proximity-out-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "query-tooltip", callback: (($obj: WebView, x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    connect_after(sigName: "query-tooltip", callback: (($obj: WebView, x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    on(sigName: "query-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "realize", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "realize", callback: (($obj: WebView) => void)): number
    emit(sigName: "realize"): void
    on(sigName: "realize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "realize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "realize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "screen-changed", callback: (($obj: WebView, previousScreen?: Gdk.Screen | null) => void)): number
    connect_after(sigName: "screen-changed", callback: (($obj: WebView, previousScreen?: Gdk.Screen | null) => void)): number
    emit(sigName: "screen-changed", previousScreen?: Gdk.Screen | null): void
    on(sigName: "screen-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "screen-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "screen-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "scroll-event", callback: (($obj: WebView, event: Gdk.EventScroll) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: WebView, event: Gdk.EventScroll) => boolean)): number
    emit(sigName: "scroll-event", event: Gdk.EventScroll): void
    on(sigName: "scroll-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "scroll-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "scroll-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-clear-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    connect_after(sigName: "selection-clear-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    emit(sigName: "selection-clear-event", event: Gdk.EventSelection): void
    on(sigName: "selection-clear-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-clear-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-clear-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-get", callback: (($obj: WebView, data: Gtk.SelectionData, info: number, time: number) => void)): number
    connect_after(sigName: "selection-get", callback: (($obj: WebView, data: Gtk.SelectionData, info: number, time: number) => void)): number
    emit(sigName: "selection-get", data: Gtk.SelectionData, info: number, time: number): void
    on(sigName: "selection-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-get", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-notify-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    connect_after(sigName: "selection-notify-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    emit(sigName: "selection-notify-event", event: Gdk.EventSelection): void
    on(sigName: "selection-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-received", callback: (($obj: WebView, data: Gtk.SelectionData, time: number) => void)): number
    connect_after(sigName: "selection-received", callback: (($obj: WebView, data: Gtk.SelectionData, time: number) => void)): number
    emit(sigName: "selection-received", data: Gtk.SelectionData, time: number): void
    on(sigName: "selection-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-received", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "selection-request-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    connect_after(sigName: "selection-request-event", callback: (($obj: WebView, event: Gdk.EventSelection) => boolean)): number
    emit(sigName: "selection-request-event", event: Gdk.EventSelection): void
    on(sigName: "selection-request-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "selection-request-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "selection-request-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "show", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "show", callback: (($obj: WebView) => void)): number
    emit(sigName: "show"): void
    on(sigName: "show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "show-help", callback: (($obj: WebView, helpType: Gtk.WidgetHelpType) => boolean)): number
    connect_after(sigName: "show-help", callback: (($obj: WebView, helpType: Gtk.WidgetHelpType) => boolean)): number
    emit(sigName: "show-help", helpType: Gtk.WidgetHelpType): void
    on(sigName: "show-help", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "show-help", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "show-help", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "size-allocate", callback: (($obj: WebView, allocation: Gtk.Allocation) => void)): number
    connect_after(sigName: "size-allocate", callback: (($obj: WebView, allocation: Gtk.Allocation) => void)): number
    emit(sigName: "size-allocate", allocation: Gtk.Allocation): void
    on(sigName: "size-allocate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "size-allocate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "size-allocate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "state-changed", callback: (($obj: WebView, state: Gtk.StateType) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: WebView, state: Gtk.StateType) => void)): number
    emit(sigName: "state-changed", state: Gtk.StateType): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "state-flags-changed", callback: (($obj: WebView, flags: Gtk.StateFlags) => void)): number
    connect_after(sigName: "state-flags-changed", callback: (($obj: WebView, flags: Gtk.StateFlags) => void)): number
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    on(sigName: "state-flags-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "style-set", callback: (($obj: WebView, previousStyle?: Gtk.Style | null) => void)): number
    connect_after(sigName: "style-set", callback: (($obj: WebView, previousStyle?: Gtk.Style | null) => void)): number
    emit(sigName: "style-set", previousStyle?: Gtk.Style | null): void
    on(sigName: "style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "style-updated", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "style-updated", callback: (($obj: WebView) => void)): number
    emit(sigName: "style-updated"): void
    on(sigName: "style-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "style-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "style-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "touch-event", callback: (($obj: WebView, object: Gdk.Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: WebView, object: Gdk.Event) => boolean)): number
    emit(sigName: "touch-event", object: Gdk.Event): void
    on(sigName: "touch-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "touch-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "touch-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "unmap", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "unmap", callback: (($obj: WebView) => void)): number
    emit(sigName: "unmap"): void
    on(sigName: "unmap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "unmap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "unmap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "unmap-event", callback: (($obj: WebView, event: Gdk.EventAny) => boolean)): number
    connect_after(sigName: "unmap-event", callback: (($obj: WebView, event: Gdk.EventAny) => boolean)): number
    emit(sigName: "unmap-event", event: Gdk.EventAny): void
    on(sigName: "unmap-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "unmap-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "unmap-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "unrealize", callback: (($obj: WebView) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: WebView) => void)): number
    emit(sigName: "unrealize"): void
    on(sigName: "unrealize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "visibility-notify-event", callback: (($obj: WebView, event: Gdk.EventVisibility) => boolean)): number
    connect_after(sigName: "visibility-notify-event", callback: (($obj: WebView, event: Gdk.EventVisibility) => boolean)): number
    emit(sigName: "visibility-notify-event", event: Gdk.EventVisibility): void
    on(sigName: "visibility-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "visibility-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "visibility-notify-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "window-state-event", callback: (($obj: WebView, event: Gdk.EventWindowState) => boolean)): number
    connect_after(sigName: "window-state-event", callback: (($obj: WebView, event: Gdk.EventWindowState) => boolean)): number
    emit(sigName: "window-state-event", event: Gdk.EventWindowState): void
    on(sigName: "window-state-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "window-state-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "window-state-event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::copy-target-list", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::copy-target-list", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::copy-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::copy-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::copy-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::custom-encoding", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::custom-encoding", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::custom-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::custom-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::custom-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editable", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::full-content-zoom", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::full-content-zoom", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::full-content-zoom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::full-content-zoom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::full-content-zoom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::icon-uri", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-uri", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::icon-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::icon-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::icon-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::im-context", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-context", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::im-context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::im-context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::im-context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::load-status", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-status", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::load-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paste-target-list", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paste-target-list", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paste-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paste-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paste-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::settings", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::transparent", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transparent", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::transparent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::transparent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::transparent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view-mode", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view-mode", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::viewport-attributes", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::viewport-attributes", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::viewport-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::viewport-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::viewport-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::web-inspector", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::web-inspector", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::web-inspector", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::web-inspector", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::web-inspector", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::window-features", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window-features", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::window-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::window-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::window-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::zoom-level", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zoom-level", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::zoom-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::zoom-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::zoom-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border-width", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::resize-mode", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-paintable", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::composite-child", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::double-buffered", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::events", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-left", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-right", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-show-all", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::window", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hadjustment", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hadjustment", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hscroll-policy", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hscroll-policy", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vadjustment", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vadjustment", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vscroll-policy", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vscroll-policy", callback: (($obj: WebView, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebView_ConstructProps)
    _init (config?: WebView_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): WebView
    static $gtype: GObject.Type
}
export interface WebWindowFeatures_ConstructProps extends GObject.Object_ConstructProps {
    fullscreen?: boolean
    height?: number
    locationbarVisible?: boolean
    menubarVisible?: boolean
    scrollbarVisible?: boolean
    statusbarVisible?: boolean
    toolbarVisible?: boolean
    width?: number
    x?: number
    y?: number
}
export class WebWindowFeatures {
    /* Properties of WebKit.WebWindowFeatures */
    fullscreen: boolean
    height: number
    locationbarVisible: boolean
    menubarVisible: boolean
    scrollbarVisible: boolean
    statusbarVisible: boolean
    toolbarVisible: boolean
    width: number
    x: number
    y: number
    /* Fields of WebKit.WebWindowFeatures */
    parentInstance: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit.WebWindowFeatures */
    equal(features2: WebWindowFeatures): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fullscreen", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fullscreen", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fullscreen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::locationbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::locationbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::locationbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::locationbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::locationbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::menubar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::menubar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::menubar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::menubar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::menubar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrollbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrollbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrollbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrollbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrollbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::statusbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::statusbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::statusbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::statusbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::statusbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::toolbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::toolbar-visible", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::toolbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::toolbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::toolbar-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: WebWindowFeatures, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebWindowFeatures_ConstructProps)
    _init (config?: WebWindowFeatures_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): WebWindowFeatures
    static $gtype: GObject.Type
}
export abstract class DOMAttrClass {
    /* Fields of WebKit.DOMAttrClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMAudioTrackClass {
    /* Fields of WebKit.DOMAudioTrackClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMAudioTrackListClass {
    /* Fields of WebKit.DOMAudioTrackListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMBarPropClass {
    /* Fields of WebKit.DOMBarPropClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMBatteryManagerClass {
    /* Fields of WebKit.DOMBatteryManagerClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMBlobClass {
    /* Fields of WebKit.DOMBlobClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMCDATASectionClass {
    /* Fields of WebKit.DOMCDATASectionClass */
    parentClass: DOMTextClass
    static name: string
}
export abstract class DOMCSSRuleClass {
    /* Fields of WebKit.DOMCSSRuleClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMCSSRuleListClass {
    /* Fields of WebKit.DOMCSSRuleListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMCSSStyleDeclarationClass {
    /* Fields of WebKit.DOMCSSStyleDeclarationClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMCSSStyleSheetClass {
    /* Fields of WebKit.DOMCSSStyleSheetClass */
    parentClass: DOMStyleSheetClass
    static name: string
}
export abstract class DOMCSSValueClass {
    /* Fields of WebKit.DOMCSSValueClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMCharacterDataClass {
    /* Fields of WebKit.DOMCharacterDataClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMCommentClass {
    /* Fields of WebKit.DOMCommentClass */
    parentClass: DOMCharacterDataClass
    static name: string
}
export abstract class DOMConsoleClass {
    /* Fields of WebKit.DOMConsoleClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMApplicationCacheClass {
    /* Fields of WebKit.DOMDOMApplicationCacheClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMImplementationClass {
    /* Fields of WebKit.DOMDOMImplementationClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMMimeTypeArrayClass {
    /* Fields of WebKit.DOMDOMMimeTypeArrayClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMMimeTypeClass {
    /* Fields of WebKit.DOMDOMMimeTypeClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMNamedFlowCollectionClass {
    /* Fields of WebKit.DOMDOMNamedFlowCollectionClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMPluginArrayClass {
    /* Fields of WebKit.DOMDOMPluginArrayClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMPluginClass {
    /* Fields of WebKit.DOMDOMPluginClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMSecurityPolicyClass {
    /* Fields of WebKit.DOMDOMSecurityPolicyClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMSelectionClass {
    /* Fields of WebKit.DOMDOMSelectionClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMSettableTokenListClass {
    /* Fields of WebKit.DOMDOMSettableTokenListClass */
    parentClass: DOMDOMTokenListClass
    static name: string
}
export abstract class DOMDOMStringListClass {
    /* Fields of WebKit.DOMDOMStringListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMStringMapClass {
    /* Fields of WebKit.DOMDOMStringMapClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMTokenListClass {
    /* Fields of WebKit.DOMDOMTokenListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMWindowCSSClass {
    /* Fields of WebKit.DOMDOMWindowCSSClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDOMWindowClass {
    /* Fields of WebKit.DOMDOMWindowClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDatabaseClass {
    /* Fields of WebKit.DOMDatabaseClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMDocumentClass {
    /* Fields of WebKit.DOMDocumentClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMDocumentFragmentClass {
    /* Fields of WebKit.DOMDocumentFragmentClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMDocumentTypeClass {
    /* Fields of WebKit.DOMDocumentTypeClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMElementClass {
    /* Fields of WebKit.DOMElementClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMEntityReferenceClass {
    /* Fields of WebKit.DOMEntityReferenceClass */
    parentClass: DOMNodeClass
    static name: string
}
export abstract class DOMEventClass {
    /* Fields of WebKit.DOMEventClass */
    parentClass: DOMObjectClass
    static name: string
}
export class DOMEventTargetClass {
    static name: string
}
export abstract class DOMEventTargetIface {
    /* Fields of WebKit.DOMEventTargetIface */
    gIface: GObject.TypeInterface
    dispatchEvent: (target: DOMEventTarget, event: DOMEvent) => boolean
    addEventListener: (target: DOMEventTarget, eventName: string, handler: Function, useCapture: boolean) => boolean
    removeEventListener: (target: DOMEventTarget, eventName: string, handler: Function, useCapture: boolean) => boolean
    static name: string
}
export abstract class DOMFileClass {
    /* Fields of WebKit.DOMFileClass */
    parentClass: DOMBlobClass
    static name: string
}
export abstract class DOMFileListClass {
    /* Fields of WebKit.DOMFileListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMGamepadClass {
    /* Fields of WebKit.DOMGamepadClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMGamepadListClass {
    /* Fields of WebKit.DOMGamepadListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMGeolocationClass {
    /* Fields of WebKit.DOMGeolocationClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMHTMLAnchorElementClass {
    /* Fields of WebKit.DOMHTMLAnchorElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLAppletElementClass {
    /* Fields of WebKit.DOMHTMLAppletElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLAreaElementClass {
    /* Fields of WebKit.DOMHTMLAreaElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLAudioElementClass {
    /* Fields of WebKit.DOMHTMLAudioElementClass */
    parentClass: DOMHTMLMediaElementClass
    static name: string
}
export abstract class DOMHTMLBRElementClass {
    /* Fields of WebKit.DOMHTMLBRElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLBaseElementClass {
    /* Fields of WebKit.DOMHTMLBaseElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLBaseFontElementClass {
    /* Fields of WebKit.DOMHTMLBaseFontElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLBodyElementClass {
    /* Fields of WebKit.DOMHTMLBodyElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLButtonElementClass {
    /* Fields of WebKit.DOMHTMLButtonElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLCanvasElementClass {
    /* Fields of WebKit.DOMHTMLCanvasElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLCollectionClass {
    /* Fields of WebKit.DOMHTMLCollectionClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMHTMLDListElementClass {
    /* Fields of WebKit.DOMHTMLDListElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLDetailsElementClass {
    /* Fields of WebKit.DOMHTMLDetailsElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLDirectoryElementClass {
    /* Fields of WebKit.DOMHTMLDirectoryElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLDivElementClass {
    /* Fields of WebKit.DOMHTMLDivElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLDocumentClass {
    /* Fields of WebKit.DOMHTMLDocumentClass */
    parentClass: DOMDocumentClass
    static name: string
}
export abstract class DOMHTMLElementClass {
    /* Fields of WebKit.DOMHTMLElementClass */
    parentClass: DOMElementClass
    static name: string
}
export abstract class DOMHTMLEmbedElementClass {
    /* Fields of WebKit.DOMHTMLEmbedElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLFieldSetElementClass {
    /* Fields of WebKit.DOMHTMLFieldSetElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLFontElementClass {
    /* Fields of WebKit.DOMHTMLFontElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLFormElementClass {
    /* Fields of WebKit.DOMHTMLFormElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLFrameElementClass {
    /* Fields of WebKit.DOMHTMLFrameElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLFrameSetElementClass {
    /* Fields of WebKit.DOMHTMLFrameSetElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLHRElementClass {
    /* Fields of WebKit.DOMHTMLHRElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLHeadElementClass {
    /* Fields of WebKit.DOMHTMLHeadElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLHeadingElementClass {
    /* Fields of WebKit.DOMHTMLHeadingElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLHtmlElementClass {
    /* Fields of WebKit.DOMHTMLHtmlElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLIFrameElementClass {
    /* Fields of WebKit.DOMHTMLIFrameElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLImageElementClass {
    /* Fields of WebKit.DOMHTMLImageElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLInputElementClass {
    /* Fields of WebKit.DOMHTMLInputElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLKeygenElementClass {
    /* Fields of WebKit.DOMHTMLKeygenElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLLIElementClass {
    /* Fields of WebKit.DOMHTMLLIElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLLabelElementClass {
    /* Fields of WebKit.DOMHTMLLabelElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLLegendElementClass {
    /* Fields of WebKit.DOMHTMLLegendElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLLinkElementClass {
    /* Fields of WebKit.DOMHTMLLinkElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLMapElementClass {
    /* Fields of WebKit.DOMHTMLMapElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLMarqueeElementClass {
    /* Fields of WebKit.DOMHTMLMarqueeElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLMediaElementClass {
    /* Fields of WebKit.DOMHTMLMediaElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLMenuElementClass {
    /* Fields of WebKit.DOMHTMLMenuElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLMetaElementClass {
    /* Fields of WebKit.DOMHTMLMetaElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLModElementClass {
    /* Fields of WebKit.DOMHTMLModElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLOListElementClass {
    /* Fields of WebKit.DOMHTMLOListElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLObjectElementClass {
    /* Fields of WebKit.DOMHTMLObjectElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLOptGroupElementClass {
    /* Fields of WebKit.DOMHTMLOptGroupElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLOptionElementClass {
    /* Fields of WebKit.DOMHTMLOptionElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLOptionsCollectionClass {
    /* Fields of WebKit.DOMHTMLOptionsCollectionClass */
    parentClass: DOMHTMLCollectionClass
    static name: string
}
export abstract class DOMHTMLParagraphElementClass {
    /* Fields of WebKit.DOMHTMLParagraphElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLParamElementClass {
    /* Fields of WebKit.DOMHTMLParamElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLPreElementClass {
    /* Fields of WebKit.DOMHTMLPreElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLQuoteElementClass {
    /* Fields of WebKit.DOMHTMLQuoteElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLScriptElementClass {
    /* Fields of WebKit.DOMHTMLScriptElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLSelectElementClass {
    /* Fields of WebKit.DOMHTMLSelectElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLStyleElementClass {
    /* Fields of WebKit.DOMHTMLStyleElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableCaptionElementClass {
    /* Fields of WebKit.DOMHTMLTableCaptionElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableCellElementClass {
    /* Fields of WebKit.DOMHTMLTableCellElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableColElementClass {
    /* Fields of WebKit.DOMHTMLTableColElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableElementClass {
    /* Fields of WebKit.DOMHTMLTableElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableRowElementClass {
    /* Fields of WebKit.DOMHTMLTableRowElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTableSectionElementClass {
    /* Fields of WebKit.DOMHTMLTableSectionElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTextAreaElementClass {
    /* Fields of WebKit.DOMHTMLTextAreaElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLTitleElementClass {
    /* Fields of WebKit.DOMHTMLTitleElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLUListElementClass {
    /* Fields of WebKit.DOMHTMLUListElementClass */
    parentClass: DOMHTMLElementClass
    static name: string
}
export abstract class DOMHTMLVideoElementClass {
    /* Fields of WebKit.DOMHTMLVideoElementClass */
    parentClass: DOMHTMLMediaElementClass
    static name: string
}
export abstract class DOMHistoryClass {
    /* Fields of WebKit.DOMHistoryClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMKeyboardEventClass {
    /* Fields of WebKit.DOMKeyboardEventClass */
    parentClass: DOMUIEventClass
    static name: string
}
export abstract class DOMLocationClass {
    /* Fields of WebKit.DOMLocationClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMediaControllerClass {
    /* Fields of WebKit.DOMMediaControllerClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMediaErrorClass {
    /* Fields of WebKit.DOMMediaErrorClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMediaListClass {
    /* Fields of WebKit.DOMMediaListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMediaQueryListClass {
    /* Fields of WebKit.DOMMediaQueryListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMessagePortClass {
    /* Fields of WebKit.DOMMessagePortClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMMouseEventClass {
    /* Fields of WebKit.DOMMouseEventClass */
    parentClass: DOMUIEventClass
    static name: string
}
export abstract class DOMNamedNodeMapClass {
    /* Fields of WebKit.DOMNamedNodeMapClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMNavigatorClass {
    /* Fields of WebKit.DOMNavigatorClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMNodeClass {
    /* Fields of WebKit.DOMNodeClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMNodeFilterClass {
    /* Fields of WebKit.DOMNodeFilterClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMNodeIteratorClass {
    /* Fields of WebKit.DOMNodeIteratorClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMNodeListClass {
    /* Fields of WebKit.DOMNodeListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMObjectClass {
    /* Fields of WebKit.DOMObjectClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DOMObjectPrivate {
    static name: string
}
export abstract class DOMPerformanceClass {
    /* Fields of WebKit.DOMPerformanceClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMPerformanceEntryClass {
    /* Fields of WebKit.DOMPerformanceEntryClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMPerformanceEntryListClass {
    /* Fields of WebKit.DOMPerformanceEntryListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMPerformanceNavigationClass {
    /* Fields of WebKit.DOMPerformanceNavigationClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMPerformanceTimingClass {
    /* Fields of WebKit.DOMPerformanceTimingClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMProcessingInstructionClass {
    /* Fields of WebKit.DOMProcessingInstructionClass */
    parentClass: DOMCharacterDataClass
    static name: string
}
export abstract class DOMRangeClass {
    /* Fields of WebKit.DOMRangeClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMScreenClass {
    /* Fields of WebKit.DOMScreenClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMShadowRootClass {
    /* Fields of WebKit.DOMShadowRootClass */
    parentClass: DOMDocumentFragmentClass
    static name: string
}
export abstract class DOMStorageClass {
    /* Fields of WebKit.DOMStorageClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMStorageInfoClass {
    /* Fields of WebKit.DOMStorageInfoClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMStorageQuotaClass {
    /* Fields of WebKit.DOMStorageQuotaClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMStyleMediaClass {
    /* Fields of WebKit.DOMStyleMediaClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMStyleSheetClass {
    /* Fields of WebKit.DOMStyleSheetClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMStyleSheetListClass {
    /* Fields of WebKit.DOMStyleSheetListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTextClass {
    /* Fields of WebKit.DOMTextClass */
    parentClass: DOMCharacterDataClass
    static name: string
}
export abstract class DOMTextTrackClass {
    /* Fields of WebKit.DOMTextTrackClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTextTrackCueClass {
    /* Fields of WebKit.DOMTextTrackCueClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTextTrackCueListClass {
    /* Fields of WebKit.DOMTextTrackCueListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTextTrackListClass {
    /* Fields of WebKit.DOMTextTrackListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTimeRangesClass {
    /* Fields of WebKit.DOMTimeRangesClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTouchClass {
    /* Fields of WebKit.DOMTouchClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMTrackEventClass {
    /* Fields of WebKit.DOMTrackEventClass */
    parentClass: DOMEventClass
    static name: string
}
export abstract class DOMTreeWalkerClass {
    /* Fields of WebKit.DOMTreeWalkerClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMUIEventClass {
    /* Fields of WebKit.DOMUIEventClass */
    parentClass: DOMEventClass
    static name: string
}
export abstract class DOMValidityStateClass {
    /* Fields of WebKit.DOMValidityStateClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMVideoPlaybackQualityClass {
    /* Fields of WebKit.DOMVideoPlaybackQualityClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMVideoTrackClass {
    /* Fields of WebKit.DOMVideoTrackClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMVideoTrackListClass {
    /* Fields of WebKit.DOMVideoTrackListClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMWebKitNamedFlowClass {
    /* Fields of WebKit.DOMWebKitNamedFlowClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMWebKitPointClass {
    /* Fields of WebKit.DOMWebKitPointClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMWheelEventClass {
    /* Fields of WebKit.DOMWheelEventClass */
    parentClass: DOMMouseEventClass
    static name: string
}
export abstract class DOMXPathExpressionClass {
    /* Fields of WebKit.DOMXPathExpressionClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMXPathNSResolverClass {
    /* Fields of WebKit.DOMXPathNSResolverClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DOMXPathResultClass {
    /* Fields of WebKit.DOMXPathResultClass */
    parentClass: DOMObjectClass
    static name: string
}
export abstract class DownloadClass {
    /* Fields of WebKit.DownloadClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DownloadPrivate {
    static name: string
}
export abstract class FaviconDatabaseClass {
    /* Fields of WebKit.FaviconDatabaseClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class FaviconDatabasePrivate {
    static name: string
}
export abstract class FileChooserRequestClass {
    /* Fields of WebKit.FileChooserRequestClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class FileChooserRequestPrivate {
    static name: string
}
export abstract class GeolocationPolicyDecisionClass {
    /* Fields of WebKit.GeolocationPolicyDecisionClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GeolocationPolicyDecisionPrivate {
    static name: string
}
export abstract class HitTestResultClass {
    /* Fields of WebKit.HitTestResultClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class HitTestResultPrivate {
    static name: string
}
export abstract class IconDatabaseClass {
    /* Fields of WebKit.IconDatabaseClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class IconDatabasePrivate {
    static name: string
}
export abstract class NetworkRequestClass {
    /* Fields of WebKit.NetworkRequestClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class NetworkRequestPrivate {
    static name: string
}
export abstract class NetworkResponseClass {
    /* Fields of WebKit.NetworkResponseClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class NetworkResponsePrivate {
    static name: string
}
export abstract class SecurityOriginClass {
    /* Fields of WebKit.SecurityOriginClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class SecurityOriginPrivate {
    static name: string
}
export abstract class SoupAuthDialogClass {
    /* Fields of WebKit.SoupAuthDialogClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export abstract class SpellCheckerInterface {
    /* Fields of WebKit.SpellCheckerInterface */
    gIface: GObject.TypeInterface
    checkSpellingOfString: (checker: SpellChecker, string: string) => [ /* misspellingLocation */ number | null, /* misspellingLength */ number | null ]
    getGuessesForWord: (checker: SpellChecker, word: string, context?: string | null) => string[]
    updateSpellCheckingLanguages: (checker: SpellChecker, languages?: string | null) => void
    getAutocorrectSuggestionsForMisspelledWord: (checker: SpellChecker, word: string) => string
    learnWord: (checker: SpellChecker, word: string) => void
    ignoreWord: (checker: SpellChecker, word: string) => void
    static name: string
}
export abstract class ViewportAttributesClass {
    /* Fields of WebKit.ViewportAttributesClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class ViewportAttributesPrivate {
    static name: string
}
export abstract class WebBackForwardListClass {
    /* Fields of WebKit.WebBackForwardListClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebBackForwardListPrivate {
    static name: string
}
export abstract class WebDataSourceClass {
    /* Fields of WebKit.WebDataSourceClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebDataSourcePrivate {
    static name: string
}
export abstract class WebDatabaseClass {
    /* Fields of WebKit.WebDatabaseClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebDatabasePrivate {
    static name: string
}
export abstract class WebFrameClass {
    /* Fields of WebKit.WebFrameClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebFramePrivate {
    static name: string
}
export abstract class WebHistoryItemClass {
    /* Fields of WebKit.WebHistoryItemClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebHistoryItemPrivate {
    static name: string
}
export abstract class WebInspectorClass {
    /* Fields of WebKit.WebInspectorClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebInspectorPrivate {
    static name: string
}
export abstract class WebNavigationActionClass {
    /* Fields of WebKit.WebNavigationActionClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebNavigationActionPrivate {
    static name: string
}
export abstract class WebPluginClass {
    /* Fields of WebKit.WebPluginClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export abstract class WebPluginDatabaseClass {
    /* Fields of WebKit.WebPluginDatabaseClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebPluginDatabasePrivate {
    static name: string
}
export class WebPluginMIMEType {
    /* Fields of WebKit.WebPluginMIMEType */
    name: string
    description: string
    extensions: string
    static name: string
}
export class WebPluginPrivate {
    static name: string
}
export abstract class WebPolicyDecisionClass {
    /* Fields of WebKit.WebPolicyDecisionClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebPolicyDecisionPrivate {
    static name: string
}
export abstract class WebResourceClass {
    /* Fields of WebKit.WebResourceClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebResourcePrivate {
    static name: string
}
export abstract class WebSettingsClass {
    /* Fields of WebKit.WebSettingsClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebSettingsPrivate {
    static name: string
}
export abstract class WebViewClass {
    /* Fields of WebKit.WebViewClass */
    parentClass: Gtk.ContainerClass
    webViewReady: (webView: WebView) => boolean
    closeWebView: (webView: WebView) => boolean
    navigationRequested: (webView: WebView, frame: WebFrame, request: NetworkRequest) => NavigationResponse
    chooseFile: (webView: WebView, frame: WebFrame, oldFile: string) => string
    scriptAlert: (webView: WebView, frame: WebFrame, alertMessage: string) => boolean
    scriptConfirm: (webView: WebView, frame: WebFrame, confirmMessage: string, didConfirm: boolean) => boolean
    scriptPrompt: (webView: WebView, frame: WebFrame, message: string, defaultValue: string, value: string) => boolean
    consoleMessage: (webView: WebView, message: string, lineNumber: number, sourceId: string) => boolean
    selectAll: (webView: WebView) => void
    cutClipboard: (webView: WebView) => void
    copyClipboard: (webView: WebView) => void
    pasteClipboard: (webView: WebView) => void
    moveCursor: (webView: WebView, step: Gtk.MovementStep, count: number) => boolean
    setScrollAdjustments: (webView: WebView, hadjustment: Gtk.Adjustment, vadjustment: Gtk.Adjustment) => void
    undo: (webView: WebView) => void
    redo: (webView: WebView) => void
    shouldAllowEditingAction: (webView: WebView) => boolean
    enteringFullscreen: (webView: WebView) => boolean
    leavingFullscreen: (webView: WebView) => boolean
    runFileChooser: (webView: WebView, request: FileChooserRequest) => boolean
    static name: string
}
export class WebViewPrivate {
    static name: string
}
export abstract class WebWindowFeaturesClass {
    /* Fields of WebKit.WebWindowFeaturesClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class WebWindowFeaturesPrivate {
    static name: string
}
}