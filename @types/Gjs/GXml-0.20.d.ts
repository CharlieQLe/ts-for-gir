/**
 * GXml-0.20
 */

import * as Gjs from './Gjs';
import * as libxml2 from './libxml2-2.0';
import * as Gio from './Gio-2.0';
import * as GObject from './GObject-2.0';
import * as GLib from './GLib-2.0';
import * as Gee from './Gee-0.8';

export enum CssCombiner {
    NULL,
    NONE,
    INSIDE,
    AND,
    PARENT,
    AFTER,
    PRECEDED,
}
export enum CssSelectorType {
    CLASS,
    ID,
    ALL,
    ELEMENT,
    ATTRIBUTE,
    ATTRIBUTE_EQUAL,
    ATTRIBUTE_CONTAINS,
    ATTRIBUTE_SUBSTRING,
    ATTRIBUTE_STARTS_WITH,
    ATTRIBUTE_STARTS_WITH_WORD,
    ATTRIBUTE_ENDS_WITH,
    PSEUDO_CLASS,
}
export enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
export enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
export enum CssSelectorError {
    NULL,
    EOF,
    NOT,
    PSEUDO,
    ATTRIBUTE,
    IDENTIFIER,
    COMBINER,
}
export enum DomDocumentError {
    FILE_NOT_FOUND_ERROR,
    INVALID_DOCUMENT_ERROR,
}
export enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
export enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
export enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
export enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
export enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
export enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
export enum XPathObjectError {
    INVALID_NAMESPACE_ERROR,
}
export enum DomNodeFilterFilter {
    ACCEPT,
    REJECT,
    SKIP,
}
export enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
export enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
export enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
export enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
export enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
export interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
export interface Collection_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    items_type?: GObject.Type
}
export class Collection {
    /* Properties of GXml.Collection */
    readonly nodes_index: GLib.Queue
    element: DomElement
    readonly items_name: string
    items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Collection */
    get_nodes_index(): GLib.Queue
    get_element(): DomElement
    set_element(value: DomElement): void
    get_items_name(): string
    get_items_type(): GObject.Type
    set_items_type(value: GObject.Type): void
    search(): void
    get_item(index: number): DomElement | null
    append(node: DomElement): void
    get_length(): number
    initialize(t: GObject.Type): void
    create_item(): DomElement | null
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Collection */
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::element", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-name", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-type", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: Collection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Collection_ConstructProps)
    _init (config?: Collection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface List_ConstructProps extends GObject.Object_ConstructProps {
}
export class List {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: List, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: List, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: List_ConstructProps)
    _init (config?: List_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElement_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElement {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.MappeableElement */
    get_map_key(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElement */
    vfunc_get_map_key(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MappeableElement_ConstructProps)
    _init (config?: MappeableElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Map_ConstructProps extends GObject.Object_ConstructProps {
    attribute_key?: string
}
export class Map {
    /* Properties of GXml.Map */
    attribute_key: string
    readonly keys_set: Gee.Set
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Map */
    get_attribute_key(): string
    set_attribute_key(value: string): void
    item(key: string): DomElement | null
    has_key(key: string): boolean
    get_keys_set(): Gee.Set
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Map */
    vfunc_get_attribute_key(): string
    vfunc_set_attribute_key(value: string): void
    vfunc_item(key: string): DomElement | null
    vfunc_has_key(key: string): boolean
    vfunc_get_keys_set(): Gee.Set
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keys-set", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: (($obj: Map, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Map_ConstructProps)
    _init (config?: Map_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementPairKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementPairKey {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.MappeableElementPairKey */
    get_map_primary_key(): string
    get_map_secondary_key(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElementPairKey */
    vfunc_get_map_primary_key(): string
    vfunc_get_map_secondary_key(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementPairKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElementPairKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MappeableElementPairKey_ConstructProps)
    _init (config?: MappeableElementPairKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface PairedMap_ConstructProps extends GObject.Object_ConstructProps {
    attribute_primary_key?: string
    attribute_secondary_key?: string
}
export class PairedMap {
    /* Properties of GXml.PairedMap */
    attribute_primary_key: string
    attribute_secondary_key: string
    readonly primary_keys_set: Gee.Set
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.PairedMap */
    get_attribute_primary_key(): string
    set_attribute_primary_key(value: string): void
    get_attribute_secondary_key(): string
    set_attribute_secondary_key(value: string): void
    get_primary_keys_set(): Gee.Set
    item(primary_key: string, secondary_key: string): DomElement | null
    has_primary_key(key: string): boolean
    has_secondary_key(pkey: string, key: string): boolean
    secondary_keys_set(pkey: string): Gee.Set
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.PairedMap */
    vfunc_get_attribute_primary_key(): string
    vfunc_set_attribute_primary_key(value: string): void
    vfunc_get_attribute_secondary_key(): string
    vfunc_set_attribute_secondary_key(value: string): void
    vfunc_get_primary_keys_set(): Gee.Set
    vfunc_item(primary_key: string, secondary_key: string): DomElement | null
    vfunc_has_primary_key(key: string): boolean
    vfunc_has_secondary_key(pkey: string, key: string): boolean
    vfunc_secondary_keys_set(pkey: string): Gee.Set
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::primary-keys-set", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: PairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PairedMap_ConstructProps)
    _init (config?: PairedMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementThreeKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementThreeKey {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.MappeableElementThreeKey */
    get_map_pkey(): string
    get_map_skey(): string
    get_map_tkey(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElementThreeKey */
    vfunc_get_map_pkey(): string
    vfunc_get_map_skey(): string
    vfunc_get_map_tkey(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementThreeKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElementThreeKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MappeableElementThreeKey_ConstructProps)
    _init (config?: MappeableElementThreeKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ThreeMap_ConstructProps extends GObject.Object_ConstructProps {
    attribute_primary_key?: string
    attribute_secondary_key?: string
    attribute_third_key?: string
}
export class ThreeMap {
    /* Properties of GXml.ThreeMap */
    attribute_primary_key: string
    attribute_secondary_key: string
    attribute_third_key: string
    readonly primary_keys_set: Gee.Set
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.ThreeMap */
    get_attribute_primary_key(): string
    set_attribute_primary_key(value: string): void
    get_attribute_secondary_key(): string
    set_attribute_secondary_key(value: string): void
    get_attribute_third_key(): string
    set_attribute_third_key(value: string): void
    get_primary_keys_set(): Gee.Set
    item(primary_key: string, secondary_key: string, third_key: string): DomElement | null
    has_primary_key(key: string): boolean
    has_secondary_key(pkey: string, key: string): boolean
    has_third_key(pkey: string, skey: string, key: string): boolean
    secondary_keys_set(pkey: string): Gee.Set
    third_keys_set(pkey: string, skey: string): Gee.Set
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.ThreeMap */
    vfunc_get_attribute_primary_key(): string
    vfunc_set_attribute_primary_key(value: string): void
    vfunc_get_attribute_secondary_key(): string
    vfunc_set_attribute_secondary_key(value: string): void
    vfunc_get_attribute_third_key(): string
    vfunc_set_attribute_third_key(value: string): void
    vfunc_get_primary_keys_set(): Gee.Set
    vfunc_item(primary_key: string, secondary_key: string, third_key: string): DomElement | null
    vfunc_has_primary_key(key: string): boolean
    vfunc_has_secondary_key(pkey: string, key: string): boolean
    vfunc_has_third_key(pkey: string, skey: string, key: string): boolean
    vfunc_secondary_keys_set(pkey: string): Gee.Set
    vfunc_third_keys_set(pkey: string, skey: string): Gee.Set
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-third-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::primary-keys-set", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: ThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ThreeMap_ConstructProps)
    _init (config?: ThreeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface CollectionParent_ConstructProps extends GObject.Object_ConstructProps {
}
export class CollectionParent {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CollectionParent */
    get_types(): GLib.HashTable
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.CollectionParent */
    vfunc_get_types(): GLib.HashTable
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CollectionParent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CollectionParent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CollectionParent_ConstructProps)
    _init (config?: CollectionParent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static add_supported_type(types: GLib.HashTable, parent_type: GObject.Type, type: GObject.Type): void
    static add_supported_types(table: GLib.HashTable, parent_type: GObject.Type, types: GObject.Type[]): void
    static $gtype: GObject.Type
}
export interface DomAttr_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class DomAttr {
    /* Properties of GXml.DomAttr */
    readonly namespace_uri: string
    readonly prefix: string
    readonly local_name: string
    readonly name: string
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomAttr */
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string
    get_name(): string
    get_value(): string
    set_value(value: string): void
    get_specified(): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomAttr */
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_get_specified(): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomAttr_ConstructProps)
    _init (config?: DomAttr_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCharacterData_ConstructProps extends GObject.Object_ConstructProps {
    data?: string
}
export class DomCharacterData {
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomCharacterData_ConstructProps)
    _init (config?: DomCharacterData_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomText_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomText {
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomText */
    split_text(offset: number): DomText
    get_whole_text(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    /* Virtual methods of GXml.DomText */
    vfunc_split_text(offset: number): DomText
    vfunc_get_whole_text(): string
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.DomCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomText_ConstructProps)
    _init (config?: DomText_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomProcessingInstruction_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomProcessingInstruction {
    /* Properties of GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomProcessingInstruction */
    get_target(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    /* Virtual methods of GXml.DomProcessingInstruction */
    vfunc_get_target(): string
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.DomCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomProcessingInstruction_ConstructProps)
    _init (config?: DomProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomComment_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomComment {
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    /* Virtual methods of GXml.DomComment */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.DomCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomComment_ConstructProps)
    _init (config?: DomComment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonElementParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonElementParentNode {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNonElementParentNode */
    get_element_by_id(element_id: string): DomElement | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNonElementParentNode */
    vfunc_get_element_by_id(element_id: string): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonElementParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNonElementParentNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNonElementParentNode_ConstructProps)
    _init (config?: DomNonElementParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomParentNode {
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomParentNode */
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomParentNode_ConstructProps)
    _init (config?: DomParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonDocumentTypeChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonDocumentTypeChildNode {
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previous_element_sibling: DomElement
    readonly next_element_sibling: DomElement
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    get_previous_element_sibling(): DomElement | null
    get_next_element_sibling(): DomElement | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNonDocumentTypeChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNonDocumentTypeChildNode_ConstructProps)
    _init (config?: DomNonDocumentTypeChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomChildNode {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomChildNode */
    vfunc_remove(): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomChildNode_ConstructProps)
    _init (config?: DomChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNodeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeList {
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    get_length(): number
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNodeList */
    vfunc_item(index: number): DomNode | null
    vfunc_get_length(): number
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNodeList_ConstructProps)
    _init (config?: DomNodeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomHTMLCollection_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomHTMLCollection {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomHTMLCollection */
    get_element(index: number): DomElement | null
    to_array(): DomElement[]
    get_length(): number
    item(index: number): DomElement | null
    named_item(name: string): DomElement | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomHTMLCollection */
    vfunc_get_element(index: number): DomElement | null
    vfunc_to_array(): DomElement[]
    vfunc_get_length(): number
    vfunc_item(index: number): DomElement | null
    vfunc_named_item(name: string): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomHTMLCollection_ConstructProps)
    _init (config?: DomHTMLCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeIterator {
    /* Properties of GXml.DomNodeIterator */
    readonly root: DomNode
    readonly reference_node: DomNode
    readonly pointer_before_reference_node: boolean
    readonly what_to_show: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNodeIterator */
    get_root(): DomNode
    get_reference_node(): DomNode
    get_pointer_before_reference_node(): boolean
    get_what_to_show(): number
    next_node(): DomNode | null
    previous_node(): DomNode | null
    detach(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNodeIterator */
    vfunc_get_root(): DomNode
    vfunc_get_reference_node(): DomNode
    vfunc_get_pointer_before_reference_node(): boolean
    vfunc_get_what_to_show(): number
    vfunc_next_node(): DomNode | null
    vfunc_previous_node(): DomNode | null
    vfunc_detach(): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GXml.DomNodeIterator */
    connect(sigName: "accept-node", callback: (($obj: DomNodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    connect_after(sigName: "accept-node", callback: (($obj: DomNodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    emit(sigName: "accept-node", node: DomNode): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::what-to-show", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNodeIterator_ConstructProps)
    _init (config?: DomNodeIterator_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTreeWalker {
    /* Properties of GXml.DomTreeWalker */
    readonly root: DomNode
    readonly what_to_show: number
    readonly current_node: DomNode
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomTreeWalker */
    get_root(): DomNode
    get_what_to_show(): number
    get_current_node(): DomNode
    parent_node(): DomNode | null
    first_child(): DomNode | null
    last_child(): DomNode | null
    previous_sibling(): DomNode | null
    next_sibling(): DomNode | null
    previous_node(): DomNode | null
    next_node(): DomNode | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomTreeWalker */
    vfunc_get_root(): DomNode
    vfunc_get_what_to_show(): number
    vfunc_get_current_node(): DomNode
    vfunc_parent_node(): DomNode | null
    vfunc_first_child(): DomNode | null
    vfunc_last_child(): DomNode | null
    vfunc_previous_sibling(): DomNode | null
    vfunc_next_sibling(): DomNode | null
    vfunc_previous_node(): DomNode | null
    vfunc_next_node(): DomNode | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GXml.DomTreeWalker */
    connect(sigName: "accept-node", callback: (($obj: DomTreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    connect_after(sigName: "accept-node", callback: (($obj: DomTreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    emit(sigName: "accept-node", node: DomNode): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomTreeWalker_ConstructProps)
    _init (config?: DomTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNamedNodeMap_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNamedNodeMap {
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNamedNodeMap */
    get_length(): number
    item(index: number): DomNode | null
    get_named_item(name: string): DomNode | null
    set_named_item(node: DomNode): DomNode | null
    remove_named_item(name: string): DomNode | null
    remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    set_named_item_ns(node: DomNode): DomNode | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNamedNodeMap */
    vfunc_get_length(): number
    vfunc_item(index: number): DomNode | null
    vfunc_get_named_item(name: string): DomNode | null
    vfunc_set_named_item(node: DomNode): DomNode | null
    vfunc_remove_named_item(name: string): DomNode | null
    vfunc_remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    vfunc_get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    vfunc_set_named_item_ns(node: DomNode): DomNode | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNamedNodeMap_ConstructProps)
    _init (config?: DomNamedNodeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomTokenList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTokenList {
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomTokenList */
    get_length(): number
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    to_string(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomTokenList */
    vfunc_get_length(): number
    vfunc_item(index: number): string | null
    vfunc_contains(token: string): boolean
    vfunc_add(tokens: string[]): void
    vfunc_remove(tokens: string[]): void
    vfunc_toggle(token: string, force: boolean, auto: boolean): boolean
    vfunc_to_string(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomTokenList_ConstructProps)
    _init (config?: DomTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomSettableTokenList_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class DomSettableTokenList {
    /* Properties of GXml.DomSettableTokenList */
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomSettableTokenList */
    get_value(): string
    set_value(value: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomSettableTokenList */
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomSettableTokenList_ConstructProps)
    _init (config?: DomSettableTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocument {
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly document_uri: string
    readonly origin: string
    readonly compat_mode: string
    readonly character_set: string
    readonly content_type: string
    readonly doctype: DomDocumentType
    readonly document_element: DomElement
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomDocument */
    get_implementation(): DomImplementation
    get_url(): string
    get_document_uri(): string
    get_origin(): string
    get_compat_mode(): string
    get_character_set(): string
    get_content_type(): string
    get_doctype(): DomDocumentType | null
    get_document_element(): DomElement | null
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(classNames: string): DomHTMLCollection
    create_element(local_name: string): DomElement
    create_element_ns(namespace: string | null, qualified_name: string): DomElement
    create_document_fragment(): DomDocumentFragment
    create_text_node(data: string): DomText
    create_comment(data: string): DomComment
    create_processing_instruction(target: string, data: string): DomProcessingInstruction
    import_node(node: DomNode, deep: boolean): DomNode
    adopt_node(node: DomNode): DomNode
    create_event(interface: string): DomEvent
    create_range(): DomRange
    create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    get_xml_parser(): Parser
    set_xml_parser(parser: Parser): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomDocument */
    vfunc_get_implementation(): DomImplementation
    vfunc_get_url(): string
    vfunc_get_document_uri(): string
    vfunc_get_origin(): string
    vfunc_get_compat_mode(): string
    vfunc_get_character_set(): string
    vfunc_get_content_type(): string
    vfunc_get_doctype(): DomDocumentType | null
    vfunc_get_document_element(): DomElement | null
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(classNames: string): DomHTMLCollection
    vfunc_create_element(local_name: string): DomElement
    vfunc_create_element_ns(namespace: string | null, qualified_name: string): DomElement
    vfunc_create_document_fragment(): DomDocumentFragment
    vfunc_create_text_node(data: string): DomText
    vfunc_create_comment(data: string): DomComment
    vfunc_create_processing_instruction(target: string, data: string): DomProcessingInstruction
    vfunc_import_node(node: DomNode, deep: boolean): DomNode
    vfunc_adopt_node(node: DomNode): DomNode
    vfunc_create_event(interface: string): DomEvent
    vfunc_create_range(): DomRange
    vfunc_create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    vfunc_create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    vfunc_write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_get_xml_parser(): Parser
    vfunc_set_xml_parser(parser: Parser): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomDocument_ConstructProps)
    _init (config?: DomDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomXMLDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomXMLDocument {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomXMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomXMLDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomXMLDocument_ConstructProps)
    _init (config?: DomXMLDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomImplementation {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomImplementation */
    create_document_type(qualified_name: string, public_id: string, system_id: string): DomDocumentType
    create_document(nspace?: string | null, qualified_name?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    create_html_document(title: string): DomDocument
    has_feature(): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomImplementation */
    vfunc_create_document_type(qualified_name: string, public_id: string, system_id: string): DomDocumentType
    vfunc_create_document(nspace?: string | null, qualified_name?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    vfunc_create_html_document(title: string): DomDocument
    vfunc_has_feature(): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomImplementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomImplementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomImplementation_ConstructProps)
    _init (config?: DomImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentFragment_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentFragment {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomDocumentFragment_ConstructProps)
    _init (config?: DomDocumentFragment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentType_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentType {
    /* Properties of GXml.DomDocumentType */
    readonly name: string
    readonly public_id: string
    readonly system_id: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomDocumentType */
    get_name(): string
    get_public_id(): string
    get_system_id(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomDocumentType */
    vfunc_get_name(): string
    vfunc_get_public_id(): string
    vfunc_get_system_id(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomDocumentType_ConstructProps)
    _init (config?: DomDocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomHtmlDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomHtmlDocument {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomHtmlDocument */
    read_from_string(str: string): void
    read_from_string_tolerant(str: string): void
    to_html(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomHtmlDocument */
    vfunc_read_from_string(str: string): void
    vfunc_read_from_string_tolerant(str: string): void
    vfunc_to_html(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomHtmlDocument_ConstructProps)
    _init (config?: DomHtmlDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomElement_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    class_name?: string
}
export class DomElement {
    /* Properties of GXml.DomElement */
    readonly namespace_uri: string
    readonly prefix: string
    readonly local_name: string
    readonly tag_name: string
    id: string
    class_name: string
    readonly class_list: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomElement */
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string
    get_tag_name(): string
    get_id(): string | null
    set_id(value?: string | null): void
    get_class_name(): string | null
    set_class_name(value?: string | null): void
    get_class_list(): DomTokenList
    get_attributes(): DomNamedNodeMap
    get_attribute(name: string): string | null
    get_attribute_ns(namespace: string | null, local_name: string): string | null
    set_attribute(name: string, value: string): void
    set_attribute_ns(namespace: string | null, name: string, value: string): void
    remove_attribute(name: string): void
    remove_attribute_ns(namespace: string | null, local_name: string): void
    has_attribute(name: string): boolean
    has_attribute_ns(namespace: string | null, local_name: string): boolean
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(class_names: string): DomHTMLCollection
    matches(selectors: string): boolean
    read_from_uri(uri: string): void
    read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_uri_finish(_res_: Gio.AsyncResult): void
    read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomElement */
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_tag_name(): string
    vfunc_get_id(): string | null
    vfunc_set_id(value?: string | null): void
    vfunc_get_class_name(): string | null
    vfunc_set_class_name(value?: string | null): void
    vfunc_get_class_list(): DomTokenList
    vfunc_get_attributes(): DomNamedNodeMap
    vfunc_get_attribute(name: string): string | null
    vfunc_get_attribute_ns(namespace: string | null, local_name: string): string | null
    vfunc_set_attribute(name: string, value: string): void
    vfunc_set_attribute_ns(namespace: string | null, name: string, value: string): void
    vfunc_remove_attribute(name: string): void
    vfunc_remove_attribute_ns(namespace: string | null, local_name: string): void
    vfunc_has_attribute(name: string): boolean
    vfunc_has_attribute_ns(namespace: string | null, local_name: string): boolean
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(class_names: string): DomHTMLCollection
    vfunc_matches(selectors: string): boolean
    vfunc_read_from_uri(uri: string): void
    vfunc_read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_uri_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomElement_ConstructProps)
    _init (config?: DomElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventTarget_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventTarget {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomEventTarget */
    add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatch_event(event: DomEvent): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEventTarget */
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventTarget, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventTarget, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomEventTarget_ConstructProps)
    _init (config?: DomEventTarget_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventListener_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventListener {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomEventListener */
    handle_event(event: DomEvent): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEventListener */
    vfunc_handle_event(event: DomEvent): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventListener, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventListener, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomEventListener_ConstructProps)
    _init (config?: DomEventListener_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEvent {
    /* Properties of GXml.DomEvent */
    readonly etype: string
    readonly event_target: DomEventTarget
    readonly current_target: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly is_trusted: boolean
    readonly time_stamp: DomTimeStamp
    readonly default_prevented: boolean
    readonly event_phase: DomEventPhase
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomEvent */
    get_etype(): string
    get_event_target(): DomEventTarget | null
    get_current_target(): DomEventTarget | null
    get_bubbles(): boolean
    get_cancelable(): boolean
    get_is_trusted(): boolean
    get_time_stamp(): DomTimeStamp
    get_default_prevented(): boolean
    get_event_phase(): DomEventPhase
    stop_propagation(): void
    stop_immediate_propagation(): void
    prevent_default(): void
    init_event(type: string, bubbles: boolean, cancelable: boolean): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEvent */
    vfunc_get_etype(): string
    vfunc_get_event_target(): DomEventTarget | null
    vfunc_get_current_target(): DomEventTarget | null
    vfunc_get_bubbles(): boolean
    vfunc_get_cancelable(): boolean
    vfunc_get_is_trusted(): boolean
    vfunc_get_time_stamp(): DomTimeStamp
    vfunc_get_default_prevented(): boolean
    vfunc_get_event_phase(): DomEventPhase
    vfunc_stop_propagation(): void
    vfunc_stop_immediate_propagation(): void
    vfunc_prevent_default(): void
    vfunc_init_event(type: string, bubbles: boolean, cancelable: boolean): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomEvent_ConstructProps)
    _init (config?: DomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCustomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomCustomEvent {
    /* Properties of GXml.DomCustomEvent */
    readonly detail: any
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomCustomEvent */
    get_detail(): /* result */ any
    init_custom_event(type: string, bubbles: boolean, cancelable: boolean, detail: any): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomCustomEvent */
    vfunc_get_detail(): /* result */ any
    vfunc_init_custom_event(type: string, bubbles: boolean, cancelable: boolean, detail: any): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomCustomEvent_ConstructProps)
    _init (config?: DomCustomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationObserver_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomMutationObserver {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomMutationObserver */
    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    take_records(): Gee.List
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomMutationObserver */
    vfunc_observe(target: Node, options: DomMutationObserverInit): void
    vfunc_disconnect(): void
    vfunc_take_records(): Gee.List
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationObserver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomMutationObserver_ConstructProps)
    _init (config?: DomMutationObserver_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationRecord_ConstructProps extends GObject.Object_ConstructProps {
    added_nodes?: DomNodeList
    removed_nodes?: DomNodeList
}
export class DomMutationRecord {
    /* Properties of GXml.DomMutationRecord */
    readonly mtype: string
    readonly target: DomNode
    added_nodes: DomNodeList
    removed_nodes: DomNodeList
    readonly previous_sibling: DomNode
    readonly next_sibling: DomNode
    readonly attribute_name: string
    readonly attribute_namespace: string
    readonly old_value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomMutationRecord */
    get_mtype(): string
    get_target(): DomNode
    get_added_nodes(): DomNodeList
    set_added_nodes(value: DomNodeList): void
    get_removed_nodes(): DomNodeList
    set_removed_nodes(value: DomNodeList): void
    get_previous_sibling(): DomNode | null
    get_next_sibling(): DomNode | null
    get_attribute_name(): string | null
    get_attribute_namespace(): string | null
    get_old_value(): string | null
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomMutationRecord */
    vfunc_get_mtype(): string
    vfunc_get_target(): DomNode
    vfunc_get_added_nodes(): DomNodeList
    vfunc_set_added_nodes(value: DomNodeList): void
    vfunc_get_removed_nodes(): DomNodeList
    vfunc_set_removed_nodes(value: DomNodeList): void
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_attribute_name(): string | null
    vfunc_get_attribute_namespace(): string | null
    vfunc_get_old_value(): string | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomMutationRecord_ConstructProps)
    _init (config?: DomMutationRecord_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNode_ConstructProps extends GObject.Object_ConstructProps {
    owner_document?: DomDocument
    node_value?: string
    text_content?: string
}
export class DomNode {
    /* Properties of GXml.DomNode */
    readonly node_type: DomNodeNodeType
    readonly node_name: string
    readonly base_uri: string
    owner_document: DomDocument
    readonly parent_node: DomNode
    readonly parent_element: DomElement
    readonly child_nodes: DomNodeList
    readonly first_child: DomNode
    readonly last_child: DomNode
    readonly previous_sibling: DomNode
    readonly next_sibling: DomNode
    node_value: string
    text_content: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomNode */
    get_node_type(): DomNodeNodeType
    get_node_name(): string
    get_base_uri(): string | null
    get_owner_document(): DomDocument | null
    set_owner_document(value?: DomDocument | null): void
    get_parent_node(): DomNode | null
    get_parent_element(): DomElement | null
    get_child_nodes(): DomNodeList
    get_first_child(): DomNode | null
    get_last_child(): DomNode | null
    get_previous_sibling(): DomNode | null
    get_next_sibling(): DomNode | null
    get_node_value(): string | null
    set_node_value(value?: string | null): void
    get_text_content(): string | null
    set_text_content(value?: string | null): void
    has_child_nodes(): boolean
    normalize(): void
    is_equal_node(node?: DomNode | null): boolean
    compare_document_position(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookup_prefix(nspace?: string | null): string | null
    lookup_namespace_uri(prefix?: string | null): string | null
    is_default_namespace(nspace?: string | null): boolean
    insert_before(node: DomNode, child?: DomNode | null): DomNode
    append_child(node: DomNode): DomNode
    replace_child(node: DomNode, child: DomNode): DomNode
    remove_child(child: DomNode): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNode */
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNode_ConstructProps)
    _init (config?: DomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface DomRange_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomRange {
    /* Properties of GXml.DomRange */
    readonly start_container: DomNode
    readonly start_offset: number
    readonly end_container: DomNode
    readonly end_offset: number
    readonly collapsed: boolean
    readonly common_ancestor_container: DomNode
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomRange */
    get_start_container(): DomNode
    get_start_offset(): number
    get_end_container(): DomNode
    get_end_offset(): number
    get_collapsed(): boolean
    get_common_ancestor_container(): DomNode
    set_start(node: DomNode, offset: number): void
    set_end(node: DomNode, offset: number): void
    set_start_before(node: DomNode): void
    set_start_after(node: DomNode): void
    set_end_before(node: DomNode): void
    set_end_after(node: DomNode): void
    collapse(to_start: boolean): void
    select_node(node: DomNode): void
    select_node_contents(node: DomNode): void
    compare_boundary_points(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    delete_contents(): void
    extract_contents(): DomDocumentFragment | null
    clone_contents(): DomDocumentFragment | null
    insert_node(node: DomNode): void
    surround_contents(newParent: DomNode): void
    clone_range(): DomRange
    detach(): void
    is_point_in_range(node: DomNode, offset: number): boolean
    compare_point(node: DomNode, offset: number): number
    intersects_node(node: DomNode): boolean
    to_string(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomRange */
    vfunc_get_start_container(): DomNode
    vfunc_get_start_offset(): number
    vfunc_get_end_container(): DomNode
    vfunc_get_end_offset(): number
    vfunc_get_collapsed(): boolean
    vfunc_get_common_ancestor_container(): DomNode
    vfunc_set_start(node: DomNode, offset: number): void
    vfunc_set_end(node: DomNode, offset: number): void
    vfunc_set_start_before(node: DomNode): void
    vfunc_set_start_after(node: DomNode): void
    vfunc_set_end_before(node: DomNode): void
    vfunc_set_end_after(node: DomNode): void
    vfunc_collapse(to_start: boolean): void
    vfunc_select_node(node: DomNode): void
    vfunc_select_node_contents(node: DomNode): void
    vfunc_compare_boundary_points(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    vfunc_delete_contents(): void
    vfunc_extract_contents(): DomDocumentFragment | null
    vfunc_clone_contents(): DomDocumentFragment | null
    vfunc_insert_node(node: DomNode): void
    vfunc_surround_contents(newParent: DomNode): void
    vfunc_clone_range(): DomRange
    vfunc_detach(): void
    vfunc_is_point_in_range(node: DomNode, offset: number): boolean
    vfunc_compare_point(node: DomNode, offset: number): number
    vfunc_intersects_node(node: DomNode): boolean
    vfunc_to_string(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomRange_ConstructProps)
    _init (config?: DomRange_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSchema_ConstructProps extends GObject.Object_ConstructProps {
    element_definitions?: IXsdListElements
    simple_type_definitions?: IXsdListSimpleTypes
    complex_type_definitions?: IXsdListComplexTypes
}
export class IXsdSchema {
    /* Properties of GXml.IXsdSchema */
    element_definitions: IXsdListElements
    simple_type_definitions: IXsdListSimpleTypes
    complex_type_definitions: IXsdListComplexTypes
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdSchema */
    get_element_definitions(): IXsdListElements
    set_element_definitions(value: IXsdListElements): void
    get_simple_type_definitions(): IXsdListSimpleTypes
    set_simple_type_definitions(value: IXsdListSimpleTypes): void
    get_complex_type_definitions(): IXsdListComplexTypes
    set_complex_type_definitions(value: IXsdListComplexTypes): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdSchema */
    vfunc_get_element_definitions(): IXsdListElements
    vfunc_set_element_definitions(value: IXsdListElements): void
    vfunc_get_simple_type_definitions(): IXsdListSimpleTypes
    vfunc_set_simple_type_definitions(value: IXsdListSimpleTypes): void
    vfunc_get_complex_type_definitions(): IXsdListComplexTypes
    vfunc_set_complex_type_definitions(value: IXsdListComplexTypes): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdSchema_ConstructProps)
    _init (config?: IXsdSchema_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseType_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseType {
    /* Properties of GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseType */
    get_anotation(): IXsdAnnotation
    set_anotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseType */
    vfunc_get_anotation(): IXsdAnnotation
    vfunc_set_anotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdBaseType_ConstructProps)
    _init (config?: IXsdBaseType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleType_ConstructProps extends GObject.Object_ConstructProps {
    final?: string
    id?: string
    name?: string
    annotation?: IXsdAnnotation
    list?: IXsdTypeList
    union?: IXsdTypeUnion
    restriction?: IXsdTypeRestriction
}
export class IXsdSimpleType {
    /* Properties of GXml.IXsdSimpleType */
    final: string
    id: string
    name: string
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdSimpleType */
    get_final(): string
    set_final(value: string): void
    get_id(): string
    set_id(value: string): void
    get_name(): string
    set_name(value: string): void
    get_annotation(): IXsdAnnotation
    set_annotation(value: IXsdAnnotation): void
    get_list(): IXsdTypeList
    set_list(value: IXsdTypeList): void
    get_union(): IXsdTypeUnion
    set_union(value: IXsdTypeUnion): void
    get_restriction(): IXsdTypeRestriction
    set_restriction(value: IXsdTypeRestriction): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdSimpleType */
    vfunc_get_final(): string
    vfunc_set_final(value: string): void
    vfunc_get_id(): string
    vfunc_set_id(value: string): void
    vfunc_get_name(): string
    vfunc_set_name(value: string): void
    vfunc_get_annotation(): IXsdAnnotation
    vfunc_set_annotation(value: IXsdAnnotation): void
    vfunc_get_list(): IXsdTypeList
    vfunc_set_list(value: IXsdTypeList): void
    vfunc_get_union(): IXsdTypeUnion
    vfunc_set_union(value: IXsdTypeUnion): void
    vfunc_get_restriction(): IXsdTypeRestriction
    vfunc_set_restriction(value: IXsdTypeRestriction): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdSimpleType_ConstructProps)
    _init (config?: IXsdSimpleType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeDef_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeDef {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeDef_ConstructProps)
    _init (config?: IXsdTypeDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestriction_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
    id?: string
    simple_type?: IXsdSimpleType
    enumerations?: IXsdListTypeRestrictionEnumerations
    white_spaces?: IXsdListTypeRestrictionWhiteSpaces
}
export class IXsdTypeRestriction {
    /* Properties of GXml.IXsdTypeRestriction */
    base: string
    id: string
    simple_type: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    white_spaces: IXsdListTypeRestrictionWhiteSpaces
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestriction */
    get_base(): string
    set_base(value: string): void
    get_id(): string
    set_id(value: string): void
    get_simple_type(): IXsdSimpleType
    set_simple_type(value: IXsdSimpleType): void
    get_enumerations(): IXsdListTypeRestrictionEnumerations
    set_enumerations(value: IXsdListTypeRestrictionEnumerations): void
    get_white_spaces(): IXsdListTypeRestrictionWhiteSpaces
    set_white_spaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestriction */
    vfunc_get_base(): string
    vfunc_set_base(value: string): void
    vfunc_get_id(): string
    vfunc_set_id(value: string): void
    vfunc_get_simple_type(): IXsdSimpleType
    vfunc_set_simple_type(value: IXsdSimpleType): void
    vfunc_get_enumerations(): IXsdListTypeRestrictionEnumerations
    vfunc_set_enumerations(value: IXsdListTypeRestrictionEnumerations): void
    vfunc_get_white_spaces(): IXsdListTypeRestrictionWhiteSpaces
    vfunc_set_white_spaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestriction_ConstructProps)
    _init (config?: IXsdTypeRestriction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeList {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeList_ConstructProps)
    _init (config?: IXsdTypeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeUnion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeUnion {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeUnion_ConstructProps)
    _init (config?: IXsdTypeUnion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionDef_ConstructProps extends GObject.Object_ConstructProps {
    annotation?: IXsdAnnotation
}
export class IXsdTypeRestrictionDef {
    /* Properties of GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionDef */
    get_annotation(): IXsdAnnotation
    set_annotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionDef */
    vfunc_get_annotation(): IXsdAnnotation
    vfunc_set_annotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionDef_ConstructProps)
    _init (config?: IXsdTypeRestrictionDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinExclusive {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinInclusive {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxExclusive {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxInclusive {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionTotalDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionTotalDigits {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionTotalDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionFractionDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionFractionDigits {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionFractionDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionLength {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinLength {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxLength {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionEnumeration_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    value?: string
}
export class IXsdTypeRestrictionEnumeration {
    /* Properties of GXml.IXsdTypeRestrictionEnumeration */
    id: string
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionEnumeration */
    get_id(): string
    set_id(value: string): void
    get_value(): string
    set_value(value: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionEnumeration */
    vfunc_get_id(): string
    vfunc_set_id(value: string): void
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: IXsdTypeRestrictionEnumeration_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionWhiteSpace_ConstructProps extends GObject.Object_ConstructProps {
    fixed?: boolean
    id?: string
    value?: string
}
export class IXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml.IXsdTypeRestrictionWhiteSpace */
    fixed: boolean
    id: string
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionWhiteSpace */
    get_fixed(): boolean
    set_fixed(value: boolean): void
    get_id(): string
    set_id(value: string): void
    get_value(): string
    set_value(value: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionWhiteSpace */
    vfunc_get_fixed(): boolean
    vfunc_set_fixed(value: boolean): void
    vfunc_get_id(): string
    vfunc_set_id(value: string): void
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionPattern_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionPattern {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: IXsdTypeRestrictionPattern_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionAssertion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionAssertion {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: IXsdTypeRestrictionAssertion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionExplicitTimezone_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionExplicitTimezone {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexType_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    default_attributes_apply?: boolean
    content_type?: IXsdBaseContent
}
export class IXsdComplexType {
    /* Properties of GXml.IXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    default_attributes_apply: boolean
    content_type: IXsdBaseContent
    readonly type_attributes: IXsdListAttributes
    readonly group_attributes: IXsdListAttributesGroup
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdComplexType */
    get_abstract(): boolean
    set_abstract(value: boolean): void
    get_block(): string
    set_block(value: string): void
    get_final(): string
    set_final(value: string): void
    get_mixed(): boolean
    set_mixed(value: boolean): void
    get_name(): string
    set_name(value: string): void
    get_default_attributes_apply(): boolean
    set_default_attributes_apply(value: boolean): void
    get_content_type(): IXsdBaseContent
    set_content_type(value: IXsdBaseContent): void
    get_type_attributes(): IXsdListAttributes
    get_group_attributes(): IXsdListAttributesGroup
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdComplexType */
    vfunc_get_abstract(): boolean
    vfunc_set_abstract(value: boolean): void
    vfunc_get_block(): string
    vfunc_set_block(value: string): void
    vfunc_get_final(): string
    vfunc_set_final(value: string): void
    vfunc_get_mixed(): boolean
    vfunc_set_mixed(value: boolean): void
    vfunc_get_name(): string
    vfunc_set_name(value: string): void
    vfunc_get_default_attributes_apply(): boolean
    vfunc_set_default_attributes_apply(value: boolean): void
    vfunc_get_content_type(): IXsdBaseContent
    vfunc_set_content_type(value: IXsdBaseContent): void
    vfunc_get_type_attributes(): IXsdListAttributes
    vfunc_get_group_attributes(): IXsdListAttributesGroup
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdComplexType_ConstructProps)
    _init (config?: IXsdComplexType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdExtension_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
}
export class IXsdExtension {
    /* Properties of GXml.IXsdExtension */
    base: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdExtension */
    get_base(): string
    set_base(value: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdExtension */
    vfunc_get_base(): string
    vfunc_set_base(value: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdExtension_ConstructProps)
    _init (config?: IXsdExtension_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdElement_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    id?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitution_group?: DomTokenList
    target_namespace?: string
    object_type?: string
    anotation?: IXsdAnnotation
    simple_type?: IXsdSimpleType
    complex_type?: IXsdComplexType
}
export class IXsdElement {
    /* Properties of GXml.IXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    id: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitution_group: DomTokenList
    target_namespace: string
    object_type: string
    anotation: IXsdAnnotation
    simple_type: IXsdSimpleType
    complex_type: IXsdComplexType
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdElement */
    get_abstract(): boolean
    set_abstract(value: boolean): void
    get_block(): string
    set_block(value: string): void
    get_default(): string
    set_default(value: string): void
    get_final(): string
    set_final(value: string): void
    get_fixed(): string
    set_fixed(value: string): void
    get_form(): string
    set_form(value: string): void
    get_id(): string | null
    set_id(value?: string | null): void
    get_maxOccurs(): string
    set_maxOccurs(value: string): void
    get_minOccurs(): string
    set_minOccurs(value: string): void
    get_name(): string
    set_name(value: string): void
    get_nillable(): boolean
    set_nillable(value: boolean): void
    get_ref(): string
    set_ref(value: string): void
    get_substitution_group(): DomTokenList
    set_substitution_group(value: DomTokenList): void
    get_target_namespace(): string
    set_target_namespace(value: string): void
    get_object_type(): string
    set_object_type(value: string): void
    get_anotation(): IXsdAnnotation
    set_anotation(value: IXsdAnnotation): void
    get_simple_type(): IXsdSimpleType
    set_simple_type(value: IXsdSimpleType): void
    get_complex_type(): IXsdComplexType
    set_complex_type(value: IXsdComplexType): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdElement */
    vfunc_get_abstract(): boolean
    vfunc_set_abstract(value: boolean): void
    vfunc_get_block(): string
    vfunc_set_block(value: string): void
    vfunc_get_default(): string
    vfunc_set_default(value: string): void
    vfunc_get_final(): string
    vfunc_set_final(value: string): void
    vfunc_get_fixed(): string
    vfunc_set_fixed(value: string): void
    vfunc_get_form(): string
    vfunc_set_form(value: string): void
    vfunc_get_id(): string | null
    vfunc_set_id(value?: string | null): void
    vfunc_get_maxOccurs(): string
    vfunc_set_maxOccurs(value: string): void
    vfunc_get_minOccurs(): string
    vfunc_set_minOccurs(value: string): void
    vfunc_get_name(): string
    vfunc_set_name(value: string): void
    vfunc_get_nillable(): boolean
    vfunc_set_nillable(value: boolean): void
    vfunc_get_ref(): string
    vfunc_set_ref(value: string): void
    vfunc_get_substitution_group(): DomTokenList
    vfunc_set_substitution_group(value: DomTokenList): void
    vfunc_get_target_namespace(): string
    vfunc_set_target_namespace(value: string): void
    vfunc_get_object_type(): string
    vfunc_set_object_type(value: string): void
    vfunc_get_anotation(): IXsdAnnotation
    vfunc_set_anotation(value: IXsdAnnotation): void
    vfunc_get_simple_type(): IXsdSimpleType
    vfunc_set_simple_type(value: IXsdSimpleType): void
    vfunc_get_complex_type(): IXsdComplexType
    vfunc_set_complex_type(value: IXsdComplexType): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdElement_ConstructProps)
    _init (config?: IXsdElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAnnotation_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAnnotation {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdAnnotation_ConstructProps)
    _init (config?: IXsdAnnotation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseContent_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseContent {
    /* Properties of GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseContent */
    get_anotation(): IXsdAnnotation
    set_anotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseContent */
    vfunc_get_anotation(): IXsdAnnotation
    vfunc_set_anotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdBaseContent_ConstructProps)
    _init (config?: IXsdBaseContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdSimpleContent {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdSimpleContent_ConstructProps)
    _init (config?: IXsdSimpleContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdComplexContent {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdComplexContent_ConstructProps)
    _init (config?: IXsdComplexContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdOpenContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdOpenContent {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdOpenContent_ConstructProps)
    _init (config?: IXsdOpenContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseAttribute_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseAttribute {
    /* Properties of GXml.IXsdBaseAttribute */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseAttribute */
    get_anotation(): IXsdAnnotation
    set_anotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseAttribute */
    vfunc_get_anotation(): IXsdAnnotation
    vfunc_set_anotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdBaseAttribute_ConstructProps)
    _init (config?: IXsdBaseAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttribute_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttribute {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdAttribute_ConstructProps)
    _init (config?: IXsdAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttributeGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttributeGroup {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdAttributeGroup_ConstructProps)
    _init (config?: IXsdAttributeGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdList_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    items_type?: GObject.Type
    items_name?: GObject.Type
}
export class IXsdList {
    /* Properties of GXml.IXsdList */
    element: DomElement
    items_type: GObject.Type
    items_name: GObject.Type
    readonly length: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.IXsdList */
    get_element(): DomElement
    set_element(value: DomElement): void
    get_items_type(): GObject.Type
    set_items_type(value: GObject.Type): void
    get_items_name(): GObject.Type
    set_items_name(value: GObject.Type): void
    get_length(): number
    get_item(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdList */
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_get_items_name(): GObject.Type
    vfunc_set_items_name(value: GObject.Type): void
    vfunc_get_length(): number
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(element: DomElement): void
    vfunc_remove(index: number): void
    vfunc_index_of(element: DomElement): number
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdList_ConstructProps)
    _init (config?: IXsdList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListElements_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListElements {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListElements, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListElements_ConstructProps)
    _init (config?: IXsdListElements_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListSimpleTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListSimpleTypes {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListSimpleTypes_ConstructProps)
    _init (config?: IXsdListSimpleTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListComplexTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListComplexTypes {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListComplexTypes_ConstructProps)
    _init (config?: IXsdListComplexTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributes {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListAttributes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListAttributes_ConstructProps)
    _init (config?: IXsdListAttributes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributesGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributesGroup {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributesGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListAttributesGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListAttributesGroup_ConstructProps)
    _init (config?: IXsdListAttributesGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionEnumerations_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionEnumerations {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: IXsdListTypeRestrictionEnumerations_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionWhiteSpaces {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Object_ConstructProps extends GObject.Object_ConstructProps {
}
export class Object {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Object */
    get_properties_list(): GObject.ParamSpec[]
    find_property_name(nick: string): GObject.ParamSpec | null
    find_object_property_name(pname: string): GObject.ParamSpec | null
    get_property_element_list(): GObject.ParamSpec[]
    get_property_string(prop: GObject.ParamSpec): string | null
    get_attribute(name: string): string | null
    find_property(name: string): Property | null
    set_attribute(name: string, val: string): boolean
    get_child(name: string): DomElement | null
    find_elements(name: string): DomElementList
    remove_attribute(name: string): boolean
    set_instance_property(name: string): boolean
    clean_property_elements(name: string): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Object */
    vfunc_get_properties_list(): GObject.ParamSpec[]
    vfunc_find_property_name(nick: string): GObject.ParamSpec | null
    vfunc_find_object_property_name(pname: string): GObject.ParamSpec | null
    vfunc_get_property_element_list(): GObject.ParamSpec[]
    vfunc_get_property_string(prop: GObject.ParamSpec): string | null
    vfunc_get_attribute(name: string): string | null
    vfunc_find_property(name: string): Property | null
    vfunc_set_attribute(name: string, val: string): boolean
    vfunc_get_child(name: string): DomElement | null
    vfunc_find_elements(name: string): DomElementList
    vfunc_remove_attribute(name: string): boolean
    vfunc_set_instance_property(name: string): boolean
    vfunc_clean_property_elements(name: string): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Parser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
    cancellable?: Gio.Cancellable
}
export class Parser {
    /* Properties of GXml.Parser */
    backup: boolean
    indent: boolean
    cancellable: Gio.Cancellable
    readonly node: DomNode
    readonly types: GLib.HashTable
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Parser */
    get_backup(): boolean
    set_backup(value: boolean): void
    get_indent(): boolean
    set_indent(value: boolean): void
    get_cancellable(): Gio.Cancellable | null
    set_cancellable(value?: Gio.Cancellable | null): void
    get_node(): DomNode
    get_types(): GLib.HashTable
    write_file(file: Gio.File): void
    write_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_string(): string
    write_string_async(_callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    write_stream(stream: Gio.OutputStream): void
    write_stream_async(stream: Gio.OutputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    read_file(file: Gio.File): void
    read_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    read_file_finish(_res_: Gio.AsyncResult): void
    read_stream(stream: Gio.InputStream): void
    read_stream_async(stream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    read_stream_finish(_res_: Gio.AsyncResult): void
    read_string(str: string): void
    read_string_async(str: string, _callback_?: Gio.AsyncReadyCallback | null): void
    read_string_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(_callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    read_child_nodes(parent: DomNode): void
    read_child_nodes_async(parent: DomNode, _callback_?: Gio.AsyncReadyCallback | null): void
    read_child_nodes_finish(_res_: Gio.AsyncResult): void
    read_child_node(parent: DomNode): boolean
    read_child_element(parent: DomNode): boolean
    read_element_property(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    add_element_collection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    read_child_nodes_stream(istream: Gio.InputStream): void
    read_child_nodes_string(str: string): void
    read_unparsed(): string
    move_next_node(): boolean
    current_is_empty_element(): boolean
    current_is_element(): boolean
    current_is_document(): boolean
    current_node_name(): string
    create_element(parent: DomNode): DomElement | null
    read_element(element: DomElement): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Parser */
    vfunc_get_backup(): boolean
    vfunc_set_backup(value: boolean): void
    vfunc_get_indent(): boolean
    vfunc_set_indent(value: boolean): void
    vfunc_get_cancellable(): Gio.Cancellable | null
    vfunc_set_cancellable(value?: Gio.Cancellable | null): void
    vfunc_get_node(): DomNode
    vfunc_get_types(): GLib.HashTable
    vfunc_write_file(file: Gio.File): void
    vfunc_write_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_string(): string
    vfunc_write_string_async(_callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_write_stream(stream: Gio.OutputStream): void
    vfunc_write_stream_async(stream: Gio.OutputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_file(file: Gio.File): void
    vfunc_read_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_stream(stream: Gio.InputStream): void
    vfunc_read_stream_async(stream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_string(str: string): void
    vfunc_read_string_async(str: string, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_string_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(_callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_read_child_nodes(parent: DomNode): void
    vfunc_read_child_nodes_async(parent: DomNode, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_child_nodes_finish(_res_: Gio.AsyncResult): void
    vfunc_read_child_node(parent: DomNode): boolean
    vfunc_read_child_element(parent: DomNode): boolean
    vfunc_read_element_property(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    vfunc_add_element_collection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    vfunc_read_child_nodes_stream(istream: Gio.InputStream): void
    vfunc_read_child_nodes_string(str: string): void
    vfunc_read_unparsed(): string
    vfunc_move_next_node(): boolean
    vfunc_current_is_empty_element(): boolean
    vfunc_current_is_element(): boolean
    vfunc_current_is_document(): boolean
    vfunc_current_node_name(): string
    vfunc_create_element(parent: DomNode): DomElement | null
    vfunc_read_element(element: DomElement): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancellable", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancellable", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::types", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::types", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Parser_ConstructProps)
    _init (config?: Parser_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Property_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class Property {
    /* Properties of GXml.Property */
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Property */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Property */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Property, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Property_ConstructProps)
    _init (config?: Property_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathContext_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathContext {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.XPathContext */
    vfunc_evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XPathContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XPathContext_ConstructProps)
    _init (config?: XPathContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathObject {
    /* Properties of GXml.XPathObject */
    readonly object_type: XPathObjectType
    readonly boolean_value: boolean
    readonly string_value: string
    readonly number_value: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XPathObject */
    get_object_type(): XPathObjectType
    get_boolean_value(): boolean
    get_string_value(): string
    get_number_value(): number
    get_nodeset(): DomHTMLCollection
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.XPathObject */
    vfunc_get_object_type(): XPathObjectType
    vfunc_get_boolean_value(): boolean
    vfunc_get_string_value(): string
    vfunc_get_number_value(): number
    vfunc_get_nodeset(): DomHTMLCollection
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XPathObject_ConstructProps)
    _init (config?: XPathObject_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ArrayList_ConstructProps extends BaseCollection_ConstructProps {
}
export class ArrayList {
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ArrayList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ArrayList_ConstructProps)
    _init (config?: ArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ArrayList
    static $gtype: GObject.Type
}
export interface Attr_ConstructProps extends Node_ConstructProps {
    value?: string
}
export class Attr {
    /* Properties of GXml.Attr */
    readonly is_referenced: boolean
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomAttr */
    readonly name: string
    value: string
    /* Fields of GXml.Attr */
    _namespace_uri: string
    prop: Property
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Attr */
    get_is_referenced(): boolean
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomAttr */
    get_local_name(): string
    get_name(): string
    get_value(): string
    set_value(value: string): void
    get_specified(): boolean
    /* Virtual methods of GXml.Attr */
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_local_name(): string | null
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_get_specified(): boolean
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::is-referenced", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-referenced", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Attr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Attr_ConstructProps)
    _init (config?: Attr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: DomElement, name: string, val: string): Attr
    static namespace(element: DomElement, namespace_uri: string, prefix: string | null, name: string, val: string): Attr
    static reference(element: DomElement, name: string): Attr
    static $gtype: GObject.Type
}
export interface BaseCollection_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    items_type?: GObject.Type
}
export class BaseCollection {
    /* Properties of Gee.Iterable */
    readonly element_type: GObject.Type
    /* Properties of GXml.Collection */
    readonly nodes_index: GLib.Queue
    element: DomElement
    readonly items_name: string
    items_type: GObject.Type
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    first_match(pred: Gee.Predicate): object | null
    any_match(pred: Gee.Predicate): boolean
    all_match(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    get_element_type(): GObject.Type
    /* Methods of Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of GXml.Collection */
    get_nodes_index(): GLib.Queue
    get_element(): DomElement
    set_element(value: DomElement): void
    get_items_name(): string
    get_items_type(): GObject.Type
    set_items_type(value: GObject.Type): void
    search(): void
    get_item(index: number): DomElement | null
    append(node: DomElement): void
    get_length(): number
    initialize(t: GObject.Type): void
    create_item(): DomElement | null
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BaseCollection_ConstructProps)
    _init (config?: BaseCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface CssSelector_ConstructProps extends GObject.Object_ConstructProps {
    selector_type?: CssSelectorType
    name?: string
    value?: string
    combiner?: CssCombiner
}
export class CssSelector {
    /* Properties of GXml.CssSelector */
    selector_type: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CssSelector */
    get_selector_type(): CssSelectorType
    set_selector_type(value: CssSelectorType): void
    get_name(): string
    set_name(value: string): void
    get_value(): string
    set_value(value: string): void
    get_combiner(): CssCombiner
    set_combiner(value: CssCombiner): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selector-type", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::combiner", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CssSelector_ConstructProps)
    _init (config?: CssSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(t: CssSelectorType, name: string): CssSelector
    static with_value(t: CssSelectorType, name: string, value: string): CssSelector
    static $gtype: GObject.Type
}
export interface CssElementSelector_ConstructProps extends CssSelector_ConstructProps {
    prefix?: string
    local_name?: string
}
export class CssElementSelector {
    /* Properties of GXml.CssElementSelector */
    readonly prefixed: boolean
    prefix: string
    local_name: string
    /* Properties of GXml.CssSelector */
    selector_type: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CssElementSelector */
    get_prefixed(): boolean
    get_prefix(): string | null
    set_prefix(value?: string | null): void
    get_local_name(): string
    set_local_name(value: string): void
    /* Methods of GXml.CssSelector */
    get_selector_type(): CssSelectorType
    set_selector_type(value: CssSelectorType): void
    get_name(): string
    set_name(value: string): void
    get_value(): string
    set_value(value: string): void
    get_combiner(): CssCombiner
    set_combiner(value: CssCombiner): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::prefixed", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefixed", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selector-type", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::combiner", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssElementSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CssElementSelector_ConstructProps)
    _init (config?: CssElementSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(prefix: string | null, local_name: string): CssElementSelector
    static new(t: CssSelectorType, name: string): CssElementSelector
    static $gtype: GObject.Type
}
export interface CssAttributeSelector_ConstructProps extends CssSelector_ConstructProps {
    prefix?: string
    local_name?: string
}
export class CssAttributeSelector {
    /* Properties of GXml.CssAttributeSelector */
    prefix: string
    local_name: string
    /* Properties of GXml.CssSelector */
    selector_type: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CssAttributeSelector */
    get_prefix(): string | null
    set_prefix(value?: string | null): void
    get_local_name(): string
    set_local_name(value: string): void
    /* Methods of GXml.CssSelector */
    get_selector_type(): CssSelectorType
    set_selector_type(value: CssSelectorType): void
    get_name(): string
    set_name(value: string): void
    get_value(): string
    set_value(value: string): void
    get_combiner(): CssCombiner
    set_combiner(value: CssCombiner): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::prefix", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selector-type", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::combiner", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssAttributeSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CssAttributeSelector_ConstructProps)
    _init (config?: CssAttributeSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(prefix: string | null, local_name: string): CssAttributeSelector
    static new(t: CssSelectorType, name: string): CssAttributeSelector
    static $gtype: GObject.Type
}
export interface CssNotSelector_ConstructProps extends CssSelector_ConstructProps {
}
export class CssNotSelector {
    /* Properties of GXml.CssNotSelector */
    readonly selectors: Gee.List
    /* Properties of GXml.CssSelector */
    selector_type: CssSelectorType
    name: string
    value: string
    combiner: CssCombiner
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CssNotSelector */
    get_selectors(): Gee.List
    /* Methods of GXml.CssSelector */
    get_selector_type(): CssSelectorType
    set_selector_type(value: CssSelectorType): void
    get_name(): string
    set_name(value: string): void
    get_value(): string
    set_value(value: string): void
    get_combiner(): CssCombiner
    set_combiner(value: CssCombiner): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selectors", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectors", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selector-type", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::combiner", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::combiner", callback: (($obj: CssNotSelector, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CssNotSelector_ConstructProps)
    _init (config?: CssNotSelector_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CssNotSelector
    static new(t: CssSelectorType, name: string): CssNotSelector
    static $gtype: GObject.Type
}
export interface CssSelectorParser_ConstructProps extends GObject.Object_ConstructProps {
}
export class CssSelectorParser {
    /* Properties of GXml.CssSelectorParser */
    readonly selectors: Gee.List
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CssSelectorParser */
    parse(selectors: string): void
    get_selectors(): Gee.List
    match(element: DomElement): boolean
    query_selector_all(element: DomElement): DomNodeList
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selectors", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectors", callback: (($obj: CssSelectorParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CssSelectorParser_ConstructProps)
    _init (config?: CssSelectorParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CssSelectorParser
    static $gtype: GObject.Type
}
export interface Document_ConstructProps extends Node_ConstructProps {
}
export class Document {
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly document_uri: string
    readonly origin: string
    readonly compat_mode: string
    readonly character_set: string
    readonly content_type: string
    readonly doctype: DomDocumentType
    readonly document_element: DomElement
    /* Fields of GXml.Document */
    _implementation: DomImplementation
    _url: string
    _origin: string
    _compat_mode: string
    _character_set: string
    _content_type: string
    _constructor: DomEvent
    _parser: Parser
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Document */
    search_root_element_property(): Element
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GXml.DomNonElementParentNode */
    get_element_by_id(element_id: string): DomElement | null
    /* Methods of GXml.DomDocument */
    get_implementation(): DomImplementation
    get_url(): string
    get_document_uri(): string
    get_origin(): string
    get_compat_mode(): string
    get_character_set(): string
    get_content_type(): string
    get_doctype(): DomDocumentType | null
    get_document_element(): DomElement | null
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(classNames: string): DomHTMLCollection
    create_element(local_name: string): DomElement
    create_element_ns(namespace: string | null, qualified_name: string): DomElement
    create_document_fragment(): DomDocumentFragment
    create_text_node(data: string): DomText
    create_comment(data: string): DomComment
    create_processing_instruction(target: string, data: string): DomProcessingInstruction
    import_node(node: DomNode, deep: boolean): DomNode
    adopt_node(node: DomNode): DomNode
    create_event(interface: string): DomEvent
    create_range(): DomRange
    create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    get_xml_parser(): Parser
    set_xml_parser(parser: Parser): void
    /* Virtual methods of GXml.Document */
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_element_by_id(element_id: string): DomElement | null
    vfunc_get_implementation(): DomImplementation
    vfunc_get_url(): string
    vfunc_get_document_uri(): string
    vfunc_get_origin(): string
    vfunc_get_compat_mode(): string
    vfunc_get_character_set(): string
    vfunc_get_content_type(): string
    vfunc_get_doctype(): DomDocumentType | null
    vfunc_get_document_element(): DomElement | null
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(classNames: string): DomHTMLCollection
    vfunc_create_element(local_name: string): DomElement
    vfunc_create_element_ns(namespace: string | null, qualified_name: string): DomElement
    vfunc_create_document_fragment(): DomDocumentFragment
    vfunc_create_text_node(data: string): DomText
    vfunc_create_comment(data: string): DomComment
    vfunc_create_processing_instruction(target: string, data: string): DomProcessingInstruction
    vfunc_import_node(node: DomNode, deep: boolean): DomNode
    vfunc_adopt_node(node: DomNode): DomNode
    vfunc_create_event(interface: string): DomEvent
    vfunc_create_range(): DomRange
    vfunc_create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    vfunc_create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    vfunc_write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_get_xml_parser(): Parser
    vfunc_set_xml_parser(parser: Parser): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-definitions", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::implementation", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::url", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::origin", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::compat-mode", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::character-set", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::doctype", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-element", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Document_ConstructProps)
    _init (config?: Document_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Document
    static from_path(path: string): Document
    static from_uri(uri: string): Document
    static from_file(file: Gio.File): Document
    static from_stream(stream: Gio.InputStream): Document
    static from_string(str: string): Document
    static $gtype: GObject.Type
}
export interface Implementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class Implementation {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomImplementation */
    create_document_type(qualified_name: string, public_id: string, system_id: string): DomDocumentType
    create_document(nspace?: string | null, qualified_name?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    create_html_document(title: string): DomDocument
    has_feature(): boolean
    /* Virtual methods of GXml.Implementation */
    vfunc_create_document_type(qualified_name: string, public_id: string, system_id: string): DomDocumentType
    vfunc_create_document(nspace?: string | null, qualified_name?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    vfunc_create_html_document(title: string): DomDocument
    vfunc_has_feature(): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Implementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Implementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Implementation_ConstructProps)
    _init (config?: Implementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Implementation
    static $gtype: GObject.Type
}
export interface DocumentType_ConstructProps extends Node_ConstructProps {
}
export class DocumentType {
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomDocumentType */
    readonly name: string
    readonly public_id: string
    readonly system_id: string
    /* Fields of GXml.DocumentType */
    _name: string
    _public_id: string
    _system_id: string
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomDocumentType */
    get_name(): string
    get_public_id(): string
    get_system_id(): string
    /* Virtual methods of GXml.DocumentType */
    vfunc_remove(): void
    vfunc_get_name(): string
    vfunc_get_public_id(): string
    vfunc_get_system_id(): string
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-definitions", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::public-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::system-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DocumentType_ConstructProps)
    _init (config?: DocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, name: string, public_id?: string | null, system_id?: string | null): DocumentType
    static with_name(doc: DomDocument, name: string): DocumentType
    static with_ids(doc: DomDocument, name: string, public_id: string, system_id: string): DocumentType
    static $gtype: GObject.Type
}
export interface DocumentFragment_ConstructProps extends Node_ConstructProps {
}
export class DocumentFragment {
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GXml.DomNonElementParentNode */
    get_element_by_id(element_id: string): DomElement | null
    /* Virtual methods of GXml.DocumentFragment */
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_element_by_id(element_id: string): DomElement | null
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-definitions", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DocumentFragment_ConstructProps)
    _init (config?: DocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): DocumentFragment
    static $gtype: GObject.Type
}
export interface DomNodeFilter_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeFilter {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNodeFilter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomNodeFilter_ConstructProps)
    _init (config?: DomNodeFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomNodeFilter
    static $gtype: GObject.Type
}
export interface DomElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class DomElementList {
    /* Properties of Gee.ArrayList */
    equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractList */
    readonly read_only_view: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Fields of Gee.ArrayList */
    parent_instance: Gee.AbstractList
    priv: Gee.ArrayListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    sort_with_data(compare: GLib.CompareDataFunc): void
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomHTMLCollection */
    get_element(index: number): DomElement | null
    to_array(): DomElement[]
    get_length(): number
    item(index: number): DomElement | null
    named_item(name: string): DomElement | null
    /* Virtual methods of GXml.DomElementList */
    vfunc_get_element(index: number): DomElement | null
    vfunc_to_array(): DomElement[]
    vfunc_to_array(): object[]
    vfunc_get_length(): number
    vfunc_item(index: number): DomElement | null
    vfunc_named_item(name: string): DomElement | null
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::equal-func", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equal-func", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomElementList_ConstructProps)
    _init (config?: DomElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomElementList
    static new(equal_func?: GLib.EqualFunc | null): DomElementList
    static $gtype: GObject.Type
}
export interface DomEventInit_ConstructProps extends GObject.Object_ConstructProps {
    bubbles?: boolean
    cancelable?: boolean
}
export class DomEventInit {
    /* Properties of GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomEventInit */
    get_bubbles(): boolean
    set_bubbles(value: boolean): void
    get_cancelable(): boolean
    set_cancelable(value: boolean): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomEventInit_ConstructProps)
    _init (config?: DomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomEventInit
    static $gtype: GObject.Type
}
export interface DomCustomEventInit_ConstructProps extends DomEventInit_ConstructProps {
    detail?: any
}
export class DomCustomEventInit {
    /* Properties of GXml.DomCustomEventInit */
    detail: any
    /* Properties of GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomCustomEventInit */
    get_detail(): /* result */ any
    set_detail(value: any): void
    /* Methods of GXml.DomEventInit */
    get_bubbles(): boolean
    set_bubbles(value: boolean): void
    get_cancelable(): boolean
    set_cancelable(value: boolean): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomCustomEventInit_ConstructProps)
    _init (config?: DomCustomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomCustomEventInit
    static $gtype: GObject.Type
}
export interface DomTimeStamp_ConstructProps extends GObject.Object_ConstructProps {
    time?: GLib.DateTime
}
export class DomTimeStamp {
    /* Properties of GXml.DomTimeStamp */
    time: GLib.DateTime
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomTimeStamp */
    get_time(): GLib.DateTime
    set_time(value: GLib.DateTime): void
    to_string(): string
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomTimeStamp_ConstructProps)
    _init (config?: DomTimeStamp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomTimeStamp
    static $gtype: GObject.Type
}
export interface DomMutationObserverInit_ConstructProps extends GObject.Object_ConstructProps {
    child_list?: boolean
    attributes?: boolean
    character_data?: boolean
    subtree?: boolean
    attribute_old_value?: boolean
    character_data_old_value?: boolean
    attribute_filter?: Gee.List
}
export class DomMutationObserverInit {
    /* Properties of GXml.DomMutationObserverInit */
    child_list: boolean
    attributes: boolean
    character_data: boolean
    subtree: boolean
    attribute_old_value: boolean
    character_data_old_value: boolean
    attribute_filter: Gee.List
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomMutationObserverInit */
    get_child_list(): boolean
    set_child_list(value: boolean): void
    get_attributes(): boolean
    set_attributes(value: boolean): void
    get_character_data(): boolean
    set_character_data(value: boolean): void
    get_subtree(): boolean
    set_subtree(value: boolean): void
    get_attribute_old_value(): boolean
    set_attribute_old_value(value: boolean): void
    get_character_data_old_value(): boolean
    set_character_data_old_value(value: boolean): void
    get_attribute_filter(): Gee.List
    set_attribute_filter(value: Gee.List): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomMutationObserverInit_ConstructProps)
    _init (config?: DomMutationObserverInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomMutationObserverInit
    static $gtype: GObject.Type
}
export interface DomErrorName_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomErrorName {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DomErrorName */
    get_name(error_code: number): string
    get_code(error_name: string): number
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomErrorName, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomErrorName, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DomErrorName_ConstructProps)
    _init (config?: DomErrorName_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomErrorName
    static $gtype: GObject.Type
}
export interface Element_ConstructProps extends Node_ConstructProps {
    parse_children?: boolean
    unparsed?: string
    read_buffer?: Gio.MemoryOutputStream
    id?: string
    class_name?: string
}
export class Element {
    /* Properties of GXml.Element */
    parse_children: boolean
    unparsed: string
    read_buffer: Gio.MemoryOutputStream
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previous_element_sibling: DomElement
    readonly next_element_sibling: DomElement
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Properties of GXml.DomElement */
    readonly tag_name: string
    id: string
    class_name: string
    readonly class_list: DomTokenList
    /* Fields of GXml.Element */
    _attributes: ElementAttributes
    _namespace_uri: string
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Element */
    lookup_prefix(nspace?: string | null): string | null
    lookup_namespace_uri(prefix?: string | null): string | null
    initialize(local_name: string): void
    initialize_document(doc: DomDocument, local_name: string): void
    initialize_with_namespace(namespace_uri: string | null, prefix: string | null, local_name: string): void
    initialize_document_with_namespace(doc: DomDocument, namespace_uri: string | null, prefix: string | null, local_name: string): void
    get_parse_children(): boolean
    set_parse_children(value: boolean): void
    get_unparsed(): string
    set_unparsed(value: string): void
    read_unparsed(): void
    get_read_buffer(): Gio.MemoryOutputStream
    set_read_buffer(value: Gio.MemoryOutputStream): void
    parse_buffer(): void
    parse_pending(): number
    parse_buffer_async(_callback_?: Gio.AsyncReadyCallback | null): void
    parse_buffer_finish(_res_: Gio.AsyncResult): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    get_previous_element_sibling(): DomElement | null
    get_next_element_sibling(): DomElement | null
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GXml.DomElement */
    get_local_name(): string
    get_tag_name(): string
    get_id(): string | null
    set_id(value?: string | null): void
    get_class_name(): string | null
    set_class_name(value?: string | null): void
    get_class_list(): DomTokenList
    get_attributes(): DomNamedNodeMap
    get_attribute(name: string): string | null
    get_attribute_ns(namespace: string | null, local_name: string): string | null
    set_attribute(name: string, value: string): void
    set_attribute_ns(namespace: string | null, name: string, value: string): void
    remove_attribute(name: string): void
    remove_attribute_ns(namespace: string | null, local_name: string): void
    has_attribute(name: string): boolean
    has_attribute_ns(namespace: string | null, local_name: string): boolean
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(class_names: string): DomHTMLCollection
    matches(selectors: string): boolean
    read_from_uri(uri: string): void
    read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_uri_finish(_res_: Gio.AsyncResult): void
    read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    /* Methods of GXml.Object */
    get_properties_list(): GObject.ParamSpec[]
    find_property_name(nick: string): GObject.ParamSpec | null
    find_object_property_name(pname: string): GObject.ParamSpec | null
    get_property_element_list(): GObject.ParamSpec[]
    get_property_string(prop: GObject.ParamSpec): string | null
    find_property(name: string): Property | null
    set_attribute(name: string, val: string): boolean
    get_child(name: string): DomElement | null
    find_elements(name: string): DomElementList
    remove_attribute(name: string): boolean
    set_instance_property(name: string): boolean
    clean_property_elements(name: string): void
    /* Virtual methods of GXml.Element */
    vfunc_remove(): void
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_local_name(): string | null
    vfunc_get_tag_name(): string
    vfunc_get_id(): string | null
    vfunc_set_id(value?: string | null): void
    vfunc_get_class_name(): string | null
    vfunc_set_class_name(value?: string | null): void
    vfunc_get_class_list(): DomTokenList
    vfunc_get_attributes(): DomNamedNodeMap
    vfunc_get_attributes(): NamedAttrMap | null
    vfunc_get_attribute(name: string): string | null
    vfunc_get_attribute_ns(namespace: string | null, local_name: string): string | null
    vfunc_set_attribute(name: string, value: string): void
    vfunc_set_attribute(name: string, val: string): boolean
    vfunc_set_attribute_ns(namespace: string | null, name: string, value: string): void
    vfunc_remove_attribute(name: string): void
    vfunc_remove_attribute(name: string): boolean
    vfunc_remove_attribute_ns(namespace: string | null, local_name: string): void
    vfunc_has_attribute(name: string): boolean
    vfunc_has_attribute_ns(namespace: string | null, local_name: string): boolean
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(class_names: string): DomHTMLCollection
    vfunc_matches(selectors: string): boolean
    vfunc_read_from_uri(uri: string): void
    vfunc_read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_uri_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_get_properties_list(): GObject.ParamSpec[]
    vfunc_find_property_name(nick: string): GObject.ParamSpec | null
    vfunc_find_object_property_name(pname: string): GObject.ParamSpec | null
    vfunc_get_property_element_list(): GObject.ParamSpec[]
    vfunc_get_property_string(prop: GObject.ParamSpec): string | null
    vfunc_find_property(name: string): Property | null
    vfunc_get_child(name: string): DomElement | null
    vfunc_find_elements(name: string): DomElementList
    vfunc_set_instance_property(name: string): boolean
    vfunc_clean_property_elements(name: string): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::unparsed", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-buffer", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-buffer", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-list", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Element_ConstructProps)
    _init (config?: Element_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Element
    static $gtype: GObject.Type
}
export interface ElementAttributes_ConstructProps extends Gee.HashMap_ConstructProps {
}
export class ElementAttributes {
    /* Properties of Gee.HashMap */
    key_hash_func: GLib.HashFunc
    key_equal_func: GLib.EqualFunc
    value_equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly is_empty: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly read_only_view: Gee.Map
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GXml.ElementAttributes */
    _element: Element
    /* Fields of Gee.HashMap */
    parent_instance: Gee.AbstractMap
    priv: Gee.HashMapPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.ElementAttributes */
    add_reference(name: string): void
    /* Methods of Gee.AbstractMap */
    has_key(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    map_iterator(): Gee.MapIterator
    clear(): void
    set_all(map: Gee.Map): void
    unset_all(map: Gee.Map): boolean
    has_all(map: Gee.Map): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNamedNodeMap */
    get_length(): number
    item(index: number): DomNode | null
    get_named_item(name: string): DomNode | null
    set_named_item(node: DomNode): DomNode | null
    remove_named_item(name: string): DomNode | null
    remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    set_named_item_ns(node: DomNode): DomNode | null
    /* Virtual methods of GXml.ElementAttributes */
    vfunc_get_length(): number
    vfunc_item(index: number): DomNode | null
    vfunc_get_named_item(name: string): DomNode | null
    vfunc_set_named_item(node: DomNode): DomNode | null
    vfunc_remove_named_item(name: string): DomNode | null
    vfunc_remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    vfunc_get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    vfunc_set_named_item_ns(node: DomNode): DomNode | null
    /* Virtual methods of Gee.AbstractMap */
    vfunc_has_key(key?: object | null): boolean
    vfunc_has(key?: object | null, value?: object | null): boolean
    vfunc_get(key?: object | null): object | null
    vfunc_set(key?: object | null, value?: object | null): void
    vfunc_unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfunc_map_iterator(): Gee.MapIterator
    vfunc_clear(): void
    vfunc_set_all(map: Gee.Map): void
    vfunc_unset_all(map: Gee.Map): boolean
    vfunc_has_all(map: Gee.Map): boolean
    vfunc_iterator(): Gee.Iterator
    vfunc_contains(key?: object | null): boolean
    vfunc_remove(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfunc_remove_all(map: Gee.Map): boolean
    vfunc_contains_all(map: Gee.Map): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::key-hash-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-hash-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::key-equal-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-equal-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value-equal-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-equal-func", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keys", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::values", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::entries", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: ElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ElementAttributes_ConstructProps)
    _init (config?: ElementAttributes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: Element): ElementAttributes
    static new(key_hash_func?: GLib.HashFunc | null, key_equal_func?: GLib.EqualFunc | null, value_equal_func?: GLib.EqualFunc | null): ElementAttributes
    static $gtype: GObject.Type
}
export class Enumeration {
    /* Fields of GXml.Enumeration */
    ref_count: number
    static name: string
    static new(): Enumeration
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Enumeration
    static get_nick(enumeration: GObject.Type, val: number): string
    static get_nick_camelcase(enumeration: GObject.Type, val: number): string
    static get_string(enumeration: GObject.Type, val: number, use_nick: boolean, camelcase: boolean): string
    static parse(enumeration: GObject.Type, val: string): GObject.EnumValue | null
    static to_array(enumeration: GObject.Type): GObject.EnumValue[]
    static parse_integer(enumeration: GObject.Type, val: number): GObject.EnumValue | null
    static to_string_array(enumeration: GObject.Type): string[]
}
export interface Event_ConstructProps extends GObject.Object_ConstructProps {
}
export class Event {
    /* Properties of GXml.DomEvent */
    readonly etype: string
    readonly event_target: DomEventTarget
    readonly current_target: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly is_trusted: boolean
    readonly time_stamp: DomTimeStamp
    readonly default_prevented: boolean
    readonly event_phase: DomEventPhase
    /* Fields of GXml.Event */
    _etype: string
    _event_target: DomEventTarget
    _current_target: DomEventTarget
    _bubbles: boolean
    _cancelable: boolean
    _is_trusted: boolean
    _time_stamp: DomTimeStamp
    _default_prevented: boolean
    _event_phase: DomEventPhase
    _flags: DomEventFlags
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomEvent */
    get_etype(): string
    get_event_target(): DomEventTarget | null
    get_current_target(): DomEventTarget | null
    get_bubbles(): boolean
    get_cancelable(): boolean
    get_is_trusted(): boolean
    get_time_stamp(): DomTimeStamp
    get_default_prevented(): boolean
    get_event_phase(): DomEventPhase
    stop_propagation(): void
    stop_immediate_propagation(): void
    prevent_default(): void
    init_event(type: string, bubbles: boolean, cancelable: boolean): void
    /* Virtual methods of GXml.Event */
    vfunc_get_etype(): string
    vfunc_get_event_target(): DomEventTarget | null
    vfunc_get_current_target(): DomEventTarget | null
    vfunc_get_bubbles(): boolean
    vfunc_get_cancelable(): boolean
    vfunc_get_is_trusted(): boolean
    vfunc_get_time_stamp(): DomTimeStamp
    vfunc_get_default_prevented(): boolean
    vfunc_get_event_phase(): DomEventPhase
    vfunc_stop_propagation(): void
    vfunc_stop_immediate_propagation(): void
    vfunc_prevent_default(): void
    vfunc_init_event(type: string, bubbles: boolean, cancelable: boolean): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::event-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::bubbles", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancelable", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-trusted", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::time-stamp", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default-prevented", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::event-phase", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: Event, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Event_ConstructProps)
    _init (config?: Event_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Event
    static $gtype: GObject.Type
}
export interface CustomEvent_ConstructProps extends Event_ConstructProps {
}
export class CustomEvent {
    /* Properties of GXml.CustomEvent */
    readonly detail: any
    /* Fields of GXml.CustomEvent */
    _detail: any
    /* Fields of GXml.Event */
    _etype: string
    _event_target: DomEventTarget
    _current_target: DomEventTarget
    _bubbles: boolean
    _cancelable: boolean
    _is_trusted: boolean
    _time_stamp: DomTimeStamp
    _default_prevented: boolean
    _event_phase: DomEventPhase
    _flags: DomEventFlags
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CustomEvent */
    get_detail(): /* result */ any
    init_custom_event(type: string, bubbles: boolean, cancelable: boolean, detail?: any): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Event */
    vfunc_get_etype(): string
    vfunc_get_event_target(): DomEventTarget | null
    vfunc_get_current_target(): DomEventTarget | null
    vfunc_get_bubbles(): boolean
    vfunc_get_cancelable(): boolean
    vfunc_get_is_trusted(): boolean
    vfunc_get_time_stamp(): DomTimeStamp
    vfunc_get_default_prevented(): boolean
    vfunc_get_event_phase(): DomEventPhase
    vfunc_stop_propagation(): void
    vfunc_stop_immediate_propagation(): void
    vfunc_prevent_default(): void
    vfunc_init_event(type: string, bubbles: boolean, cancelable: boolean): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: CustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CustomEvent_ConstructProps)
    _init (config?: CustomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CustomEvent
    static $gtype: GObject.Type
}
export interface HashMap_ConstructProps extends BaseCollection_ConstructProps {
    attribute_key?: string
}
export class HashMap {
    /* Properties of GXml.Map */
    attribute_key: string
    readonly keys_set: Gee.Set
    /* Fields of GXml.HashMap */
    _hashtable: Gee.HashMap
    _attribute_key: string
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.HashMap */
    initialize_element_with_key(element: Element, items_type: GObject.Type, attribute_key: string): void
    initialize_with_key(items_type: GObject.Type, attribute_key: string): void
    get(key: string): DomElement | null
    get_keys(): string[]
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.Map */
    get_attribute_key(): string
    set_attribute_key(value: string): void
    item(key: string): DomElement | null
    has_key(key: string): boolean
    get_keys_set(): Gee.Set
    /* Virtual methods of GXml.HashMap */
    vfunc_get_attribute_key(): string
    vfunc_set_attribute_key(value: string): void
    vfunc_item(key: string): DomElement | null
    vfunc_has_key(key: string): boolean
    vfunc_get_keys_set(): Gee.Set
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keys-set", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: (($obj: HashMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HashMap_ConstructProps)
    _init (config?: HashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashMap
    static $gtype: GObject.Type
}
export interface HashPairedMap_ConstructProps extends BaseCollection_ConstructProps {
    attribute_primary_key?: string
    attribute_secondary_key?: string
}
export class HashPairedMap {
    /* Properties of GXml.PairedMap */
    attribute_primary_key: string
    attribute_secondary_key: string
    readonly primary_keys_set: Gee.Set
    /* Fields of GXml.HashPairedMap */
    _hashtable: Gee.HashMap
    _attribute_primary_key: string
    _attribute_secondary_key: string
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.HashPairedMap */
    initialize_element_with_keys(element: Element, items_type: GObject.Type, attribute_primary_key: string, attribute_secondary_key: string): void
    initialize_with_keys(items_type: GObject.Type, attribute_primary_key: string, attribute_secondary_key: string): void
    get(primary_key: string, secondary_key: string): DomElement | null
    get_primary_keys(): string[]
    get_secondary_keys(pkey: string): string[]
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.PairedMap */
    get_attribute_primary_key(): string
    set_attribute_primary_key(value: string): void
    get_attribute_secondary_key(): string
    set_attribute_secondary_key(value: string): void
    get_primary_keys_set(): Gee.Set
    item(primary_key: string, secondary_key: string): DomElement | null
    has_primary_key(key: string): boolean
    has_secondary_key(pkey: string, key: string): boolean
    secondary_keys_set(pkey: string): Gee.Set
    /* Virtual methods of GXml.HashPairedMap */
    vfunc_get_attribute_primary_key(): string
    vfunc_set_attribute_primary_key(value: string): void
    vfunc_get_attribute_secondary_key(): string
    vfunc_set_attribute_secondary_key(value: string): void
    vfunc_get_primary_keys_set(): Gee.Set
    vfunc_item(primary_key: string, secondary_key: string): DomElement | null
    vfunc_has_primary_key(key: string): boolean
    vfunc_has_secondary_key(pkey: string, key: string): boolean
    vfunc_secondary_keys_set(pkey: string): Gee.Set
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::primary-keys-set", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: HashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HashPairedMap_ConstructProps)
    _init (config?: HashPairedMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashPairedMap
    static $gtype: GObject.Type
}
export interface HashThreeMap_ConstructProps extends BaseCollection_ConstructProps {
    attribute_primary_key?: string
    attribute_secondary_key?: string
    attribute_third_key?: string
}
export class HashThreeMap {
    /* Properties of GXml.ThreeMap */
    attribute_primary_key: string
    attribute_secondary_key: string
    attribute_third_key: string
    readonly primary_keys_set: Gee.Set
    /* Fields of GXml.HashThreeMap */
    _hashtable: Gee.HashMap
    _attribute_primary_key: string
    _attribute_secondary_key: string
    _attribute_third_key: string
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.HashThreeMap */
    initialize_element_with_keys(element: Element, items_type: GObject.Type, attribute_primary_key: string, attribute_secondary_key: string, attribute_third_key: string): void
    initialize_with_keys(items_type: GObject.Type, attribute_primary_key: string, attribute_secondary_key: string, attribute_third_key: string): void
    get(primary_key: string, secondary_key: string, third_key: string): DomElement | null
    get_primary_keys(): string[]
    get_secondary_keys(pkey: string): string[]
    get_third_keys(pkey: string, skey: string): string[]
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.ThreeMap */
    get_attribute_primary_key(): string
    set_attribute_primary_key(value: string): void
    get_attribute_secondary_key(): string
    set_attribute_secondary_key(value: string): void
    get_attribute_third_key(): string
    set_attribute_third_key(value: string): void
    get_primary_keys_set(): Gee.Set
    item(primary_key: string, secondary_key: string, third_key: string): DomElement | null
    has_primary_key(key: string): boolean
    has_secondary_key(pkey: string, key: string): boolean
    has_third_key(pkey: string, skey: string, key: string): boolean
    secondary_keys_set(pkey: string): Gee.Set
    third_keys_set(pkey: string, skey: string): Gee.Set
    /* Virtual methods of GXml.HashThreeMap */
    vfunc_get_attribute_primary_key(): string
    vfunc_set_attribute_primary_key(value: string): void
    vfunc_get_attribute_secondary_key(): string
    vfunc_set_attribute_secondary_key(value: string): void
    vfunc_get_attribute_third_key(): string
    vfunc_set_attribute_third_key(value: string): void
    vfunc_get_primary_keys_set(): Gee.Set
    vfunc_item(primary_key: string, secondary_key: string, third_key: string): DomElement | null
    vfunc_has_primary_key(key: string): boolean
    vfunc_has_secondary_key(pkey: string, key: string): boolean
    vfunc_has_third_key(pkey: string, skey: string, key: string): boolean
    vfunc_secondary_keys_set(pkey: string): Gee.Set
    vfunc_third_keys_set(pkey: string, skey: string): Gee.Set
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attribute-third-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::primary-keys-set", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: (($obj: HashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HashThreeMap_ConstructProps)
    _init (config?: HashThreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HashThreeMap
    static $gtype: GObject.Type
}
export interface HTMLCollection_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class HTMLCollection {
    /* Properties of Gee.ArrayList */
    equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractList */
    readonly read_only_view: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Fields of Gee.ArrayList */
    parent_instance: Gee.AbstractList
    priv: Gee.ArrayListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    sort_with_data(compare: GLib.CompareDataFunc): void
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomHTMLCollection */
    get_element(index: number): DomElement | null
    to_array(): DomElement[]
    get_length(): number
    item(index: number): DomElement | null
    named_item(name: string): DomElement | null
    /* Virtual methods of GXml.HTMLCollection */
    vfunc_get_element(index: number): DomElement | null
    vfunc_to_array(): DomElement[]
    vfunc_to_array(): object[]
    vfunc_get_length(): number
    vfunc_item(index: number): DomElement | null
    vfunc_named_item(name: string): DomElement | null
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::equal-func", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equal-func", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: HTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HTMLCollection_ConstructProps)
    _init (config?: HTMLCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HTMLCollection
    static new(equal_func?: GLib.EqualFunc | null): HTMLCollection
    static $gtype: GObject.Type
}
export interface HtmlDocument_ConstructProps extends Document_ConstructProps {
    html?: DomElement
}
export class HtmlDocument {
    /* Properties of GXml.HtmlDocument */
    html: DomElement
    /* Properties of GXml.Document */
    doctype: DocumentType
    implementation: Implementation
    document_element: Element
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Document */
    parent_instance: Node
    priv: DocumentPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.HtmlDocument */
    get_html(): DomElement
    set_html(value: DomElement): void
    /* Methods of GXml.Document */
    save_to_path(file_path: string): void
    save_to_stream(outstream: Gio.OutputStream, can?: Gio.Cancellable | null): void
    create_element(tag_name: string): Element
    create_document_fragment(): DocumentFragment
    create_text_node(text_data: string): Text
    create_comment(comment_data: string): Comment
    create_cdata_section(cdata_data: string): CDATASection
    create_processing_instruction(target: string, data: string): ProcessingInstruction
    create_attribute(name: string): Attr
    create_entity_reference(name: string): EntityReference
    get_elements_by_tag_name(tag_name: string): NodeList
    copy_node(foreign_node: Node, deep: boolean): Node
    get_doctype(): DocumentType | null
    get_implementation(): Implementation
    get_document_element(): Element
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::html", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::doctype", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::implementation", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-element", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HtmlDocument_ConstructProps)
    _init (config?: HtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HtmlDocument
    static $gtype: GObject.Type
}
export interface HtmlElement_ConstructProps extends Element_ConstructProps {
}
export class HtmlElement {
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::tag-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: HtmlElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HtmlElement_ConstructProps)
    _init (config?: HtmlElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HtmlElement
    static $gtype: GObject.Type
}
export interface LXPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class LXPathObject {
    /* Properties of GXml.XPathObject */
    readonly object_type: XPathObjectType
    readonly boolean_value: boolean
    readonly string_value: string
    readonly number_value: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.XPathObject */
    get_object_type(): XPathObjectType
    get_boolean_value(): boolean
    get_string_value(): string
    get_number_value(): number
    get_nodeset(): DomHTMLCollection
    /* Virtual methods of GXml.LXPathObject */
    vfunc_get_object_type(): XPathObjectType
    vfunc_get_boolean_value(): boolean
    vfunc_get_string_value(): string
    vfunc_get_number_value(): number
    vfunc_get_nodeset(): DomHTMLCollection
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::boolean-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::string-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::number-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nodeset", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: LXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: LXPathObject_ConstructProps)
    _init (config?: LXPathObject_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(document: XDocument, pointer?: object | null): LXPathObject
    static $gtype: GObject.Type
}
export interface Node_ConstructProps extends GObject.Object_ConstructProps {
    owner_document?: DomDocument
    node_value?: string
    text_content?: string
}
export class Node {
    /* Properties of GXml.DomNode */
    readonly node_type: DomNodeNodeType
    readonly node_name: string
    readonly base_uri: string
    owner_document: DomDocument
    readonly parent_node: DomNode
    readonly parent_element: DomElement
    readonly child_nodes: DomNodeList
    readonly first_child: DomNode
    readonly last_child: DomNode
    readonly previous_sibling: DomNode
    readonly next_sibling: DomNode
    node_value: string
    text_content: string
    /* Fields of GXml.Node */
    _local_name: string
    _prefix: string
    _base_uri: string
    _node_value: string
    _parent: DomNode
    _node_type: DomNodeNodeType
    _child_nodes: NodeList
    _document: DomDocument
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomEventTarget */
    add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatch_event(event: DomEvent): boolean
    /* Methods of GXml.DomNode */
    get_node_type(): DomNodeNodeType
    get_node_name(): string
    get_base_uri(): string | null
    get_owner_document(): DomDocument | null
    set_owner_document(value?: DomDocument | null): void
    get_parent_node(): DomNode | null
    get_parent_element(): DomElement | null
    get_child_nodes(): DomNodeList
    get_first_child(): DomNode | null
    get_last_child(): DomNode | null
    get_previous_sibling(): DomNode | null
    get_next_sibling(): DomNode | null
    get_node_value(): string | null
    set_node_value(value?: string | null): void
    get_text_content(): string | null
    set_text_content(value?: string | null): void
    has_child_nodes(): boolean
    normalize(): void
    is_equal_node(node?: DomNode | null): boolean
    compare_document_position(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookup_prefix(nspace?: string | null): string | null
    lookup_namespace_uri(prefix?: string | null): string | null
    is_default_namespace(nspace?: string | null): boolean
    insert_before(node: DomNode, child?: DomNode | null): DomNode
    append_child(node: DomNode): DomNode
    replace_child(node: DomNode, child: DomNode): DomNode
    remove_child(child: DomNode): DomNode
    /* Virtual methods of GXml.Node */
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::base-uri", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-element", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-content", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Node_ConstructProps)
    _init (config?: Node_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Node
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface NodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class NodeList {
    /* Properties of Gee.ArrayList */
    equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractList */
    readonly read_only_view: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of Gee.ArrayList */
    parent_instance: Gee.AbstractList
    priv: Gee.ArrayListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    sort_with_data(compare: GLib.CompareDataFunc): void
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    get_length(): number
    /* Virtual methods of GXml.NodeList */
    vfunc_item(index: number): DomNode | null
    vfunc_get_length(): number
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::equal-func", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equal-func", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NodeList_ConstructProps)
    _init (config?: NodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NodeList
    static new(equal_func?: GLib.EqualFunc | null): NodeList
    static $gtype: GObject.Type
}
export interface NodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class NodeIterator {
    /* Properties of GXml.DomNodeIterator */
    readonly root: DomNode
    readonly reference_node: DomNode
    readonly pointer_before_reference_node: boolean
    readonly what_to_show: number
    /* Fields of GXml.NodeIterator */
    _root: DomNode
    _reference_node: DomNode
    _pointer_before_reference_node: boolean
    _what_to_show: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeIterator */
    get_root(): DomNode
    get_reference_node(): DomNode
    get_pointer_before_reference_node(): boolean
    get_what_to_show(): number
    next_node(): DomNode | null
    previous_node(): DomNode | null
    detach(): void
    /* Virtual methods of GXml.NodeIterator */
    vfunc_get_root(): DomNode
    vfunc_get_reference_node(): DomNode
    vfunc_get_pointer_before_reference_node(): boolean
    vfunc_get_what_to_show(): number
    vfunc_next_node(): DomNode | null
    vfunc_previous_node(): DomNode | null
    vfunc_detach(): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml.DomNodeIterator */
    connect(sigName: "accept-node", callback: (($obj: NodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    connect_after(sigName: "accept-node", callback: (($obj: NodeIterator, node: DomNode) => DomNodeFilterFilter)): number
    emit(sigName: "accept-node", node: DomNode): void
    connect(sigName: "notify::root", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::what-to-show", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: NodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NodeIterator_ConstructProps)
    _init (config?: NodeIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(n: DomNode, what_to_show: number): NodeIterator
    static $gtype: GObject.Type
}
export interface BaseProperty_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class BaseProperty {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: BaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BaseProperty_ConstructProps)
    _init (config?: BaseProperty_ConstructProps): void
    static $gtype: GObject.Type
}
export interface String_ConstructProps extends BaseProperty_ConstructProps {
}
export class String {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.String */
    _value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: String, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: String_ConstructProps)
    _init (config?: String_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static with_string(str: string): String
    static new(): String
    static $gtype: GObject.Type
}
export interface ArrayString_ConstructProps extends BaseProperty_ConstructProps {
}
export class ArrayString {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.ArrayString */
    _value: string
    _values: string[]
    _values_length1: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.ArrayString */
    get_values(): string[]
    initialize_strings(strs: string[]): void
    is_valid_value(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: ArrayString, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ArrayString_ConstructProps)
    _init (config?: ArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ArrayString
    static $gtype: GObject.Type
}
export interface XsdArrayString_ConstructProps extends ArrayString_ConstructProps {
    simple_type?: string
    source?: Gio.File
}
export class XsdArrayString {
    /* Properties of GXml.XsdArrayString */
    simple_type: string
    source: Gio.File
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.XsdArrayString */
    _source: Gio.File
    _simple_type: string
    /* Fields of GXml.ArrayString */
    _value: string
    _values: string[]
    _values_length1: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdArrayString */
    get_simple_type(): string
    set_simple_type(value: string): void
    get_source(): Gio.File
    set_source(value: Gio.File): void
    load(): void
    /* Methods of GXml.ArrayString */
    get_values(): string[]
    initialize_strings(strs: string[]): void
    is_valid_value(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::simple-type", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdArrayString_ConstructProps)
    _init (config?: XsdArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdArrayString
    static $gtype: GObject.Type
}
export interface Double_ConstructProps extends BaseProperty_ConstructProps {
    decimals?: number
}
export class Double {
    /* Properties of GXml.Double */
    decimals: number
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Double */
    _value: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Double */
    get_decimals(): number
    set_decimals(value: number): void
    get_double(): number
    set_double(value: number): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Double, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Double_ConstructProps)
    _init (config?: Double_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Double
    static $gtype: GObject.Type
}
export interface Float_ConstructProps extends Double_ConstructProps {
}
export class Float {
    /* Properties of GXml.Double */
    decimals: number
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Double */
    _value: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Float */
    get_float(): number
    set_float(value: number): void
    /* Methods of GXml.Double */
    get_decimals(): number
    set_decimals(value: number): void
    get_double(): number
    set_double(value: number): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Float, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Float_ConstructProps)
    _init (config?: Float_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Float
    static $gtype: GObject.Type
}
export interface Int_ConstructProps extends BaseProperty_ConstructProps {
}
export class Int {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Int */
    _value: number
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Int */
    get_integer(): number
    set_integer(value: number): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Int, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Int_ConstructProps)
    _init (config?: Int_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Int
    static $gtype: GObject.Type
}
export interface Boolean_ConstructProps extends BaseProperty_ConstructProps {
}
export class Boolean {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Boolean */
    _value: boolean
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Boolean */
    get_boolean(): boolean
    set_boolean(value: boolean): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Boolean, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Boolean_ConstructProps)
    _init (config?: Boolean_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Boolean
    static $gtype: GObject.Type
}
export interface Enum_ConstructProps extends BaseProperty_ConstructProps {
    use_nick?: boolean
    camel_case?: boolean
    upper_case?: boolean
    enum_type?: GObject.Type
}
export class Enum {
    /* Properties of GXml.Enum */
    use_nick: boolean
    camel_case: boolean
    upper_case: boolean
    enum_type: GObject.Type
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Enum */
    _value: number
    _enum_type: GObject.Type
    _val: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Enum */
    get_use_nick(): boolean
    set_use_nick(value: boolean): void
    get_camel_case(): boolean
    set_camel_case(value: boolean): void
    get_upper_case(): boolean
    set_upper_case(value: boolean): void
    get_enum_type(): GObject.Type
    set_enum_type(value: GObject.Type): void
    initialize_enum(enum_type: GObject.Type): void
    get_enum(): number
    set_enum(value: number): void
    is_valid(): boolean
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::use-nick", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-nick", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::camel-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::camel-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::upper-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::upper-case", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enum-type", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enum-type", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Enum, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Enum_ConstructProps)
    _init (config?: Enum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Enum
    static $gtype: GObject.Type
}
export interface Date_ConstructProps extends BaseProperty_ConstructProps {
}
export class Date {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Date */
    _value: GLib.Date
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Date */
    get_date(): /* result */ GLib.Date
    set_date(date: GLib.Date): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Date, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Date_ConstructProps)
    _init (config?: Date_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Date
    static $gtype: GObject.Type
}
export interface DateTime_ConstructProps extends BaseProperty_ConstructProps {
    format?: string
}
export class DateTime {
    /* Properties of GXml.DateTime */
    format: string
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.DateTime */
    _value: GLib.DateTime
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.DateTime */
    get_format(): string
    set_format(value: string): void
    get_datetime(): GLib.DateTime
    set_datetime(dt: GLib.DateTime): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::format", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::format", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DateTime, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DateTime_ConstructProps)
    _init (config?: DateTime_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DateTime
    static $gtype: GObject.Type
}
export interface Range_ConstructProps extends GObject.Object_ConstructProps {
}
export class Range {
    /* Properties of GXml.DomRange */
    readonly start_container: DomNode
    readonly start_offset: number
    readonly end_container: DomNode
    readonly end_offset: number
    readonly collapsed: boolean
    readonly common_ancestor_container: DomNode
    /* Fields of GXml.Range */
    _document: DomDocument
    _start_container: DomNode
    _start_offset: number
    _end_container: DomNode
    _end_offset: number
    _collapse: boolean
    _common_ancestor_container: DomNode
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomRange */
    get_start_container(): DomNode
    get_start_offset(): number
    get_end_container(): DomNode
    get_end_offset(): number
    get_collapsed(): boolean
    get_common_ancestor_container(): DomNode
    set_start(node: DomNode, offset: number): void
    set_end(node: DomNode, offset: number): void
    set_start_before(node: DomNode): void
    set_start_after(node: DomNode): void
    set_end_before(node: DomNode): void
    set_end_after(node: DomNode): void
    collapse(to_start: boolean): void
    select_node(node: DomNode): void
    select_node_contents(node: DomNode): void
    compare_boundary_points(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    delete_contents(): void
    extract_contents(): DomDocumentFragment | null
    clone_contents(): DomDocumentFragment | null
    insert_node(node: DomNode): void
    surround_contents(newParent: DomNode): void
    clone_range(): DomRange
    detach(): void
    is_point_in_range(node: DomNode, offset: number): boolean
    compare_point(node: DomNode, offset: number): number
    intersects_node(node: DomNode): boolean
    to_string(): string
    /* Virtual methods of GXml.Range */
    vfunc_get_start_container(): DomNode
    vfunc_get_start_offset(): number
    vfunc_get_end_container(): DomNode
    vfunc_get_end_offset(): number
    vfunc_get_collapsed(): boolean
    vfunc_get_common_ancestor_container(): DomNode
    vfunc_set_start(node: DomNode, offset: number): void
    vfunc_set_end(node: DomNode, offset: number): void
    vfunc_set_start_before(node: DomNode): void
    vfunc_set_start_after(node: DomNode): void
    vfunc_set_end_before(node: DomNode): void
    vfunc_set_end_after(node: DomNode): void
    vfunc_collapse(to_start: boolean): void
    vfunc_select_node(node: DomNode): void
    vfunc_select_node_contents(node: DomNode): void
    vfunc_compare_boundary_points(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    vfunc_delete_contents(): void
    vfunc_extract_contents(): DomDocumentFragment | null
    vfunc_clone_contents(): DomDocumentFragment | null
    vfunc_insert_node(node: DomNode): void
    vfunc_surround_contents(newParent: DomNode): void
    vfunc_clone_range(): DomRange
    vfunc_detach(): void
    vfunc_is_point_in_range(node: DomNode, offset: number): boolean
    vfunc_compare_point(node: DomNode, offset: number): number
    vfunc_intersects_node(node: DomNode): boolean
    vfunc_to_string(): string
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::start-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::end-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::end-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::collapsed", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: Range, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Range_ConstructProps)
    _init (config?: Range_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): Range
    static $gtype: GObject.Type
}
export interface SettableTokenList_ConstructProps extends TokenList_ConstructProps {
    value?: string
}
export class SettableTokenList {
    /* Properties of Gee.ArrayList */
    equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractList */
    readonly read_only_view: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Properties of GXml.DomSettableTokenList */
    value: string
    /* Fields of GXml.TokenList */
    _element: DomElement
    _attr: string
    /* Fields of Gee.ArrayList */
    parent_instance: Gee.AbstractList
    priv: Gee.ArrayListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.TokenList */
    update(): void
    /* Methods of Gee.ArrayList */
    sort_with_data(compare: GLib.CompareDataFunc): void
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomSettableTokenList */
    get_value(): string
    set_value(value: string): void
    /* Virtual methods of GXml.SettableTokenList */
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_contains(token: string): boolean
    vfunc_contains(item?: object | null): boolean
    vfunc_add(tokens: string[]): void
    vfunc_add(item?: object | null): boolean
    vfunc_remove(tokens: string[]): void
    vfunc_remove(item?: object | null): boolean
    /* Virtual methods of GXml.TokenList */
    vfunc_get_length(): number
    vfunc_item(index: number): string | null
    vfunc_contains(token: string): boolean
    vfunc_contains(item?: object | null): boolean
    vfunc_add(tokens: string[]): void
    vfunc_add(item?: object | null): boolean
    vfunc_remove(tokens: string[]): void
    vfunc_remove(item?: object | null): boolean
    vfunc_toggle(token: string, force: boolean, auto: boolean): boolean
    vfunc_to_string(): string
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::equal-func", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equal-func", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: SettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SettableTokenList_ConstructProps)
    _init (config?: SettableTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): SettableTokenList
    static new(equal_func?: GLib.EqualFunc | null): SettableTokenList
    static $gtype: GObject.Type
}
export interface StringRef_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class StringRef {
    /* Properties of GXml.Property */
    value: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.Property */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Virtual methods of GXml.StringRef */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: StringRef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StringRef_ConstructProps)
    _init (config?: StringRef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(obj: Object, name: string): StringRef
    static $gtype: GObject.Type
}
export interface CharacterData_ConstructProps extends Node_ConstructProps {
    data?: string
}
export class CharacterData {
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previous_element_sibling: DomElement
    readonly next_element_sibling: DomElement
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GXml.Node */
    parent_instance: GObject.Object
    priv: NodePrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    get_previous_element_sibling(): DomElement | null
    get_next_element_sibling(): DomElement | null
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.CharacterData */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    vfunc_remove(): void
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-definitions", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::data", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: CharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CharacterData_ConstructProps)
    _init (config?: CharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CharacterData
    static $gtype: GObject.Type
}
export interface Text_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class Text {
    /* Properties of GXml.CharacterData */
    data: string
    length: number
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.CharacterData */
    parent_instance: BackedNode
    priv: CharacterDataPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CharacterData */
    substring_data(offset: number, count: number): string
    append_data(new_segment: string): void
    insert_data(offset: number, new_segment: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, new_segment: string): void
    get_data(): string
    set_data(value: string): void
    get_length(): number
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomText */
    split_text(offset: number): DomText
    get_whole_text(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Text */
    vfunc_split_text(offset: number): DomText
    vfunc_get_whole_text(): string
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Text_ConstructProps)
    _init (config?: Text_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): Text
    static $gtype: GObject.Type
}
export interface ProcessingInstruction_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class ProcessingInstruction {
    /* Properties of GXml.CharacterData */
    data: string
    length: number
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Properties of GXml.DomProcessingInstruction */
    readonly target: string
    /* Fields of GXml.CharacterData */
    parent_instance: BackedNode
    priv: CharacterDataPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CharacterData */
    substring_data(offset: number, count: number): string
    append_data(new_segment: string): void
    insert_data(offset: number, new_segment: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, new_segment: string): void
    get_data(): string
    set_data(value: string): void
    get_length(): number
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomProcessingInstruction */
    get_target(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.ProcessingInstruction */
    vfunc_get_target(): string
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ProcessingInstruction_ConstructProps)
    _init (config?: ProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, target: string, data: string): ProcessingInstruction
    static $gtype: GObject.Type
}
export interface Comment_ConstructProps extends CharacterData_ConstructProps {
    data?: string
}
export class Comment {
    /* Properties of GXml.CharacterData */
    data: string
    length: number
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.CharacterData */
    parent_instance: BackedNode
    priv: CharacterDataPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.CharacterData */
    substring_data(offset: number, count: number): string
    append_data(new_segment: string): void
    insert_data(offset: number, new_segment: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, new_segment: string): void
    get_data(): string
    set_data(value: string): void
    get_length(): number
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Comment */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Comment_ConstructProps)
    _init (config?: Comment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): Comment
    static $gtype: GObject.Type
}
export interface TokenList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class TokenList {
    /* Properties of Gee.ArrayList */
    equal_func: GLib.EqualFunc
    /* Properties of Gee.AbstractList */
    readonly read_only_view: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GXml.TokenList */
    _element: DomElement
    _attr: string
    /* Fields of Gee.ArrayList */
    parent_instance: Gee.AbstractList
    priv: Gee.ArrayListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.TokenList */
    update(): void
    /* Methods of Gee.ArrayList */
    sort_with_data(compare: GLib.CompareDataFunc): void
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomTokenList */
    get_length(): number
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    to_string(): string
    /* Virtual methods of GXml.TokenList */
    vfunc_get_length(): number
    vfunc_item(index: number): string | null
    vfunc_contains(token: string): boolean
    vfunc_contains(item?: object | null): boolean
    vfunc_add(tokens: string[]): void
    vfunc_add(item?: object | null): boolean
    vfunc_remove(tokens: string[]): void
    vfunc_remove(item?: object | null): boolean
    vfunc_toggle(token: string, force: boolean, auto: boolean): boolean
    vfunc_to_string(): string
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::equal-func", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equal-func", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: TokenList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TokenList_ConstructProps)
    _init (config?: TokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): TokenList
    static new(equal_func?: GLib.EqualFunc | null): TokenList
    static $gtype: GObject.Type
}
export interface TreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class TreeWalker {
    /* Properties of GXml.DomTreeWalker */
    readonly root: DomNode
    readonly what_to_show: number
    readonly current_node: DomNode
    /* Fields of GXml.TreeWalker */
    _root: DomNode
    _what_to_show: number
    _current_node: DomNode
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomTreeWalker */
    get_root(): DomNode
    get_what_to_show(): number
    get_current_node(): DomNode
    parent_node(): DomNode | null
    first_child(): DomNode | null
    last_child(): DomNode | null
    previous_sibling(): DomNode | null
    next_sibling(): DomNode | null
    previous_node(): DomNode | null
    next_node(): DomNode | null
    /* Virtual methods of GXml.TreeWalker */
    vfunc_get_root(): DomNode
    vfunc_get_what_to_show(): number
    vfunc_get_current_node(): DomNode
    vfunc_parent_node(): DomNode | null
    vfunc_first_child(): DomNode | null
    vfunc_last_child(): DomNode | null
    vfunc_previous_sibling(): DomNode | null
    vfunc_next_sibling(): DomNode | null
    vfunc_previous_node(): DomNode | null
    vfunc_next_node(): DomNode | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml.DomTreeWalker */
    connect(sigName: "accept-node", callback: (($obj: TreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    connect_after(sigName: "accept-node", callback: (($obj: TreeWalker, node: DomNode) => DomNodeFilterFilter)): number
    emit(sigName: "accept-node", node: DomNode): void
    connect(sigName: "notify::root", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::what-to-show", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-node", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: TreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TreeWalker_ConstructProps)
    _init (config?: TreeWalker_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(root: DomNode, w: number): TreeWalker
    static $gtype: GObject.Type
}
export interface XAttribute_ConstructProps extends XNode_ConstructProps {
    value?: string
}
export class XAttribute {
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomAttr */
    readonly namespace_uri: string
    readonly prefix: string
    readonly local_name: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomAttr */
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string
    get_specified(): boolean
    /* Virtual methods of GXml.XAttribute */
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_get_specified(): boolean
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XAttribute_ConstructProps)
    _init (config?: XAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XAttribute
    static $gtype: GObject.Type
}
export interface XCharacterData_ConstructProps extends XNonDocumentChildNode_ConstructProps {
    str?: string
    data?: string
}
export class XCharacterData {
    /* Properties of GXml.XCharacterData */
    str: string
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XCharacterData */
    get_str(): string
    set_str(value: string): void
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::data", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XCharacterData_ConstructProps)
    _init (config?: XCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XCharacterData
    static $gtype: GObject.Type
}
export interface XChildNode_ConstructProps extends XNode_ConstructProps {
}
export class XChildNode {
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XChildNode_ConstructProps)
    _init (config?: XChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XChildNode
    static $gtype: GObject.Type
}
export interface XNonDocumentChildNode_ConstructProps extends XChildNode_ConstructProps {
}
export class XNonDocumentChildNode {
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previous_element_sibling: DomElement
    readonly next_element_sibling: DomElement
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    get_previous_element_sibling(): DomElement | null
    get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: XNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XNonDocumentChildNode_ConstructProps)
    _init (config?: XNonDocumentChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XNonDocumentChildNode
    static $gtype: GObject.Type
}
export interface XComment_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XComment {
    /* Properties of GXml.XCharacterData */
    str: string
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XCharacterData */
    get_str(): string
    set_str(value: string): void
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::data", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XComment, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XComment_ConstructProps)
    _init (config?: XComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XComment
    static new(): XComment
    static $gtype: GObject.Type
}
export interface XDocument_ConstructProps extends XNode_ConstructProps {
    indent?: boolean
    ns_top?: boolean
    prefix_default_ns?: boolean
    backup?: boolean
    file?: Gio.File
}
export class XDocument {
    /* Properties of GXml.XDocument */
    indent: boolean
    ns_top: boolean
    prefix_default_ns: boolean
    backup: boolean
    file: Gio.File
    readonly root: DomNode
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly document_uri: string
    readonly origin: string
    readonly compat_mode: string
    readonly character_set: string
    readonly content_type: string
    readonly doctype: DomDocumentType
    readonly document_element: DomElement
    /* Fields of GXml.XDocument */
    doc: object | null
    _buffer: any
    _parser: Parser
    _implementation: DomImplementation
    _url: string
    _origin: string
    _compat_mode: string
    _character_set: string
    _content_type: string
    _constructor: DomEvent
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XDocument */
    get_indent(): boolean
    set_indent(value: boolean): void
    get_ns_top(): boolean
    set_ns_top(value: boolean): void
    get_prefix_default_ns(): boolean
    set_prefix_default_ns(value: boolean): void
    get_backup(): boolean
    set_backup(value: boolean): void
    get_file(): Gio.File
    set_file(value: Gio.File): void
    get_root(): DomNode
    create_pi(target: string, data: string): DomNode
    create_text(text: string): DomNode
    libxml_to_string(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    save_as(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GXml.DomNonElementParentNode */
    get_element_by_id(element_id: string): DomElement | null
    /* Methods of GXml.DomDocument */
    get_implementation(): DomImplementation
    get_url(): string
    get_document_uri(): string
    get_origin(): string
    get_compat_mode(): string
    get_character_set(): string
    get_content_type(): string
    get_doctype(): DomDocumentType | null
    get_document_element(): DomElement | null
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(classNames: string): DomHTMLCollection
    create_element(local_name: string): DomElement
    create_element_ns(namespace: string | null, qualified_name: string): DomElement
    create_document_fragment(): DomDocumentFragment
    create_text_node(data: string): DomText
    create_comment(data: string): DomComment
    create_processing_instruction(target: string, data: string): DomProcessingInstruction
    import_node(node: DomNode, deep: boolean): DomNode
    adopt_node(node: DomNode): DomNode
    create_event(interface: string): DomEvent
    create_range(): DomRange
    create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    get_xml_parser(): Parser
    set_xml_parser(parser: Parser): void
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GXml.XDocument */
    vfunc_save(cancellable?: Gio.Cancellable | null): boolean
    vfunc_save_as(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_element_by_id(element_id: string): DomElement | null
    vfunc_get_implementation(): DomImplementation
    vfunc_get_url(): string
    vfunc_get_document_uri(): string
    vfunc_get_origin(): string
    vfunc_get_compat_mode(): string
    vfunc_get_character_set(): string
    vfunc_get_content_type(): string
    vfunc_get_doctype(): DomDocumentType | null
    vfunc_get_document_element(): DomElement | null
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(classNames: string): DomHTMLCollection
    vfunc_create_element(local_name: string): DomElement
    vfunc_create_element_ns(namespace: string | null, qualified_name: string): DomElement
    vfunc_create_document_fragment(): DomDocumentFragment
    vfunc_create_text_node(data: string): DomText
    vfunc_create_comment(data: string): DomComment
    vfunc_create_processing_instruction(target: string, data: string): DomProcessingInstruction
    vfunc_import_node(node: DomNode, deep: boolean): DomNode
    vfunc_adopt_node(node: DomNode): DomNode
    vfunc_create_event(interface: string): DomEvent
    vfunc_create_range(): DomRange
    vfunc_create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    vfunc_create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    vfunc_write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_get_xml_parser(): Parser
    vfunc_set_xml_parser(parser: Parser): void
    vfunc_evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::indent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ns-top", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::backup", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::file", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::root", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::implementation", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::url", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-uri", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::origin", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::compat-mode", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::character-set", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-type", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::doctype", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document-element", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: XDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XDocument_ConstructProps)
    _init (config?: XDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XDocument
    static from_path(path: string, options: number): XDocument
    static from_uri(uri: string, options: number): XDocument
    static from_file(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): XDocument
    static from_string(str: string, options: number): XDocument
    static from_stream(istream: Gio.InputStream): XDocument
    static from_doc(doc: libxml2.Doc): XDocument
    static $gtype: GObject.Type
}
export interface XElement_ConstructProps extends XNonDocumentChildNode_ConstructProps {
    content?: string
    id?: string
    class_name?: string
}
export class XElement {
    /* Properties of GXml.XElement */
    content: string
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly first_element_child: DomElement
    readonly last_element_child: DomElement
    readonly child_element_count: number
    /* Properties of GXml.DomElement */
    readonly namespace_uri: string
    readonly prefix: string
    readonly local_name: string
    readonly tag_name: string
    id: string
    class_name: string
    readonly class_list: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XElement */
    set_attr(aname: string, avalue: string): void
    get_attr(name: string): DomNode | null
    set_ns_attr(ns: string, aname: string, value: string): void
    get_ns_attr(name: string, uri: string): DomNode | null
    normalize(): void
    get_content(): string
    set_content(value: string): void
    remove_attr(name: string): void
    remove_ns_attr(name: string, uri: string): void
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    get_children(): DomHTMLCollection
    get_first_element_child(): DomElement | null
    get_last_element_child(): DomElement | null
    get_child_element_count(): number
    query_selector(selectors: string): DomElement | null
    query_selector_all(selectors: string): DomNodeList
    get_elements_by_property_value(property: string, value: string): DomElementList
    /* Methods of GXml.DomElement */
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string
    get_tag_name(): string
    get_id(): string | null
    set_id(value?: string | null): void
    get_class_name(): string | null
    set_class_name(value?: string | null): void
    get_class_list(): DomTokenList
    get_attributes(): DomNamedNodeMap
    get_attribute(name: string): string | null
    get_attribute_ns(namespace: string | null, local_name: string): string | null
    set_attribute(name: string, value: string): void
    set_attribute_ns(namespace: string | null, name: string, value: string): void
    remove_attribute(name: string): void
    remove_attribute_ns(namespace: string | null, local_name: string): void
    has_attribute(name: string): boolean
    has_attribute_ns(namespace: string | null, local_name: string): boolean
    get_elements_by_tag_name(local_name: string): DomHTMLCollection
    get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    get_elements_by_class_name(class_names: string): DomHTMLCollection
    matches(selectors: string): boolean
    read_from_uri(uri: string): void
    read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_uri_finish(_res_: Gio.AsyncResult): void
    read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_file_finish(_res_: Gio.AsyncResult): void
    read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_stream_finish(_res_: Gio.AsyncResult): void
    read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    read_from_string_finish(_res_: Gio.AsyncResult): void
    write_string(cancellable?: Gio.Cancellable | null): string
    write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_stream(stream: Gio.OutputStream): void
    write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GXml.XElement */
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string
    vfunc_get_tag_name(): string
    vfunc_get_id(): string | null
    vfunc_set_id(value?: string | null): void
    vfunc_get_class_name(): string | null
    vfunc_set_class_name(value?: string | null): void
    vfunc_get_class_list(): DomTokenList
    vfunc_get_attributes(): DomNamedNodeMap
    vfunc_get_attribute(name: string): string | null
    vfunc_get_attribute_ns(namespace: string | null, local_name: string): string | null
    vfunc_set_attribute(name: string, value: string): void
    vfunc_set_attribute_ns(namespace: string | null, name: string, value: string): void
    vfunc_remove_attribute(name: string): void
    vfunc_remove_attribute_ns(namespace: string | null, local_name: string): void
    vfunc_has_attribute(name: string): boolean
    vfunc_has_attribute_ns(namespace: string | null, local_name: string): boolean
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(class_names: string): DomHTMLCollection
    vfunc_matches(selectors: string): boolean
    vfunc_read_from_uri(uri: string): void
    vfunc_read_from_uri_async(uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_uri_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_write_file(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-element-count", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::id", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::class-list", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XElement_ConstructProps)
    _init (config?: XElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XElement
    static new(): XElement
    static $gtype: GObject.Type
}
export interface XHashMapAttr_ConstructProps extends Gee.AbstractMap_ConstructProps {
}
export class XHashMapAttr {
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly is_empty: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly read_only_view: Gee.Map
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of Gee.AbstractMap */
    parent_instance: GObject.Object
    priv: Gee.AbstractMapPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of Gee.AbstractMap */
    has_key(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    map_iterator(): Gee.MapIterator
    clear(): void
    set_all(map: Gee.Map): void
    unset_all(map: Gee.Map): boolean
    has_all(map: Gee.Map): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNamedNodeMap */
    get_length(): number
    item(index: number): DomNode | null
    get_named_item(name: string): DomNode | null
    set_named_item(node: DomNode): DomNode | null
    remove_named_item(name: string): DomNode | null
    remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    set_named_item_ns(node: DomNode): DomNode | null
    /* Virtual methods of GXml.XHashMapAttr */
    vfunc_get_length(): number
    vfunc_item(index: number): DomNode | null
    vfunc_get_named_item(name: string): DomNode | null
    vfunc_set_named_item(node: DomNode): DomNode | null
    vfunc_remove_named_item(name: string): DomNode | null
    vfunc_remove_named_item_ns(namespace_uri: string, localName: string): DomNode | null
    vfunc_get_named_item_ns(namespace_uri: string, local_name: string): DomNode | null
    vfunc_set_named_item_ns(node: DomNode): DomNode | null
    /* Virtual methods of Gee.AbstractMap */
    vfunc_has_key(key?: object | null): boolean
    vfunc_has(key?: object | null, value?: object | null): boolean
    vfunc_get(key?: object | null): object | null
    vfunc_set(key?: object | null, value?: object | null): void
    vfunc_unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfunc_map_iterator(): Gee.MapIterator
    vfunc_clear(): void
    vfunc_set_all(map: Gee.Map): void
    vfunc_unset_all(map: Gee.Map): boolean
    vfunc_has_all(map: Gee.Map): boolean
    vfunc_iterator(): Gee.Iterator
    vfunc_contains(key?: object | null): boolean
    vfunc_remove(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfunc_remove_all(map: Gee.Map): boolean
    vfunc_contains_all(map: Gee.Map): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keys", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::values", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::entries", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::read-only-view", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XHashMapAttr_ConstructProps)
    _init (config?: XHashMapAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XHashMapAttr
    static $gtype: GObject.Type
}
export interface XHashMapAttrEntry_ConstructProps extends Gee.MapEntry_ConstructProps {
}
export class XHashMapAttrEntry {
    /* Properties of Gee.MapEntry */
    readonly key: object
    value: object
    /* Fields of Gee.MapEntry */
    parent_instance: GObject.Object
    priv: Gee.EntryPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::key", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XHashMapAttrEntry_ConstructProps)
    _init (config?: XHashMapAttrEntry_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, attr?: object | null): XHashMapAttrEntry
    static $gtype: GObject.Type
}
export interface XHashMapAttrIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class XHashMapAttrIterator {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gee.MapIterator */
    next(): boolean
    has_next(): boolean
    first(): boolean
    get_key(): object | null
    get_value(): object | null
    set_value(value?: object | null): void
    unset(): void
    /* Virtual methods of GXml.XHashMapAttrIterator */
    vfunc_next(): boolean
    vfunc_has_next(): boolean
    vfunc_first(): boolean
    vfunc_get_key(): object | null
    vfunc_get_value(): object | null
    vfunc_set_value(value?: object | null): void
    vfunc_unset(): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XHashMapAttrIterator_ConstructProps)
    _init (config?: XHashMapAttrIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XHashMapAttrIterator
    static $gtype: GObject.Type
}
export interface XHtmlDocument_ConstructProps extends XDocument_ConstructProps {
}
export class XHtmlDocument {
    /* Properties of GXml.XDocument */
    indent: boolean
    ns_top: boolean
    prefix_default_ns: boolean
    backup: boolean
    file: Gio.File
    readonly root: DomNode
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Fields of GXml.XDocument */
    doc: object | null
    _buffer: any
    _parser: Parser
    _implementation: DomImplementation
    _url: string
    _origin: string
    _compat_mode: string
    _character_set: string
    _content_type: string
    _constructor: DomEvent
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XDocument */
    get_indent(): boolean
    set_indent(value: boolean): void
    get_ns_top(): boolean
    set_ns_top(value: boolean): void
    get_prefix_default_ns(): boolean
    set_prefix_default_ns(value: boolean): void
    get_backup(): boolean
    set_backup(value: boolean): void
    get_file(): Gio.File
    set_file(value: Gio.File): void
    get_root(): DomNode
    create_pi(target: string, data: string): DomNode
    create_text(text: string): DomNode
    libxml_to_string(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    save_as(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomHtmlDocument */
    read_from_string(str: string): void
    read_from_string_tolerant(str: string): void
    to_html(): string
    /* Virtual methods of GXml.XHtmlDocument */
    vfunc_read_from_string(str: string): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_tolerant(str: string): void
    vfunc_to_html(): string
    /* Virtual methods of GXml.XDocument */
    vfunc_save(cancellable?: Gio.Cancellable | null): boolean
    vfunc_save_as(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfunc_get_children(): DomHTMLCollection
    vfunc_get_first_element_child(): DomElement | null
    vfunc_get_last_element_child(): DomElement | null
    vfunc_get_child_element_count(): number
    vfunc_query_selector(selectors: string): DomElement | null
    vfunc_query_selector_all(selectors: string): DomNodeList
    vfunc_get_elements_by_property_value(property: string, value: string): DomElementList
    vfunc_get_element_by_id(element_id: string): DomElement | null
    vfunc_get_implementation(): DomImplementation
    vfunc_get_url(): string
    vfunc_get_document_uri(): string
    vfunc_get_origin(): string
    vfunc_get_compat_mode(): string
    vfunc_get_character_set(): string
    vfunc_get_content_type(): string
    vfunc_get_doctype(): DomDocumentType | null
    vfunc_get_document_element(): DomElement | null
    vfunc_get_elements_by_tag_name(local_name: string): DomHTMLCollection
    vfunc_get_elements_by_tag_name_ns(namespace: string | null, local_name: string): DomHTMLCollection
    vfunc_get_elements_by_class_name(classNames: string): DomHTMLCollection
    vfunc_create_element(local_name: string): DomElement
    vfunc_create_element_ns(namespace: string | null, qualified_name: string): DomElement
    vfunc_create_document_fragment(): DomDocumentFragment
    vfunc_create_text_node(data: string): DomText
    vfunc_create_comment(data: string): DomComment
    vfunc_create_processing_instruction(target: string, data: string): DomProcessingInstruction
    vfunc_import_node(node: DomNode, deep: boolean): DomNode
    vfunc_adopt_node(node: DomNode): DomNode
    vfunc_create_event(interface: string): DomEvent
    vfunc_create_range(): DomRange
    vfunc_create_node_iterator(root: DomNode, whatToShow: number): DomNodeIterator
    vfunc_create_tree_walker(root: DomNode, what_to_show: number): DomTreeWalker
    vfunc_write_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_write_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_stream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_write_stream_async(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_write_string(cancellable?: Gio.Cancellable | null): string
    vfunc_write_string_async(cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_read_from_file(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_file_async(file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_string(str: string, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_string_async(str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_string_finish(_res_: Gio.AsyncResult): void
    vfunc_read_from_stream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfunc_read_from_stream_async(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_from_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_get_xml_parser(): Parser
    vfunc_set_xml_parser(parser: Parser): void
    vfunc_evaluate(expression: string, resolver?: Gee.Map | null): XPathObject
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::indent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ns-top", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::backup", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::file", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::root", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XHtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XHtmlDocument_ConstructProps)
    _init (config?: XHtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static from_path(path: string, options: number): XHtmlDocument
    static from_uri(uri: string, options: number): XHtmlDocument
    static from_file(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): XHtmlDocument
    static from_string(html: string, options: number): XHtmlDocument
    static from_string_context(html: string, options: number): XHtmlDocument
    static from_string_doc(html: string, options: number): XHtmlDocument
    static new(): XHtmlDocument
    static get_default_options(): number
    static $gtype: GObject.Type
}
export interface XListChildren_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
export class XListChildren {
    /* Properties of Gee.AbstractBidirList */
    readonly read_only_view: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly is_empty: boolean
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of Gee.AbstractList */
    parent_instance: Gee.AbstractCollection
    priv: Gee.AbstractListPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of Gee.AbstractBidirList */
    bidir_list_iterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    get_read_only_view(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    list_iterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    index_of(item?: object | null): number
    insert(index: number, item?: object | null): void
    remove_at(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insert_all(index: number, collection: Gee.Collection): void
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    to_array(): object[]
    add_all(collection: Gee.Collection): boolean
    contains_all(collection: Gee.Collection): boolean
    remove_all(collection: Gee.Collection): boolean
    retain_all(collection: Gee.Collection): boolean
    iterator(): Gee.Iterator
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    get_length(): number
    /* Methods of GXml.DomHTMLCollection */
    get_element(index: number): DomElement | null
    to_array(): DomElement[]
    item(index: number): DomElement | null
    named_item(name: string): DomElement | null
    /* Virtual methods of GXml.XListChildren */
    vfunc_item(index: number): DomNode | null
    vfunc_item(index: number): DomElement | null
    vfunc_get_length(): number
    vfunc_get_element(index: number): DomElement | null
    vfunc_to_array(): DomElement[]
    vfunc_to_array(): object[]
    vfunc_named_item(name: string): DomElement | null
    /* Virtual methods of Gee.AbstractBidirList */
    vfunc_bidir_list_iterator(): Gee.BidirListIterator
    vfunc_reserved0(): void
    vfunc_reserved1(): void
    vfunc_reserved2(): void
    vfunc_reserved3(): void
    vfunc_reserved4(): void
    vfunc_reserved5(): void
    vfunc_reserved6(): void
    vfunc_reserved7(): void
    vfunc_reserved8(): void
    vfunc_reserved9(): void
    vfunc_get_read_only_view(): Gee.BidirList
    /* Virtual methods of Gee.AbstractList */
    vfunc_list_iterator(): Gee.ListIterator
    vfunc_get(index: number): object | null
    vfunc_set(index: number, item?: object | null): void
    vfunc_index_of(item?: object | null): number
    vfunc_insert(index: number, item?: object | null): void
    vfunc_remove_at(index: number): object | null
    vfunc_slice(start: number, stop: number): Gee.List | null
    vfunc_first(): object | null
    vfunc_last(): object | null
    vfunc_insert_all(index: number, collection: Gee.Collection): void
    vfunc_sort(compare_func?: GLib.CompareFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfunc_contains(item?: object | null): boolean
    vfunc_add(item?: object | null): boolean
    vfunc_remove(item?: object | null): boolean
    vfunc_clear(): void
    vfunc_to_array(): object[]
    vfunc_add_all(collection: Gee.Collection): boolean
    vfunc_contains_all(collection: Gee.Collection): boolean
    vfunc_remove_all(collection: Gee.Collection): boolean
    vfunc_retain_all(collection: Gee.Collection): boolean
    vfunc_iterator(): Gee.Iterator
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-empty", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-empty", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XListChildren, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XListChildren_ConstructProps)
    _init (config?: XListChildren_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XListChildren
    static $gtype: GObject.Type
}
export interface XListChildrenIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class XListChildrenIterator {
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    first_match(pred: Gee.Predicate): object | null
    any_match(pred: Gee.Predicate): boolean
    all_match(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    get_element_type(): GObject.Type
    /* Methods of Gee.Iterator */
    next(): boolean
    has_next(): boolean
    first(): boolean
    get(): object | null
    remove(): void
    /* Methods of Gee.BidirIterator */
    previous(): boolean
    has_previous(): boolean
    last(): boolean
    /* Methods of Gee.ListIterator */
    set(item?: object | null): void
    insert(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Virtual methods of GXml.XListChildrenIterator */
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_next(): boolean
    vfunc_has_next(): boolean
    vfunc_first(): boolean
    vfunc_get(): object | null
    vfunc_remove(): void
    vfunc_previous(): boolean
    vfunc_has_previous(): boolean
    vfunc_last(): boolean
    vfunc_set(item?: object | null): void
    vfunc_insert(item?: object | null): void
    vfunc_add(item?: object | null): void
    vfunc_index(): number
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XListChildrenIterator_ConstructProps)
    _init (config?: XListChildrenIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XListChildrenIterator
    static $gtype: GObject.Type
}
export interface XNode_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
    owner_document?: DomDocument
    node_value?: string
    text_content?: string
}
export class XNode {
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomNode */
    readonly node_type: DomNodeNodeType
    readonly node_name: string
    readonly base_uri: string
    owner_document: DomDocument
    readonly parent_node: DomNode
    readonly parent_element: DomElement
    readonly child_nodes: DomNodeList
    readonly first_child: DomNode
    readonly last_child: DomNode
    readonly previous_sibling: DomNode
    readonly next_sibling: DomNode
    node_value: string
    text_content: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomEventTarget */
    add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatch_event(event: DomEvent): boolean
    /* Methods of GXml.DomNode */
    get_node_type(): DomNodeNodeType
    get_node_name(): string
    get_base_uri(): string | null
    get_owner_document(): DomDocument | null
    set_owner_document(value?: DomDocument | null): void
    get_parent_node(): DomNode | null
    get_parent_element(): DomElement | null
    get_child_nodes(): DomNodeList
    get_first_child(): DomNode | null
    get_last_child(): DomNode | null
    get_previous_sibling(): DomNode | null
    get_next_sibling(): DomNode | null
    get_node_value(): string | null
    set_node_value(value?: string | null): void
    get_text_content(): string | null
    set_text_content(value?: string | null): void
    has_child_nodes(): boolean
    normalize(): void
    is_equal_node(node?: DomNode | null): boolean
    compare_document_position(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookup_prefix(nspace?: string | null): string | null
    lookup_namespace_uri(prefix?: string | null): string | null
    is_default_namespace(nspace?: string | null): boolean
    insert_before(node: DomNode, child?: DomNode | null): DomNode
    append_child(node: DomNode): DomNode
    replace_child(node: DomNode, child: DomNode): DomNode
    remove_child(child: DomNode): DomNode
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::base-uri", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-element", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-content", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: XNode, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XNode_ConstructProps)
    _init (config?: XNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static to_gnode(doc: XDocument, node?: object | null): DomNode
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface XParser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
    cancellable?: Gio.Cancellable
}
export class XParser {
    /* Properties of GXml.Parser */
    backup: boolean
    indent: boolean
    cancellable: Gio.Cancellable
    readonly node: DomNode
    readonly types: GLib.HashTable
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XParser */
    read_node(node: DomNode): void
    read_child_nodes_stream_async(istream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    read_child_nodes_stream_finish(_res_: Gio.AsyncResult): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.Parser */
    get_backup(): boolean
    set_backup(value: boolean): void
    get_indent(): boolean
    set_indent(value: boolean): void
    get_cancellable(): Gio.Cancellable | null
    set_cancellable(value?: Gio.Cancellable | null): void
    get_node(): DomNode
    get_types(): GLib.HashTable
    write_file(file: Gio.File): void
    write_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    write_file_finish(_res_: Gio.AsyncResult): void
    write_string(): string
    write_string_async(_callback_?: Gio.AsyncReadyCallback | null): void
    write_string_finish(_res_: Gio.AsyncResult): string
    write_stream(stream: Gio.OutputStream): void
    write_stream_async(stream: Gio.OutputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    write_stream_finish(_res_: Gio.AsyncResult): void
    read_file(file: Gio.File): void
    read_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    read_file_finish(_res_: Gio.AsyncResult): void
    read_stream(stream: Gio.InputStream): void
    read_stream_async(stream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    read_stream_finish(_res_: Gio.AsyncResult): void
    read_string(str: string): void
    read_string_async(str: string, _callback_?: Gio.AsyncReadyCallback | null): void
    read_string_finish(_res_: Gio.AsyncResult): void
    create_stream(): Gio.InputStream
    create_stream_async(_callback_?: Gio.AsyncReadyCallback | null): void
    create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    read_child_nodes(parent: DomNode): void
    read_child_nodes_async(parent: DomNode, _callback_?: Gio.AsyncReadyCallback | null): void
    read_child_nodes_finish(_res_: Gio.AsyncResult): void
    read_child_node(parent: DomNode): boolean
    read_child_element(parent: DomNode): boolean
    read_element_property(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    add_element_collection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    read_child_nodes_stream(istream: Gio.InputStream): void
    read_child_nodes_string(str: string): void
    read_unparsed(): string
    move_next_node(): boolean
    current_is_empty_element(): boolean
    current_is_element(): boolean
    current_is_document(): boolean
    current_node_name(): string
    create_element(parent: DomNode): DomElement | null
    read_element(element: DomElement): void
    /* Virtual methods of GXml.XParser */
    vfunc_get_backup(): boolean
    vfunc_set_backup(value: boolean): void
    vfunc_get_indent(): boolean
    vfunc_set_indent(value: boolean): void
    vfunc_get_cancellable(): Gio.Cancellable | null
    vfunc_set_cancellable(value?: Gio.Cancellable | null): void
    vfunc_get_node(): DomNode
    vfunc_get_types(): GLib.HashTable
    vfunc_write_file(file: Gio.File): void
    vfunc_write_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_file_finish(_res_: Gio.AsyncResult): void
    vfunc_write_string(): string
    vfunc_write_string_async(_callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_string_finish(_res_: Gio.AsyncResult): string
    vfunc_write_stream(stream: Gio.OutputStream): void
    vfunc_write_stream_async(stream: Gio.OutputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_write_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_file(file: Gio.File): void
    vfunc_read_file_async(file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_file_finish(_res_: Gio.AsyncResult): void
    vfunc_read_stream(stream: Gio.InputStream): void
    vfunc_read_stream_async(stream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_stream_finish(_res_: Gio.AsyncResult): void
    vfunc_read_string(str: string): void
    vfunc_read_string_async(str: string, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_string_finish(_res_: Gio.AsyncResult): void
    vfunc_create_stream(): Gio.InputStream
    vfunc_create_stream_async(_callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_create_stream_finish(_res_: Gio.AsyncResult): Gio.InputStream
    vfunc_read_child_nodes(parent: DomNode): void
    vfunc_read_child_nodes_async(parent: DomNode, _callback_?: Gio.AsyncReadyCallback | null): void
    vfunc_read_child_nodes_finish(_res_: Gio.AsyncResult): void
    vfunc_read_child_node(parent: DomNode): boolean
    vfunc_read_child_element(parent: DomNode): boolean
    vfunc_read_element_property(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    vfunc_add_element_collection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    vfunc_read_child_nodes_stream(istream: Gio.InputStream): void
    vfunc_read_child_nodes_string(str: string): void
    vfunc_read_unparsed(): string
    vfunc_move_next_node(): boolean
    vfunc_current_is_empty_element(): boolean
    vfunc_current_is_element(): boolean
    vfunc_current_is_document(): boolean
    vfunc_current_node_name(): string
    vfunc_create_element(parent: DomNode): DomElement | null
    vfunc_read_element(element: DomElement): void
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cancellable", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancellable", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::types", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::types", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XParser_ConstructProps)
    _init (config?: XParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node: DomNode): XParser
    static $gtype: GObject.Type
}
export interface XProcessingInstruction_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XProcessingInstruction {
    /* Properties of GXml.XProcessingInstruction */
    data: string
    /* Properties of GXml.XCharacterData */
    str: string
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomProcessingInstruction */
    readonly target: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XProcessingInstruction */
    get_data(): string
    set_data(value: string): void
    /* Methods of GXml.XCharacterData */
    get_str(): string
    set_str(value: string): void
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomProcessingInstruction */
    get_target(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XProcessingInstruction */
    vfunc_get_target(): string
    /* Virtual methods of GXml.XCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::str", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: XProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XProcessingInstruction_ConstructProps)
    _init (config?: XProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XProcessingInstruction
    static new(): XProcessingInstruction
    static $gtype: GObject.Type
}
export interface XsdSchema_ConstructProps extends Element_ConstructProps {
    element_definitions?: XsdListElements
    simple_type_definitions?: XsdListSimpleTypes
    complex_type_definitions?: XsdListComplexTypes
}
export class XsdSchema {
    /* Properties of GXml.XsdSchema */
    element_definitions: XsdListElements
    simple_type_definitions: XsdListSimpleTypes
    complex_type_definitions: XsdListComplexTypes
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdSchema */
    get_element_definitions(): XsdListElements
    set_element_definitions(value: XsdListElements): void
    get_simple_type_definitions(): XsdListSimpleTypes
    set_simple_type_definitions(value: XsdListSimpleTypes): void
    get_complex_type_definitions(): XsdListComplexTypes
    set_complex_type_definitions(value: XsdListComplexTypes): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdSchema_ConstructProps)
    _init (config?: XsdSchema_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSchema
    static $gtype: GObject.Type
}
export interface XsdSimpleType_ConstructProps extends Element_ConstructProps {
    final?: string
    name?: string
    annotation?: XsdAnnotation
    list?: XsdTypeList
    union?: XsdTypeUnion
    restriction?: XsdTypeRestriction
}
export class XsdSimpleType {
    /* Properties of GXml.XsdSimpleType */
    final: string
    name: string
    annotation: XsdAnnotation
    list: XsdTypeList
    union: XsdTypeUnion
    restriction: XsdTypeRestriction
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdSimpleType */
    get_final(): string
    set_final(value: string): void
    get_name(): string
    set_name(value: string): void
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    get_list(): XsdTypeList
    set_list(value: XsdTypeList): void
    get_union(): XsdTypeUnion
    set_union(value: XsdTypeUnion): void
    get_restriction(): XsdTypeRestriction
    set_restriction(value: XsdTypeRestriction): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::annotation", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::list", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::union", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::restriction", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdSimpleType_ConstructProps)
    _init (config?: XsdSimpleType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSimpleType
    static $gtype: GObject.Type
}
export interface XsdTypeDefinition_ConstructProps extends Element_ConstructProps {
    annotation?: XsdAnnotation
}
export class XsdTypeDefinition {
    /* Properties of GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeDefinition */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeDefinition_ConstructProps)
    _init (config?: XsdTypeDefinition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeDefinition
    static $gtype: GObject.Type
}
export interface XsdTypeList_ConstructProps extends XsdTypeDefinition_ConstructProps {
}
export class XsdTypeList {
    /* Properties of GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeDefinition */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeList_ConstructProps)
    _init (config?: XsdTypeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeList
    static $gtype: GObject.Type
}
export interface XsdTypeUnion_ConstructProps extends XsdTypeDefinition_ConstructProps {
}
export class XsdTypeUnion {
    /* Properties of GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeDefinition */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeUnion_ConstructProps)
    _init (config?: XsdTypeUnion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeUnion
    static $gtype: GObject.Type
}
export interface XsdTypeRestriction_ConstructProps extends XsdTypeDefinition_ConstructProps {
    base?: string
    simple_type?: XsdSimpleType
    enumerations?: XsdListTypeRestrictionEnumerations
    white_spaces?: XsdListTypeRestrictionWhiteSpaces
}
export class XsdTypeRestriction {
    /* Properties of GXml.XsdTypeRestriction */
    base: string
    simple_type: XsdSimpleType
    enumerations: XsdListTypeRestrictionEnumerations
    white_spaces: XsdListTypeRestrictionWhiteSpaces
    /* Properties of GXml.XsdTypeDefinition */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestriction */
    get_base(): string
    set_base(value: string): void
    get_simple_type(): XsdSimpleType
    set_simple_type(value: XsdSimpleType): void
    get_enumerations(): XsdListTypeRestrictionEnumerations
    set_enumerations(value: XsdListTypeRestrictionEnumerations): void
    get_white_spaces(): XsdListTypeRestrictionWhiteSpaces
    set_white_spaces(value: XsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GXml.XsdTypeDefinition */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enumerations", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::white-spaces", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestriction_ConstructProps)
    _init (config?: XsdTypeRestriction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestriction
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionDef_ConstructProps extends Element_ConstructProps {
    annotation?: XsdAnnotation
}
export class XsdTypeRestrictionDef {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionDef_ConstructProps)
    _init (config?: XsdTypeRestrictionDef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionDef
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinExclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinExclusive {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMinExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinExclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinInclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinInclusive {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMinInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinInclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxExclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxExclusive {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxExclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxInclusive_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxInclusive {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxInclusive
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionTotalDigits_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionTotalDigits {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: XsdTypeRestrictionTotalDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionTotalDigits
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionFractionDigits_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionFractionDigits {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: XsdTypeRestrictionFractionDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionFractionDigits
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionLength {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionLength_ConstructProps)
    _init (config?: XsdTypeRestrictionLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMinLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMinLength {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: XsdTypeRestrictionMinLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMinLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionMaxLength_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionMaxLength {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: XsdTypeRestrictionMaxLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionMaxLength
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionEnumeration_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
    value?: string
}
export class XsdTypeRestrictionEnumeration {
    /* Properties of GXml.XsdTypeRestrictionEnumeration */
    value: string
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionEnumeration */
    get_value(): string
    set_value(value: string): void
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: XsdTypeRestrictionEnumeration_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionEnumeration
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionWhiteSpace_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
    fixed?: XsdTypeRestrictionWhiteSpaceFixed
    value?: string
}
export class XsdTypeRestrictionWhiteSpace {
    /* Properties of GXml.XsdTypeRestrictionWhiteSpace */
    fixed: XsdTypeRestrictionWhiteSpaceFixed
    value: string
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionWhiteSpace */
    get_fixed(): XsdTypeRestrictionWhiteSpaceFixed
    set_fixed(value: XsdTypeRestrictionWhiteSpaceFixed): void
    get_value(): string
    set_value(value: string): void
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: XsdTypeRestrictionWhiteSpace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionWhiteSpace
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionWhiteSpaceFixed_ConstructProps extends Boolean_ConstructProps {
}
export class XsdTypeRestrictionWhiteSpaceFixed {
    /* Properties of GXml.BaseProperty */
    value: string
    /* Fields of GXml.Boolean */
    _value: boolean
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Boolean */
    get_boolean(): boolean
    set_boolean(value: boolean): void
    /* Methods of GXml.BaseProperty */
    get_value(): string | null
    set_value(value?: string | null): void
    validate_value(val?: string | null): boolean
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseProperty */
    vfunc_get_value(): string | null
    vfunc_set_value(value?: string | null): void
    vfunc_validate_value(val?: string | null): boolean
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionWhiteSpaceFixed_ConstructProps)
    _init (config?: XsdTypeRestrictionWhiteSpaceFixed_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionWhiteSpaceFixed
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionPattern_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionPattern {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionPattern_ConstructProps)
    _init (config?: XsdTypeRestrictionPattern_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionPattern
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionAssertion_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionAssertion {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: XsdTypeRestrictionAssertion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionAssertion
    static $gtype: GObject.Type
}
export interface XsdTypeRestrictionExplicitTimezone_ConstructProps extends XsdTypeRestrictionDef_ConstructProps {
}
export class XsdTypeRestrictionExplicitTimezone {
    /* Properties of GXml.XsdTypeRestrictionDef */
    annotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdTypeRestrictionDef */
    get_annotation(): XsdAnnotation
    set_annotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: XsdTypeRestrictionExplicitTimezone_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdTypeRestrictionExplicitTimezone
    static $gtype: GObject.Type
}
export interface XsdComplexType_ConstructProps extends XsdBaseType_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    default_attributes_apply?: boolean
    content_type?: XsdBaseContent
}
export class XsdComplexType {
    /* Properties of GXml.XsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    default_attributes_apply: boolean
    content_type: XsdBaseContent
    readonly type_attributes: XsdList
    readonly group_attributes: XsdList
    /* Properties of GXml.XsdBaseType */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.XsdComplexType */
    _type_attributes: XsdList
    _group_attributes: XsdList
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdComplexType */
    get_abstract(): boolean
    set_abstract(value: boolean): void
    get_block(): string
    set_block(value: string): void
    get_final(): string
    set_final(value: string): void
    get_mixed(): boolean
    set_mixed(value: boolean): void
    get_name(): string
    set_name(value: string): void
    get_default_attributes_apply(): boolean
    set_default_attributes_apply(value: boolean): void
    get_content_type(): XsdBaseContent
    set_content_type(value: XsdBaseContent): void
    get_type_attributes(): XsdList
    get_group_attributes(): XsdList
    /* Methods of GXml.XsdBaseType */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::block", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::final", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mixed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anotation", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdComplexType_ConstructProps)
    _init (config?: XsdComplexType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdComplexType
    static $gtype: GObject.Type
}
export interface XsdExtension_ConstructProps extends Element_ConstructProps {
    base?: string
}
export class XsdExtension {
    /* Properties of GXml.XsdExtension */
    base: string
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdExtension */
    get_base(): string
    set_base(value: string): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdExtension_ConstructProps)
    _init (config?: XsdExtension_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdExtension
    static $gtype: GObject.Type
}
export interface XsdElement_ConstructProps extends Element_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    max_occurs?: string
    min_occurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitution_group?: DomTokenList
    target_namespace?: string
    object_type?: string
    anotation?: XsdAnnotation
    simple_type?: XsdSimpleType
    complex_type?: XsdComplexType
}
export class XsdElement {
    /* Properties of GXml.XsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    max_occurs: string
    min_occurs: string
    name: string
    nillable: boolean
    ref: string
    substitution_group: DomTokenList
    target_namespace: string
    object_type: string
    anotation: XsdAnnotation
    simple_type: XsdSimpleType
    complex_type: XsdComplexType
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdElement */
    get_abstract(): boolean
    set_abstract(value: boolean): void
    get_block(): string
    set_block(value: string): void
    get_default(): string
    set_default(value: string): void
    get_final(): string
    set_final(value: string): void
    get_fixed(): string
    set_fixed(value: string): void
    get_form(): string
    set_form(value: string): void
    get_max_occurs(): string
    set_max_occurs(value: string): void
    get_min_occurs(): string
    set_min_occurs(value: string): void
    get_name(): string
    set_name(value: string): void
    get_nillable(): boolean
    set_nillable(value: boolean): void
    get_ref(): string
    set_ref(value: string): void
    get_substitution_group(): DomTokenList
    set_substitution_group(value: DomTokenList): void
    get_target_namespace(): string
    set_target_namespace(value: string): void
    get_object_type(): string
    set_object_type(value: string): void
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    get_simple_type(): XsdSimpleType
    set_simple_type(value: XsdSimpleType): void
    get_complex_type(): XsdComplexType
    set_complex_type(value: XsdComplexType): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::block", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::default", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::final", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::form", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-occurs", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nillable", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ref", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::substitution-group", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-namespace", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::object-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anotation", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::simple-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::complex-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdElement, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdElement_ConstructProps)
    _init (config?: XsdElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdElement
    static $gtype: GObject.Type
}
export interface XsdAnnotation_ConstructProps extends Element_ConstructProps {
}
export class XsdAnnotation {
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::tag-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdAnnotation_ConstructProps)
    _init (config?: XsdAnnotation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAnnotation
    static $gtype: GObject.Type
}
export interface XsdBaseType_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseType {
    /* Properties of GXml.XsdBaseType */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseType */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdBaseType_ConstructProps)
    _init (config?: XsdBaseType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseType
    static $gtype: GObject.Type
}
export interface XsdBaseContent_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseContent {
    /* Properties of GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseContent */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdBaseContent_ConstructProps)
    _init (config?: XsdBaseContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseContent
    static $gtype: GObject.Type
}
export interface XsdSimpleContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdSimpleContent {
    /* Properties of GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseContent */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdSimpleContent_ConstructProps)
    _init (config?: XsdSimpleContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdSimpleContent
    static $gtype: GObject.Type
}
export interface XsdComplexContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdComplexContent {
    /* Properties of GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseContent */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdComplexContent_ConstructProps)
    _init (config?: XsdComplexContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdComplexContent
    static $gtype: GObject.Type
}
export interface XsdOpenContent_ConstructProps extends XsdBaseContent_ConstructProps {
}
export class XsdOpenContent {
    /* Properties of GXml.XsdBaseContent */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseContent */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdOpenContent_ConstructProps)
    _init (config?: XsdOpenContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdOpenContent
    static $gtype: GObject.Type
}
export interface XsdBaseAttribute_ConstructProps extends Element_ConstructProps {
    anotation?: XsdAnnotation
}
export class XsdBaseAttribute {
    /* Properties of GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseAttribute */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdBaseAttribute_ConstructProps)
    _init (config?: XsdBaseAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdBaseAttribute
    static $gtype: GObject.Type
}
export interface XsdAttribute_ConstructProps extends XsdBaseAttribute_ConstructProps {
}
export class XsdAttribute {
    /* Properties of GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseAttribute */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdAttribute_ConstructProps)
    _init (config?: XsdAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAttribute
    static $gtype: GObject.Type
}
export interface XsdAttributeGroup_ConstructProps extends XsdBaseAttribute_ConstructProps {
}
export class XsdAttributeGroup {
    /* Properties of GXml.XsdBaseAttribute */
    anotation: XsdAnnotation
    /* Properties of GXml.Element */
    tag_name: string
    content: string
    /* Properties of GXml.Node */
    namespace_definitions: NodeList
    namespace_uri: string
    prefix: string
    local_name: string
    node_name: string
    node_value: string
    node_type: NodeType
    parent_node: Node
    child_nodes: NodeList
    first_child: Node
    last_child: Node
    previous_sibling: Node
    next_sibling: Node
    attributes: NamedAttrMap
    owner_document: Document
    /* Fields of GXml.Element */
    parent_instance: BackedNode
    priv: ElementPrivate
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdBaseAttribute */
    get_anotation(): XsdAnnotation
    set_anotation(value: XsdAnnotation): void
    /* Methods of GXml.Element */
    get_attribute(name: string): string
    set_attribute(name: string, value: string): void
    remove_attribute(name: string): void
    get_attribute_node(name: string): Attr | null
    set_attribute_node(new_attr: Attr): Attr
    remove_attribute_node(old_attr: Attr): Attr
    get_elements_by_tag_name(tag_name: string): NodeList
    normalize(): void
    get_tag_name(): string
    get_content(): string
    set_content(value: string): void
    /* Methods of GXml.Node */
    add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    insert_before(new_child: Node, ref_child?: Node | null): Node | null
    replace_child(new_child: Node, old_child: Node): Node | null
    remove_child(old_child: Node): Node | null
    append_child(new_child: Node): Node | null
    has_child_nodes(): boolean
    clone_node(deep: boolean): Node | null
    copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    to_string(format: boolean, level: number): string
    get_namespace_definitions(): NodeList | null
    get_namespace_uri(): string | null
    get_prefix(): string | null
    get_local_name(): string | null
    get_node_name(): string
    get_node_value(): string | null
    get_node_type(): NodeType
    get_parent_node(): Node | null
    get_child_nodes(): NodeList | null
    get_first_child(): Node | null
    get_last_child(): Node | null
    get_previous_sibling(): Node | null
    get_next_sibling(): Node | null
    get_attributes(): NamedAttrMap | null
    get_owner_document(): Document
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfunc_add_namespace_attr(uri: string, prefix: string): NamespaceAttr | null
    vfunc_insert_before(new_child: Node, ref_child?: Node | null): Node | null
    vfunc_replace_child(new_child: Node, old_child: Node): Node | null
    vfunc_remove_child(old_child: Node): Node | null
    vfunc_append_child(new_child: Node): Node | null
    vfunc_has_child_nodes(): boolean
    vfunc_clone_node(deep: boolean): Node | null
    vfunc_copy(node: Node, deep: boolean): [ /* returnType */ boolean, /* node */ Node ]
    vfunc_to_string(format: boolean, level: number): string
    vfunc_get_namespace_definitions(): NodeList | null
    vfunc_get_namespace_uri(): string | null
    vfunc_get_prefix(): string | null
    vfunc_get_local_name(): string | null
    vfunc_get_node_name(): string
    vfunc_get_node_value(): string | null
    vfunc_get_node_type(): NodeType
    vfunc_get_parent_node(): Node | null
    vfunc_get_child_nodes(): NodeList | null
    vfunc_get_first_child(): Node | null
    vfunc_get_last_child(): Node | null
    vfunc_get_previous_sibling(): Node | null
    vfunc_get_next_sibling(): Node | null
    vfunc_get_attributes(): NamedAttrMap | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tag-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-definitions", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-definitions", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::namespace-uri", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefix", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-value", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::node-type", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent-node", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-nodes", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::previous-sibling", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::next-sibling", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::owner-document", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: XsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdAttributeGroup_ConstructProps)
    _init (config?: XsdAttributeGroup_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdAttributeGroup
    static $gtype: GObject.Type
}
export interface XsdList_ConstructProps extends ArrayList_ConstructProps {
}
export class XsdList {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdList_ConstructProps)
    _init (config?: XsdList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdList
    static $gtype: GObject.Type
}
export interface XsdListElements_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListElements {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdListElements_ConstructProps)
    _init (config?: XsdListElements_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListElements
    static $gtype: GObject.Type
}
export interface XsdListSimpleTypes_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListSimpleTypes {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdListSimpleTypes_ConstructProps)
    _init (config?: XsdListSimpleTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListSimpleTypes
    static $gtype: GObject.Type
}
export interface XsdListComplexTypes_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListComplexTypes {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdListComplexTypes_ConstructProps)
    _init (config?: XsdListComplexTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListComplexTypes
    static $gtype: GObject.Type
}
export interface XsdListTypeRestrictionEnumerations_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListTypeRestrictionEnumerations {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: XsdListTypeRestrictionEnumerations_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListTypeRestrictionEnumerations
    static $gtype: GObject.Type
}
export interface XsdListTypeRestrictionWhiteSpaces_ConstructProps extends XsdList_ConstructProps {
}
export class XsdListTypeRestrictionWhiteSpaces {
    /* Properties of GXml.XsdList */
    readonly length: number
    /* Fields of GXml.BaseCollection */
    _nodes_index: GLib.Queue
    _element: Element
    _items_name: string
    _items_type: GObject.Type
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XsdList */
    get_length(): number
    remove(index: number): void
    index_of(element: DomElement): number
    /* Methods of GXml.BaseCollection */
    initialize_element(e: Element): void
    validate_append(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfunc_validate_append(index: number, element: DomElement): boolean
    vfunc_clear(): void
    vfunc_foreach(f: Gee.ForallFunc): boolean
    vfunc_stream(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfunc_fold(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfunc_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfunc_scan(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfunc_filter(pred: Gee.Predicate): Gee.Iterator
    vfunc_chop(offset: number, length: number): Gee.Iterator
    vfunc_flat_map(a_type: GObject.Type, a_dup_func: GObject.BoxedCopyFunc, a_destroy_func: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfunc_tee(forks: number): Gee.Iterator[]
    vfunc_first_match(pred: Gee.Predicate): object | null
    vfunc_any_match(pred: Gee.Predicate): boolean
    vfunc_all_match(pred: Gee.Predicate): boolean
    vfunc_max(compare: GLib.CompareDataFunc): object | null
    vfunc_min(compare: GLib.CompareDataFunc): object | null
    vfunc_order_by(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfunc_get_element_type(): GObject.Type
    vfunc_iterator(): Gee.Iterator
    vfunc_get_nodes_index(): GLib.Queue
    vfunc_get_element(): DomElement
    vfunc_set_element(value: DomElement): void
    vfunc_get_items_name(): string
    vfunc_get_items_type(): GObject.Type
    vfunc_set_items_type(value: GObject.Type): void
    vfunc_search(): void
    vfunc_get_item(index: number): DomElement | null
    vfunc_append(node: DomElement): void
    vfunc_get_length(): number
    vfunc_initialize(t: GObject.Type): void
    vfunc_create_item(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: XsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: XsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): XsdListTypeRestrictionWhiteSpaces
    static $gtype: GObject.Type
}
export interface XText_ConstructProps extends XCharacterData_ConstructProps {
    data?: string
}
export class XText {
    /* Properties of GXml.XCharacterData */
    str: string
    /* Properties of GXml.XNode */
    readonly attrs: Gee.Map
    readonly children_nodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly type_node: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomCharacterData */
    data: string
    /* Fields of GXml.XNode */
    _doc: XDocument
    _node: object | null
    _base_uri: string
    /* Fields of GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GXml.XCharacterData */
    get_str(): string
    set_str(value: string): void
    /* Methods of GXml.XNode */
    set_namespace(uri: string, prefix?: string | null): boolean
    get_attrs(): Gee.Map
    get_children_nodes(): Gee.BidirList
    get_document(): DomDocument
    get_parent(): DomNode
    get_type_node(): NodeType
    get_name(): string
    get_value(): string
    set_value(value: string): void
    to_string(): string
    get_internal_node(): object | null
    clone_node(deep: boolean): DomNode
    /* Methods of GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: GObject.Closure, transform_from: GObject.Closure): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: GObject.Value): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: GObject.Value): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: GObject.Closure): void
    /* Methods of GXml.DomText */
    split_text(offset: number): DomText
    get_whole_text(): string
    /* Methods of GXml.DomCharacterData */
    get_data(): string
    set_data(value: string): void
    get_length(): number
    substring_data(offset: number, count: number): string
    append_data(data: string): void
    insert_data(offset: number, data: string): void
    delete_data(offset: number, count: number): void
    replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XText */
    vfunc_split_text(offset: number): DomText
    vfunc_get_whole_text(): string
    /* Virtual methods of GXml.XCharacterData */
    vfunc_get_data(): string
    vfunc_set_data(value: string): void
    vfunc_get_length(): number
    vfunc_substring_data(offset: number, count: number): string
    vfunc_append_data(data: string): void
    vfunc_insert_data(offset: number, data: string): void
    vfunc_delete_data(offset: number, count: number): void
    vfunc_replace_data(offset: number, count: number, data: string): void
    /* Virtual methods of GXml.XNonDocumentChildNode */
    vfunc_get_previous_element_sibling(): DomElement | null
    vfunc_get_next_element_sibling(): DomElement | null
    /* Virtual methods of GXml.XChildNode */
    vfunc_remove(): void
    /* Virtual methods of GXml.XNode */
    vfunc_set_namespace(uri: string, prefix?: string | null): boolean
    vfunc_get_attrs(): Gee.Map
    vfunc_get_children_nodes(): Gee.BidirList
    vfunc_get_document(): DomDocument
    vfunc_get_parent(): DomNode
    vfunc_get_type_node(): NodeType
    vfunc_get_name(): string
    vfunc_get_value(): string
    vfunc_set_value(value: string): void
    vfunc_to_string(): string
    vfunc_add_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_remove_event_listener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfunc_dispatch_event(event: DomEvent): boolean
    vfunc_get_node_type(): DomNodeNodeType
    vfunc_get_node_name(): string
    vfunc_get_base_uri(): string | null
    vfunc_get_owner_document(): DomDocument | null
    vfunc_set_owner_document(value?: DomDocument | null): void
    vfunc_get_parent_node(): DomNode | null
    vfunc_get_parent_element(): DomElement | null
    vfunc_get_child_nodes(): DomNodeList
    vfunc_get_first_child(): DomNode | null
    vfunc_get_last_child(): DomNode | null
    vfunc_get_previous_sibling(): DomNode | null
    vfunc_get_next_sibling(): DomNode | null
    vfunc_get_node_value(): string | null
    vfunc_set_node_value(value?: string | null): void
    vfunc_get_text_content(): string | null
    vfunc_set_text_content(value?: string | null): void
    vfunc_has_child_nodes(): boolean
    vfunc_normalize(): void
    vfunc_is_equal_node(node?: DomNode | null): boolean
    vfunc_compare_document_position(other: DomNode): DomNodeDocumentPosition
    vfunc_contains(other?: DomNode | null): boolean
    vfunc_lookup_prefix(nspace?: string | null): string | null
    vfunc_lookup_namespace_uri(prefix?: string | null): string | null
    vfunc_is_default_namespace(nspace?: string | null): boolean
    vfunc_insert_before(node: DomNode, child?: DomNode | null): DomNode
    vfunc_append_child(node: DomNode): DomNode
    vfunc_replace_child(node: DomNode, child: DomNode): DomNode
    vfunc_remove_child(child: DomNode): DomNode
    /* Virtual methods of GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attrs", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::children-nodes", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::document", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parent", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::type-node", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::value", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::data", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: XText, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: XText_ConstructProps)
    _init (config?: XText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: XDocument, node?: object | null): XText
    static new(): XText
    static $gtype: GObject.Type
}
export abstract class ArrayListClass {
    static name: string
}
export class ArrayListPrivate {
    static name: string
}
export abstract class AttrClass {
    static name: string
}
export class AttrPrivate {
    static name: string
}
export abstract class BaseCollectionClass {
    /* Fields of GXml.BaseCollectionClass */
    validate_append: (index: number, element: DomElement) => boolean
    clear: () => void
    static name: string
}
export class BaseCollectionPrivate {
    static name: string
}
export abstract class CssSelectorClass {
    static name: string
}
export class CssSelectorPrivate {
    static name: string
}
export abstract class CssElementSelectorClass {
    static name: string
}
export class CssElementSelectorPrivate {
    static name: string
}
export abstract class CssAttributeSelectorClass {
    static name: string
}
export class CssAttributeSelectorPrivate {
    static name: string
}
export abstract class CssNotSelectorClass {
    static name: string
}
export class CssNotSelectorPrivate {
    static name: string
}
export abstract class CssSelectorParserClass {
    static name: string
}
export class CssSelectorParserPrivate {
    static name: string
}
export abstract class DocumentClass {
    static name: string
}
export class DocumentPrivate {
    static name: string
}
export abstract class ImplementationClass {
    static name: string
}
export class ImplementationPrivate {
    static name: string
}
export abstract class DocumentTypeClass {
    static name: string
}
export class DocumentTypePrivate {
    static name: string
}
export abstract class DocumentFragmentClass {
    static name: string
}
export class DocumentFragmentPrivate {
    static name: string
}
export abstract class DomNodeFilterClass {
    static name: string
}
export class DomNodeFilterPrivate {
    static name: string
}
export abstract class DomElementListClass {
    static name: string
}
export class DomElementListPrivate {
    static name: string
}
export abstract class DomEventInitClass {
    static name: string
}
export class DomEventInitPrivate {
    static name: string
}
export abstract class DomCustomEventInitClass {
    static name: string
}
export class DomCustomEventInitPrivate {
    static name: string
}
export abstract class DomTimeStampClass {
    static name: string
}
export class DomTimeStampPrivate {
    static name: string
}
export abstract class DomMutationObserverInitClass {
    static name: string
}
export class DomMutationObserverInitPrivate {
    static name: string
}
export abstract class DomErrorNameClass {
    static name: string
}
export class DomErrorNamePrivate {
    static name: string
}
export abstract class ElementClass {
    static name: string
}
export class ElementPrivate {
    static name: string
}
export abstract class ElementAttributesClass {
    static name: string
}
export class ElementAttributesPrivate {
    static name: string
}
export abstract class EnumerationClass {
    static name: string
}
export class EnumerationPrivate {
    static name: string
}
export abstract class EventClass {
    static name: string
}
export class EventPrivate {
    static name: string
}
export abstract class CustomEventClass {
    static name: string
}
export class CustomEventPrivate {
    static name: string
}
export abstract class HashMapClass {
    static name: string
}
export class HashMapPrivate {
    static name: string
}
export abstract class HashPairedMapClass {
    static name: string
}
export class HashPairedMapPrivate {
    static name: string
}
export abstract class HashThreeMapClass {
    static name: string
}
export class HashThreeMapPrivate {
    static name: string
}
export abstract class HTMLCollectionClass {
    static name: string
}
export class HTMLCollectionPrivate {
    static name: string
}
export abstract class HtmlDocumentClass {
    static name: string
}
export class HtmlDocumentPrivate {
    static name: string
}
export abstract class HtmlElementClass {
    static name: string
}
export class HtmlElementPrivate {
    static name: string
}
export abstract class LXPathObjectClass {
    static name: string
}
export class LXPathObjectPrivate {
    static name: string
}
export abstract class NodeClass {
    static name: string
}
export class NodePrivate {
    static name: string
}
export abstract class NodeListClass {
    static name: string
}
export class NodeListPrivate {
    static name: string
}
export abstract class NodeIteratorClass {
    static name: string
}
export class NodeIteratorPrivate {
    static name: string
}
export abstract class BasePropertyClass {
    /* Fields of GXml.BasePropertyClass */
    validate_value: (val?: string | null) => boolean
    static name: string
}
export class BasePropertyPrivate {
    static name: string
}
export abstract class StringClass {
    static name: string
}
export class StringPrivate {
    static name: string
}
export abstract class ArrayStringClass {
    static name: string
}
export class ArrayStringPrivate {
    static name: string
}
export abstract class XsdArrayStringClass {
    static name: string
}
export class XsdArrayStringPrivate {
    static name: string
}
export abstract class DoubleClass {
    static name: string
}
export class DoublePrivate {
    static name: string
}
export abstract class FloatClass {
    static name: string
}
export class FloatPrivate {
    static name: string
}
export abstract class IntClass {
    static name: string
}
export class IntPrivate {
    static name: string
}
export abstract class BooleanClass {
    static name: string
}
export class BooleanPrivate {
    static name: string
}
export abstract class EnumClass {
    static name: string
}
export class EnumPrivate {
    static name: string
}
export abstract class DateClass {
    static name: string
}
export class DatePrivate {
    static name: string
}
export abstract class DateTimeClass {
    static name: string
}
export class DateTimePrivate {
    static name: string
}
export abstract class RangeClass {
    static name: string
}
export class RangePrivate {
    static name: string
}
export abstract class SettableTokenListClass {
    static name: string
}
export class SettableTokenListPrivate {
    static name: string
}
export abstract class StringRefClass {
    static name: string
}
export class StringRefPrivate {
    static name: string
}
export abstract class CharacterDataClass {
    static name: string
}
export class CharacterDataPrivate {
    static name: string
}
export abstract class TextClass {
    static name: string
}
export class TextPrivate {
    static name: string
}
export abstract class ProcessingInstructionClass {
    static name: string
}
export class ProcessingInstructionPrivate {
    static name: string
}
export abstract class CommentClass {
    static name: string
}
export class CommentPrivate {
    static name: string
}
export abstract class TokenListClass {
    static name: string
}
export class TokenListPrivate {
    static name: string
}
export abstract class TreeWalkerClass {
    static name: string
}
export class TreeWalkerPrivate {
    static name: string
}
export abstract class XAttributeClass {
    static name: string
}
export class XAttributePrivate {
    static name: string
}
export abstract class XCharacterDataClass {
    static name: string
}
export class XCharacterDataPrivate {
    static name: string
}
export abstract class XChildNodeClass {
    static name: string
}
export class XChildNodePrivate {
    static name: string
}
export abstract class XNonDocumentChildNodeClass {
    static name: string
}
export class XNonDocumentChildNodePrivate {
    static name: string
}
export abstract class XCommentClass {
    static name: string
}
export class XCommentPrivate {
    static name: string
}
export abstract class XDocumentClass {
    /* Fields of GXml.XDocumentClass */
    save: (cancellable?: Gio.Cancellable | null) => boolean
    save_as: (f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    static name: string
}
export class XDocumentPrivate {
    static name: string
}
export abstract class XElementClass {
    static name: string
}
export class XElementPrivate {
    static name: string
}
export abstract class XHashMapAttrClass {
    static name: string
}
export class XHashMapAttrPrivate {
    static name: string
}
export abstract class XHashMapAttrEntryClass {
    static name: string
}
export class XHashMapAttrEntryPrivate {
    static name: string
}
export abstract class XHashMapAttrIteratorClass {
    static name: string
}
export class XHashMapAttrIteratorPrivate {
    static name: string
}
export abstract class XHtmlDocumentClass {
    static name: string
}
export class XHtmlDocumentPrivate {
    static name: string
}
export abstract class XListChildrenClass {
    static name: string
}
export class XListChildrenPrivate {
    static name: string
}
export abstract class XListChildrenIteratorClass {
    static name: string
}
export class XListChildrenIteratorPrivate {
    static name: string
}
export abstract class XNodeClass {
    /* Fields of GXml.XNodeClass */
    set_namespace: (uri: string, prefix?: string | null) => boolean
    to_string: () => string
    static name: string
}
export class XNodePrivate {
    static name: string
}
export abstract class XParserClass {
    static name: string
}
export class XParserPrivate {
    static name: string
}
export abstract class XProcessingInstructionClass {
    static name: string
}
export class XProcessingInstructionPrivate {
    static name: string
}
export abstract class XsdSchemaClass {
    static name: string
}
export class XsdSchemaPrivate {
    static name: string
}
export abstract class XsdSimpleTypeClass {
    static name: string
}
export class XsdSimpleTypePrivate {
    static name: string
}
export abstract class XsdTypeDefinitionClass {
    static name: string
}
export class XsdTypeDefinitionPrivate {
    static name: string
}
export abstract class XsdTypeListClass {
    static name: string
}
export class XsdTypeListPrivate {
    static name: string
}
export abstract class XsdTypeUnionClass {
    static name: string
}
export class XsdTypeUnionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionClass {
    static name: string
}
export class XsdTypeRestrictionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionDefClass {
    static name: string
}
export class XsdTypeRestrictionDefPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinExclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMinExclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinInclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMinInclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxExclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMaxExclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxInclusiveClass {
    static name: string
}
export class XsdTypeRestrictionMaxInclusivePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionTotalDigitsClass {
    static name: string
}
export class XsdTypeRestrictionTotalDigitsPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionFractionDigitsClass {
    static name: string
}
export class XsdTypeRestrictionFractionDigitsPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionLengthClass {
    static name: string
}
export class XsdTypeRestrictionLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMinLengthClass {
    static name: string
}
export class XsdTypeRestrictionMinLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionMaxLengthClass {
    static name: string
}
export class XsdTypeRestrictionMaxLengthPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionEnumerationClass {
    static name: string
}
export class XsdTypeRestrictionEnumerationPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionWhiteSpaceClass {
    static name: string
}
export class XsdTypeRestrictionWhiteSpacePrivate {
    static name: string
}
export abstract class XsdTypeRestrictionWhiteSpaceFixedClass {
    static name: string
}
export class XsdTypeRestrictionWhiteSpaceFixedPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionPatternClass {
    static name: string
}
export class XsdTypeRestrictionPatternPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionAssertionClass {
    static name: string
}
export class XsdTypeRestrictionAssertionPrivate {
    static name: string
}
export abstract class XsdTypeRestrictionExplicitTimezoneClass {
    static name: string
}
export class XsdTypeRestrictionExplicitTimezonePrivate {
    static name: string
}
export abstract class XsdComplexTypeClass {
    static name: string
}
export class XsdComplexTypePrivate {
    static name: string
}
export abstract class XsdExtensionClass {
    static name: string
}
export class XsdExtensionPrivate {
    static name: string
}
export abstract class XsdElementClass {
    static name: string
}
export class XsdElementPrivate {
    static name: string
}
export abstract class XsdAnnotationClass {
    static name: string
}
export class XsdAnnotationPrivate {
    static name: string
}
export abstract class XsdBaseTypeClass {
    static name: string
}
export class XsdBaseTypePrivate {
    static name: string
}
export abstract class XsdBaseContentClass {
    static name: string
}
export class XsdBaseContentPrivate {
    static name: string
}
export abstract class XsdSimpleContentClass {
    static name: string
}
export class XsdSimpleContentPrivate {
    static name: string
}
export abstract class XsdComplexContentClass {
    static name: string
}
export class XsdComplexContentPrivate {
    static name: string
}
export abstract class XsdOpenContentClass {
    static name: string
}
export class XsdOpenContentPrivate {
    static name: string
}
export abstract class XsdBaseAttributeClass {
    static name: string
}
export class XsdBaseAttributePrivate {
    static name: string
}
export abstract class XsdAttributeClass {
    static name: string
}
export class XsdAttributePrivate {
    static name: string
}
export abstract class XsdAttributeGroupClass {
    static name: string
}
export class XsdAttributeGroupPrivate {
    static name: string
}
export abstract class XsdListClass {
    static name: string
}
export class XsdListPrivate {
    static name: string
}
export abstract class XsdListElementsClass {
    static name: string
}
export class XsdListElementsPrivate {
    static name: string
}
export abstract class XsdListSimpleTypesClass {
    static name: string
}
export class XsdListSimpleTypesPrivate {
    static name: string
}
export abstract class XsdListComplexTypesClass {
    static name: string
}
export class XsdListComplexTypesPrivate {
    static name: string
}
export abstract class XsdListTypeRestrictionEnumerationsClass {
    static name: string
}
export class XsdListTypeRestrictionEnumerationsPrivate {
    static name: string
}
export abstract class XsdListTypeRestrictionWhiteSpacesClass {
    static name: string
}
export class XsdListTypeRestrictionWhiteSpacesPrivate {
    static name: string
}
export abstract class XTextClass {
    static name: string
}
export class XTextPrivate {
    static name: string
}
export abstract class CollectionIface {
    /* Fields of GXml.CollectionIface */
    search: () => void
    get_item: (index: number) => DomElement | null
    append: (node: DomElement) => void
    initialize: (t: GObject.Type) => void
    create_item: () => DomElement | null
    validate_append: (index: number, element: DomElement) => boolean
    clear: () => void
    get_nodes_index: () => GLib.Queue
    get_element: () => DomElement
    set_element: (value: DomElement) => void
    get_items_name: () => string
    get_items_type: () => GObject.Type
    set_items_type: (value: GObject.Type) => void
    get_length: () => number
    static name: string
}
export abstract class ListIface {
    static name: string
}
export abstract class MappeableElementIface {
    /* Fields of GXml.MappeableElementIface */
    get_map_key: () => string
    static name: string
}
export abstract class MapIface {
    /* Fields of GXml.MapIface */
    item: (key: string) => DomElement | null
    has_key: (key: string) => boolean
    get_attribute_key: () => string
    set_attribute_key: (value: string) => void
    get_keys_set: () => Gee.Set
    static name: string
}
export abstract class MappeableElementPairKeyIface {
    /* Fields of GXml.MappeableElementPairKeyIface */
    get_map_primary_key: () => string
    get_map_secondary_key: () => string
    static name: string
}
export abstract class PairedMapIface {
    /* Fields of GXml.PairedMapIface */
    item: (primary_key: string, secondary_key: string) => DomElement | null
    has_primary_key: (key: string) => boolean
    has_secondary_key: (pkey: string, key: string) => boolean
    secondary_keys_set: (pkey: string) => Gee.Set
    get_attribute_primary_key: () => string
    set_attribute_primary_key: (value: string) => void
    get_attribute_secondary_key: () => string
    set_attribute_secondary_key: (value: string) => void
    get_primary_keys_set: () => Gee.Set
    static name: string
}
export abstract class MappeableElementThreeKeyIface {
    /* Fields of GXml.MappeableElementThreeKeyIface */
    get_map_pkey: () => string
    get_map_skey: () => string
    get_map_tkey: () => string
    static name: string
}
export abstract class ThreeMapIface {
    /* Fields of GXml.ThreeMapIface */
    item: (primary_key: string, secondary_key: string, third_key: string) => DomElement | null
    has_primary_key: (key: string) => boolean
    has_secondary_key: (pkey: string, key: string) => boolean
    has_third_key: (pkey: string, skey: string, key: string) => boolean
    secondary_keys_set: (pkey: string) => Gee.Set
    third_keys_set: (pkey: string, skey: string) => Gee.Set
    get_attribute_primary_key: () => string
    set_attribute_primary_key: (value: string) => void
    get_attribute_secondary_key: () => string
    set_attribute_secondary_key: (value: string) => void
    get_attribute_third_key: () => string
    set_attribute_third_key: (value: string) => void
    get_primary_keys_set: () => Gee.Set
    static name: string
}
export abstract class CollectionParentIface {
    /* Fields of GXml.CollectionParentIface */
    get_types: () => GLib.HashTable
    static name: string
}
export abstract class DomAttrIface {
    /* Fields of GXml.DomAttrIface */
    get_namespace_uri: () => string | null
    get_prefix: () => string | null
    get_local_name: () => string
    get_name: () => string
    get_value: () => string
    set_value: (value: string) => void
    get_specified: () => boolean
    static name: string
}
export abstract class DomCharacterDataIface {
    /* Fields of GXml.DomCharacterDataIface */
    substring_data: (offset: number, count: number) => string
    append_data: (data: string) => void
    insert_data: (offset: number, data: string) => void
    delete_data: (offset: number, count: number) => void
    replace_data: (offset: number, count: number, data: string) => void
    get_data: () => string
    set_data: (value: string) => void
    get_length: () => number
    static name: string
}
export abstract class DomTextIface {
    /* Fields of GXml.DomTextIface */
    split_text: (offset: number) => DomText
    get_whole_text: () => string
    static name: string
}
export abstract class DomProcessingInstructionIface {
    /* Fields of GXml.DomProcessingInstructionIface */
    get_target: () => string
    static name: string
}
export abstract class DomCommentIface {
    static name: string
}
export abstract class DomNonElementParentNodeIface {
    /* Fields of GXml.DomNonElementParentNodeIface */
    get_element_by_id: (element_id: string) => DomElement | null
    static name: string
}
export abstract class DomParentNodeIface {
    /* Fields of GXml.DomParentNodeIface */
    query_selector: (selectors: string) => DomElement | null
    query_selector_all: (selectors: string) => DomNodeList
    get_elements_by_property_value: (property: string, value: string) => DomElementList
    get_children: () => DomHTMLCollection
    get_first_element_child: () => DomElement | null
    get_last_element_child: () => DomElement | null
    get_child_element_count: () => number
    static name: string
}
export abstract class DomNonDocumentTypeChildNodeIface {
    /* Fields of GXml.DomNonDocumentTypeChildNodeIface */
    get_previous_element_sibling: () => DomElement | null
    get_next_element_sibling: () => DomElement | null
    static name: string
}
export abstract class DomChildNodeIface {
    /* Fields of GXml.DomChildNodeIface */
    remove: () => void
    static name: string
}
export abstract class DomNodeListIface {
    /* Fields of GXml.DomNodeListIface */
    item: (index: number) => DomNode | null
    get_length: () => number
    static name: string
}
export abstract class DomHTMLCollectionIface {
    /* Fields of GXml.DomHTMLCollectionIface */
    get_element: (index: number) => DomElement | null
    to_array: () => DomElement[]
    item: (index: number) => DomElement | null
    named_item: (name: string) => DomElement | null
    get_length: () => number
    static name: string
}
export abstract class DomNodeIteratorIface {
    /* Fields of GXml.DomNodeIteratorIface */
    next_node: () => DomNode | null
    previous_node: () => DomNode | null
    detach: () => void
    get_root: () => DomNode
    get_reference_node: () => DomNode
    get_pointer_before_reference_node: () => boolean
    get_what_to_show: () => number
    static name: string
}
export abstract class DomTreeWalkerIface {
    /* Fields of GXml.DomTreeWalkerIface */
    parent_node: () => DomNode | null
    first_child: () => DomNode | null
    last_child: () => DomNode | null
    previous_sibling: () => DomNode | null
    next_sibling: () => DomNode | null
    previous_node: () => DomNode | null
    next_node: () => DomNode | null
    get_root: () => DomNode
    get_what_to_show: () => number
    get_current_node: () => DomNode
    static name: string
}
export abstract class DomNamedNodeMapIface {
    /* Fields of GXml.DomNamedNodeMapIface */
    item: (index: number) => DomNode | null
    get_named_item: (name: string) => DomNode | null
    set_named_item: (node: DomNode) => DomNode | null
    remove_named_item: (name: string) => DomNode | null
    remove_named_item_ns: (namespace_uri: string, localName: string) => DomNode | null
    get_named_item_ns: (namespace_uri: string, local_name: string) => DomNode | null
    set_named_item_ns: (node: DomNode) => DomNode | null
    get_length: () => number
    static name: string
}
export abstract class DomTokenListIface {
    /* Fields of GXml.DomTokenListIface */
    item: (index: number) => string | null
    contains: (token: string) => boolean
    add: (tokens: string[]) => void
    remove: (tokens: string[]) => void
    toggle: (token: string, force: boolean, auto: boolean) => boolean
    to_string: () => string
    get_length: () => number
    static name: string
}
export abstract class DomSettableTokenListIface {
    /* Fields of GXml.DomSettableTokenListIface */
    get_value: () => string
    set_value: (value: string) => void
    static name: string
}
export abstract class DomDocumentIface {
    /* Fields of GXml.DomDocumentIface */
    get_elements_by_tag_name: (local_name: string) => DomHTMLCollection
    get_elements_by_tag_name_ns: (namespace: string | null, local_name: string) => DomHTMLCollection
    get_elements_by_class_name: (classNames: string) => DomHTMLCollection
    create_element: (local_name: string) => DomElement
    create_element_ns: (namespace: string | null, qualified_name: string) => DomElement
    create_document_fragment: () => DomDocumentFragment
    create_text_node: (data: string) => DomText
    create_comment: (data: string) => DomComment
    create_processing_instruction: (target: string, data: string) => DomProcessingInstruction
    import_node: (node: DomNode, deep: boolean) => DomNode
    adopt_node: (node: DomNode) => DomNode
    create_event: (interface: string) => DomEvent
    create_range: () => DomRange
    create_node_iterator: (root: DomNode, whatToShow: number) => DomNodeIterator
    create_tree_walker: (root: DomNode, what_to_show: number) => DomTreeWalker
    write_file: (file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    write_file_async: (file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_file_finish: (_res_: Gio.AsyncResult) => void
    write_stream: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => void
    write_stream_async: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_stream_finish: (_res_: Gio.AsyncResult) => void
    create_stream: () => Gio.InputStream
    create_stream_async: (cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    create_stream_finish: (_res_: Gio.AsyncResult) => Gio.InputStream
    write_string: (cancellable?: Gio.Cancellable | null) => string
    write_string_async: (cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_string_finish: (_res_: Gio.AsyncResult) => string
    read_from_file: (file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    read_from_file_async: (file: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_file_finish: (_res_: Gio.AsyncResult) => void
    read_from_string: (str: string, cancellable?: Gio.Cancellable | null) => void
    read_from_string_async: (str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_string_finish: (_res_: Gio.AsyncResult) => void
    read_from_stream: (stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    read_from_stream_async: (stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_stream_finish: (_res_: Gio.AsyncResult) => void
    get_xml_parser: () => Parser
    set_xml_parser: (parser: Parser) => void
    get_implementation: () => DomImplementation
    get_url: () => string
    get_document_uri: () => string
    get_origin: () => string
    get_compat_mode: () => string
    get_character_set: () => string
    get_content_type: () => string
    get_doctype: () => DomDocumentType | null
    get_document_element: () => DomElement | null
    static name: string
}
export abstract class DomXMLDocumentIface {
    static name: string
}
export abstract class DomImplementationIface {
    /* Fields of GXml.DomImplementationIface */
    create_document_type: (qualified_name: string, public_id: string, system_id: string) => DomDocumentType
    create_document: (nspace?: string | null, qualified_name?: string | null, doctype?: DomDocumentType | null) => DomXMLDocument
    create_html_document: (title: string) => DomDocument
    has_feature: () => boolean
    static name: string
}
export abstract class DomDocumentFragmentIface {
    static name: string
}
export abstract class DomDocumentTypeIface {
    /* Fields of GXml.DomDocumentTypeIface */
    get_name: () => string
    get_public_id: () => string
    get_system_id: () => string
    static name: string
}
export abstract class DomHtmlDocumentIface {
    /* Fields of GXml.DomHtmlDocumentIface */
    read_from_string: (str: string) => void
    read_from_string_tolerant: (str: string) => void
    to_html: () => string
    static name: string
}
export abstract class DomElementIface {
    /* Fields of GXml.DomElementIface */
    get_attribute: (name: string) => string | null
    get_attribute_ns: (namespace: string | null, local_name: string) => string | null
    set_attribute: (name: string, value: string) => void
    set_attribute_ns: (namespace: string | null, name: string, value: string) => void
    remove_attribute: (name: string) => void
    remove_attribute_ns: (namespace: string | null, local_name: string) => void
    has_attribute: (name: string) => boolean
    has_attribute_ns: (namespace: string | null, local_name: string) => boolean
    get_elements_by_tag_name: (local_name: string) => DomHTMLCollection
    get_elements_by_tag_name_ns: (namespace: string | null, local_name: string) => DomHTMLCollection
    get_elements_by_class_name: (class_names: string) => DomHTMLCollection
    matches: (selectors: string) => boolean
    read_from_uri: (uri: string) => void
    read_from_uri_async: (uri: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_uri_finish: (_res_: Gio.AsyncResult) => void
    read_from_file: (f: Gio.File, cancellable?: Gio.Cancellable | null) => void
    read_from_file_async: (f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_file_finish: (_res_: Gio.AsyncResult) => void
    read_from_stream: (istream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    read_from_stream_async: (istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_stream_finish: (_res_: Gio.AsyncResult) => void
    read_from_string: (str: string, cancellable?: Gio.Cancellable | null) => void
    read_from_string_async: (str: string, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_from_string_finish: (_res_: Gio.AsyncResult) => void
    write_string: (cancellable?: Gio.Cancellable | null) => string
    write_string_async: (cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_string_finish: (_res_: Gio.AsyncResult) => string
    write_file: (f: Gio.File, cancellable?: Gio.Cancellable | null) => void
    write_file_async: (f: Gio.File, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_file_finish: (_res_: Gio.AsyncResult) => void
    write_stream: (stream: Gio.OutputStream) => void
    write_stream_async: (stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_stream_finish: (_res_: Gio.AsyncResult) => void
    create_stream: () => Gio.InputStream
    create_stream_async: (cancellable?: Gio.Cancellable | null, _callback_?: Gio.AsyncReadyCallback | null) => void
    create_stream_finish: (_res_: Gio.AsyncResult) => Gio.InputStream
    get_namespace_uri: () => string | null
    get_prefix: () => string | null
    get_local_name: () => string
    get_tag_name: () => string
    get_id: () => string | null
    set_id: (value?: string | null) => void
    get_class_name: () => string | null
    set_class_name: (value?: string | null) => void
    get_class_list: () => DomTokenList
    get_attributes: () => DomNamedNodeMap
    static name: string
}
export abstract class DomEventTargetIface {
    /* Fields of GXml.DomEventTargetIface */
    add_event_listener: (type: string, callback: DomEventListener | null, capture: boolean) => void
    remove_event_listener: (type: string, callback: DomEventListener | null, capture: boolean) => void
    dispatch_event: (event: DomEvent) => boolean
    static name: string
}
export abstract class DomEventListenerIface {
    /* Fields of GXml.DomEventListenerIface */
    handle_event: (event: DomEvent) => void
    static name: string
}
export abstract class DomEventIface {
    /* Fields of GXml.DomEventIface */
    stop_propagation: () => void
    stop_immediate_propagation: () => void
    prevent_default: () => void
    init_event: (type: string, bubbles: boolean, cancelable: boolean) => void
    get_etype: () => string
    get_event_target: () => DomEventTarget | null
    get_current_target: () => DomEventTarget | null
    get_bubbles: () => boolean
    get_cancelable: () => boolean
    get_is_trusted: () => boolean
    get_time_stamp: () => DomTimeStamp
    get_default_prevented: () => boolean
    get_event_phase: () => DomEventPhase
    static name: string
}
export abstract class DomCustomEventIface {
    /* Fields of GXml.DomCustomEventIface */
    init_custom_event: (type: string, bubbles: boolean, cancelable: boolean, detail: any) => void
    get_detail: () => /* result */ any
    static name: string
}
export abstract class DomMutationObserverIface {
    /* Fields of GXml.DomMutationObserverIface */
    observe: (target: Node, options: DomMutationObserverInit) => void
    disconnect: () => void
    take_records: () => Gee.List
    static name: string
}
export abstract class DomMutationRecordIface {
    /* Fields of GXml.DomMutationRecordIface */
    get_mtype: () => string
    get_target: () => DomNode
    get_added_nodes: () => DomNodeList
    set_added_nodes: (value: DomNodeList) => void
    get_removed_nodes: () => DomNodeList
    set_removed_nodes: (value: DomNodeList) => void
    get_previous_sibling: () => DomNode | null
    get_next_sibling: () => DomNode | null
    get_attribute_name: () => string | null
    get_attribute_namespace: () => string | null
    get_old_value: () => string | null
    static name: string
}
export abstract class DomNodeIface {
    /* Fields of GXml.DomNodeIface */
    has_child_nodes: () => boolean
    normalize: () => void
    is_equal_node: (node?: DomNode | null) => boolean
    compare_document_position: (other: DomNode) => DomNodeDocumentPosition
    contains: (other?: DomNode | null) => boolean
    lookup_prefix: (nspace?: string | null) => string | null
    lookup_namespace_uri: (prefix?: string | null) => string | null
    is_default_namespace: (nspace?: string | null) => boolean
    insert_before: (node: DomNode, child?: DomNode | null) => DomNode
    append_child: (node: DomNode) => DomNode
    replace_child: (node: DomNode, child: DomNode) => DomNode
    remove_child: (child: DomNode) => DomNode
    get_node_type: () => DomNodeNodeType
    get_node_name: () => string
    get_base_uri: () => string | null
    get_owner_document: () => DomDocument | null
    set_owner_document: (value?: DomDocument | null) => void
    get_parent_node: () => DomNode | null
    get_parent_element: () => DomElement | null
    get_child_nodes: () => DomNodeList
    get_first_child: () => DomNode | null
    get_last_child: () => DomNode | null
    get_previous_sibling: () => DomNode | null
    get_next_sibling: () => DomNode | null
    get_node_value: () => string | null
    set_node_value: (value?: string | null) => void
    get_text_content: () => string | null
    set_text_content: (value?: string | null) => void
    static name: string
}
export abstract class DomRangeIface {
    /* Fields of GXml.DomRangeIface */
    set_start: (node: DomNode, offset: number) => void
    set_end: (node: DomNode, offset: number) => void
    set_start_before: (node: DomNode) => void
    set_start_after: (node: DomNode) => void
    set_end_before: (node: DomNode) => void
    set_end_after: (node: DomNode) => void
    collapse: (to_start: boolean) => void
    select_node: (node: DomNode) => void
    select_node_contents: (node: DomNode) => void
    compare_boundary_points: (how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    delete_contents: () => void
    extract_contents: () => DomDocumentFragment | null
    clone_contents: () => DomDocumentFragment | null
    insert_node: (node: DomNode) => void
    surround_contents: (newParent: DomNode) => void
    clone_range: () => DomRange
    detach: () => void
    is_point_in_range: (node: DomNode, offset: number) => boolean
    compare_point: (node: DomNode, offset: number) => number
    intersects_node: (node: DomNode) => boolean
    to_string: () => string
    get_start_container: () => DomNode
    get_start_offset: () => number
    get_end_container: () => DomNode
    get_end_offset: () => number
    get_collapsed: () => boolean
    get_common_ancestor_container: () => DomNode
    static name: string
}
export abstract class IXsdSchemaIface {
    /* Fields of GXml.IXsdSchemaIface */
    get_element_definitions: () => IXsdListElements
    set_element_definitions: (value: IXsdListElements) => void
    get_simple_type_definitions: () => IXsdListSimpleTypes
    set_simple_type_definitions: (value: IXsdListSimpleTypes) => void
    get_complex_type_definitions: () => IXsdListComplexTypes
    set_complex_type_definitions: (value: IXsdListComplexTypes) => void
    static name: string
}
export abstract class IXsdBaseTypeIface {
    /* Fields of GXml.IXsdBaseTypeIface */
    get_anotation: () => IXsdAnnotation
    set_anotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleTypeIface {
    /* Fields of GXml.IXsdSimpleTypeIface */
    get_final: () => string
    set_final: (value: string) => void
    get_id: () => string
    set_id: (value: string) => void
    get_name: () => string
    set_name: (value: string) => void
    get_annotation: () => IXsdAnnotation
    set_annotation: (value: IXsdAnnotation) => void
    get_list: () => IXsdTypeList
    set_list: (value: IXsdTypeList) => void
    get_union: () => IXsdTypeUnion
    set_union: (value: IXsdTypeUnion) => void
    get_restriction: () => IXsdTypeRestriction
    set_restriction: (value: IXsdTypeRestriction) => void
    static name: string
}
export abstract class IXsdTypeDefIface {
    static name: string
}
export abstract class IXsdTypeRestrictionIface {
    /* Fields of GXml.IXsdTypeRestrictionIface */
    get_base: () => string
    set_base: (value: string) => void
    get_id: () => string
    set_id: (value: string) => void
    get_simple_type: () => IXsdSimpleType
    set_simple_type: (value: IXsdSimpleType) => void
    get_enumerations: () => IXsdListTypeRestrictionEnumerations
    set_enumerations: (value: IXsdListTypeRestrictionEnumerations) => void
    get_white_spaces: () => IXsdListTypeRestrictionWhiteSpaces
    set_white_spaces: (value: IXsdListTypeRestrictionWhiteSpaces) => void
    static name: string
}
export abstract class IXsdTypeListIface {
    static name: string
}
export abstract class IXsdTypeUnionIface {
    static name: string
}
export abstract class IXsdTypeRestrictionDefIface {
    /* Fields of GXml.IXsdTypeRestrictionDefIface */
    get_annotation: () => IXsdAnnotation
    set_annotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdTypeRestrictionMinExclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMinInclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxExclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxInclusiveIface {
    static name: string
}
export abstract class IXsdTypeRestrictionTotalDigitsIface {
    static name: string
}
export abstract class IXsdTypeRestrictionFractionDigitsIface {
    static name: string
}
export abstract class IXsdTypeRestrictionLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMinLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionMaxLengthIface {
    static name: string
}
export abstract class IXsdTypeRestrictionEnumerationIface {
    /* Fields of GXml.IXsdTypeRestrictionEnumerationIface */
    get_id: () => string
    set_id: (value: string) => void
    get_value: () => string
    set_value: (value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionWhiteSpaceIface {
    /* Fields of GXml.IXsdTypeRestrictionWhiteSpaceIface */
    get_fixed: () => boolean
    set_fixed: (value: boolean) => void
    get_id: () => string
    set_id: (value: string) => void
    get_value: () => string
    set_value: (value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionPatternIface {
    static name: string
}
export abstract class IXsdTypeRestrictionAssertionIface {
    static name: string
}
export abstract class IXsdTypeRestrictionExplicitTimezoneIface {
    static name: string
}
export abstract class IXsdComplexTypeIface {
    /* Fields of GXml.IXsdComplexTypeIface */
    get_abstract: () => boolean
    set_abstract: (value: boolean) => void
    get_block: () => string
    set_block: (value: string) => void
    get_final: () => string
    set_final: (value: string) => void
    get_mixed: () => boolean
    set_mixed: (value: boolean) => void
    get_name: () => string
    set_name: (value: string) => void
    get_default_attributes_apply: () => boolean
    set_default_attributes_apply: (value: boolean) => void
    get_content_type: () => IXsdBaseContent
    set_content_type: (value: IXsdBaseContent) => void
    get_type_attributes: () => IXsdListAttributes
    get_group_attributes: () => IXsdListAttributesGroup
    static name: string
}
export abstract class IXsdExtensionIface {
    /* Fields of GXml.IXsdExtensionIface */
    get_base: () => string
    set_base: (value: string) => void
    static name: string
}
export abstract class IXsdElementIface {
    /* Fields of GXml.IXsdElementIface */
    get_abstract: () => boolean
    set_abstract: (value: boolean) => void
    get_block: () => string
    set_block: (value: string) => void
    get_default: () => string
    set_default: (value: string) => void
    get_final: () => string
    set_final: (value: string) => void
    get_fixed: () => string
    set_fixed: (value: string) => void
    get_form: () => string
    set_form: (value: string) => void
    get_id: () => string | null
    set_id: (value?: string | null) => void
    get_maxOccurs: () => string
    set_maxOccurs: (value: string) => void
    get_minOccurs: () => string
    set_minOccurs: (value: string) => void
    get_name: () => string
    set_name: (value: string) => void
    get_nillable: () => boolean
    set_nillable: (value: boolean) => void
    get_ref: () => string
    set_ref: (value: string) => void
    get_substitution_group: () => DomTokenList
    set_substitution_group: (value: DomTokenList) => void
    get_target_namespace: () => string
    set_target_namespace: (value: string) => void
    get_object_type: () => string
    set_object_type: (value: string) => void
    get_anotation: () => IXsdAnnotation
    set_anotation: (value: IXsdAnnotation) => void
    get_simple_type: () => IXsdSimpleType
    set_simple_type: (value: IXsdSimpleType) => void
    get_complex_type: () => IXsdComplexType
    set_complex_type: (value: IXsdComplexType) => void
    static name: string
}
export abstract class IXsdAnnotationIface {
    static name: string
}
export abstract class IXsdBaseContentIface {
    /* Fields of GXml.IXsdBaseContentIface */
    get_anotation: () => IXsdAnnotation
    set_anotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleContentIface {
    static name: string
}
export abstract class IXsdComplexContentIface {
    static name: string
}
export abstract class IXsdOpenContentIface {
    static name: string
}
export abstract class IXsdBaseAttributeIface {
    /* Fields of GXml.IXsdBaseAttributeIface */
    get_anotation: () => IXsdAnnotation
    set_anotation: (value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdAttributeIface {
    static name: string
}
export abstract class IXsdAttributeGroupIface {
    static name: string
}
export abstract class IXsdListIface {
    /* Fields of GXml.IXsdListIface */
    get_item: (index: number) => DomElement | null
    append: (element: DomElement) => void
    remove: (index: number) => void
    index_of: (element: DomElement) => number
    get_element: () => DomElement
    set_element: (value: DomElement) => void
    get_items_type: () => GObject.Type
    set_items_type: (value: GObject.Type) => void
    get_items_name: () => GObject.Type
    set_items_name: (value: GObject.Type) => void
    get_length: () => number
    static name: string
}
export abstract class IXsdListElementsIface {
    static name: string
}
export abstract class IXsdListSimpleTypesIface {
    static name: string
}
export abstract class IXsdListComplexTypesIface {
    static name: string
}
export abstract class IXsdListAttributesIface {
    static name: string
}
export abstract class IXsdListAttributesGroupIface {
    static name: string
}
export abstract class IXsdListTypeRestrictionEnumerationsIface {
    static name: string
}
export abstract class IXsdListTypeRestrictionWhiteSpacesIface {
    static name: string
}
export abstract class ObjectIface {
    /* Fields of GXml.ObjectIface */
    get_properties_list: () => GObject.ParamSpec[]
    find_property_name: (nick: string) => GObject.ParamSpec | null
    find_object_property_name: (pname: string) => GObject.ParamSpec | null
    get_property_element_list: () => GObject.ParamSpec[]
    get_property_string: (prop: GObject.ParamSpec) => string | null
    get_attribute: (name: string) => string | null
    find_property: (name: string) => Property | null
    set_attribute: (name: string, val: string) => boolean
    get_child: (name: string) => DomElement | null
    find_elements: (name: string) => DomElementList
    remove_attribute: (name: string) => boolean
    set_instance_property: (name: string) => boolean
    clean_property_elements: (name: string) => void
    static name: string
}
export abstract class ParserIface {
    /* Fields of GXml.ParserIface */
    write_file: (file: Gio.File) => void
    write_file_async: (file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_file_finish: (_res_: Gio.AsyncResult) => void
    write_string: () => string
    write_string_async: (_callback_?: Gio.AsyncReadyCallback | null) => void
    write_string_finish: (_res_: Gio.AsyncResult) => string
    write_stream: (stream: Gio.OutputStream) => void
    write_stream_async: (stream: Gio.OutputStream, _callback_?: Gio.AsyncReadyCallback | null) => void
    write_stream_finish: (_res_: Gio.AsyncResult) => void
    read_file: (file: Gio.File) => void
    read_file_async: (file: Gio.File, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_file_finish: (_res_: Gio.AsyncResult) => void
    read_stream: (stream: Gio.InputStream) => void
    read_stream_async: (stream: Gio.InputStream, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_stream_finish: (_res_: Gio.AsyncResult) => void
    read_string: (str: string) => void
    read_string_async: (str: string, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_string_finish: (_res_: Gio.AsyncResult) => void
    create_stream: () => Gio.InputStream
    create_stream_async: (_callback_?: Gio.AsyncReadyCallback | null) => void
    create_stream_finish: (_res_: Gio.AsyncResult) => Gio.InputStream
    read_child_nodes: (parent: DomNode) => void
    read_child_nodes_async: (parent: DomNode, _callback_?: Gio.AsyncReadyCallback | null) => void
    read_child_nodes_finish: (_res_: Gio.AsyncResult) => void
    read_child_node: (parent: DomNode) => boolean
    read_child_element: (parent: DomNode) => boolean
    read_element_property: (parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    add_element_collection: (parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    read_child_nodes_stream: (istream: Gio.InputStream) => void
    read_child_nodes_string: (str: string) => void
    read_unparsed: () => string
    move_next_node: () => boolean
    current_is_empty_element: () => boolean
    current_is_element: () => boolean
    current_is_document: () => boolean
    current_node_name: () => string
    create_element: (parent: DomNode) => DomElement | null
    read_element: (element: DomElement) => void
    get_backup: () => boolean
    set_backup: (value: boolean) => void
    get_indent: () => boolean
    set_indent: (value: boolean) => void
    get_cancellable: () => Gio.Cancellable | null
    set_cancellable: (value?: Gio.Cancellable | null) => void
    get_node: () => DomNode
    get_types: () => GLib.HashTable
    static name: string
}
export abstract class PropertyIface {
    /* Fields of GXml.PropertyIface */
    validate_value: (val?: string | null) => boolean
    get_value: () => string | null
    set_value: (value?: string | null) => void
    static name: string
}
export abstract class XPathContextIface {
    /* Fields of GXml.XPathContextIface */
    evaluate: (expression: string, resolver?: Gee.Map | null) => XPathObject
    static name: string
}
export abstract class XPathObjectIface {
    /* Fields of GXml.XPathObjectIface */
    get_object_type: () => XPathObjectType
    get_boolean_value: () => boolean
    get_string_value: () => string
    get_number_value: () => number
    get_nodeset: () => DomHTMLCollection
    static name: string
}