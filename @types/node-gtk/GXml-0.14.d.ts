/**
 * GXml-0.14
 */

/// <reference types="node" />
import type { libxml2 } from './libxml2-2.0';
import type { GObject } from './GObject-2.0';
import type { GLib } from './GLib-2.0';
import type { Gio } from './Gio-2.0';
import type { Gee } from './Gee-0.8';

declare namespace GXml {

export enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
export enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
export enum DocumentError {
    INVALID_DOCUMENT_ERROR,
    INVALID_FILE,
}
export enum SerializableError {
    UNSUPPORTED_TYPE_ERROR,
    STR_TO_VALUE_ERROR,
}
export enum SerializableEnumError {
    INVALID_VALUE_ERROR,
    PARSE_ERROR,
}
export enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
export enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
export enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
export enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
export enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
export enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
export enum TDocumentReadType {
    NEXT,
    CONTINUE,
    STOP,
}
export enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
export enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
export enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
export enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
export enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
export interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
export interface Attribute_ConstructProps extends GObject.Object_ConstructProps {
    namespace?: Namespace
}
export class Attribute {
    /* Properties of GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Attribute */
    vfuncGetNamespace(): Namespace | null
    vfuncSetNamespace(value?: Namespace | null): void
    vfuncGetPrefix(): string | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Attribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Attribute_ConstructProps)
    _init (config?: Attribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Comment_ConstructProps extends GObject.Object_ConstructProps {
    str?: string
}
export class Comment {
    /* Properties of GXml.Comment */
    str: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Comment */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: Comment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Comment_ConstructProps)
    _init (config?: Comment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface CDATA_ConstructProps extends GObject.Object_ConstructProps {
}
export class CDATA {
    /* Properties of GXml.CDATA */
    readonly str: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.CDATA */
    getStr(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.CDATA */
    vfuncGetStr(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: CDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CDATA, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: CDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: CDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CDATA_ConstructProps)
    _init (config?: CDATA_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Character_ConstructProps extends GObject.Object_ConstructProps {
    str?: string
}
export class Character {
    /* Properties of GXml.Character */
    str: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Character */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Character */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Character, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Character, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: Character, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: Character, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Character_ConstructProps)
    _init (config?: Character_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Document_ConstructProps extends GObject.Object_ConstructProps {
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
}
export class Document {
    /* Properties of GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Document */
    vfuncCreateElement(name: string): Node
    vfuncCreateText(text: string): Node
    vfuncCreateComment(text: string): Node
    vfuncCreateCdata(text: string): Node
    vfuncCreatePi(target: string, data: string): Node
    vfuncSave(cancellable?: Gio.Cancellable | null): boolean
    vfuncSaveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNsTop(): boolean
    vfuncSetNsTop(value: boolean): void
    vfuncGetPrefixDefaultNs(): boolean
    vfuncSetPrefixDefaultNs(value: boolean): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetRoot(): Node
    vfuncGetFile(): Gio.File
    vfuncSetFile(value: Gio.File): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: Document, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Document_ConstructProps)
    _init (config?: Document_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static $gtype: GObject.Type
}
export interface DocumentType_ConstructProps extends GObject.Object_ConstructProps {
}
export class DocumentType {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DocumentType_ConstructProps)
    _init (config?: DocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Element_ConstructProps extends GObject.Object_ConstructProps {
    content?: string
}
export class Element {
    /* Properties of GXml.Element */
    readonly tagName: string
    content: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Element */
    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getTagName(): string
    getContent(): string
    setContent(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Element */
    vfuncNormalize(): void
    vfuncSetAttr(name: string, value: string): void
    vfuncGetAttr(name: string): Node | null
    vfuncRemoveAttr(name: string): void
    vfuncRemoveNsAttr(name: string, uri: string): void
    vfuncSetNsAttr(ns: string, name: string, value: string): void
    vfuncGetNsAttr(name: string, uri: string): Node | null
    vfuncGetTagName(): string
    vfuncGetContent(): string
    vfuncSetContent(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Element, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Element_ConstructProps)
    _init (config?: Element_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Namespace_ConstructProps extends GObject.Object_ConstructProps {
}
export class Namespace {
    /* Properties of GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Namespace */
    vfuncGetUri(): string | null
    vfuncGetPrefix(): string | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Namespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Namespace_ConstructProps)
    _init (config?: Namespace_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Node_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class Node {
    /* Properties of GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Node */
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncToString(): string
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetAttrs(): Gee.Map
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetTypeNode(): NodeType
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Node, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Node_ConstructProps)
    _init (config?: Node_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface Notation_ConstructProps extends GObject.Object_ConstructProps {
}
export class Notation {
    /* Properties of GXml.Notation */
    readonly publicId: string
    readonly externalId: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Notation */
    getPublicId(): string | null
    getExternalId(): string | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Notation */
    vfuncGetPublicId(): string | null
    vfuncGetExternalId(): string | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::external-id", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::external-id", callback: (($obj: Notation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Notation_ConstructProps)
    _init (config?: Notation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Entity_ConstructProps extends GObject.Object_ConstructProps {
}
export class Entity {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Entity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Entity, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Entity_ConstructProps)
    _init (config?: Entity_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ProcessingInstruction_ConstructProps extends GObject.Object_ConstructProps {
    data?: string
}
export class ProcessingInstruction {
    /* Properties of GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.ProcessingInstruction */
    vfuncGetTarget(): string
    vfuncGetData(): string
    vfuncSetData(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: ProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ProcessingInstruction_ConstructProps)
    _init (config?: ProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Text_ConstructProps extends GObject.Object_ConstructProps {
    str?: string
}
export class Text {
    /* Properties of GXml.Text */
    str: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Text */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Text_ConstructProps)
    _init (config?: Text_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Serializable_ConstructProps extends GObject.Object_ConstructProps {
    serializedXmlNodeValue?: string
}
export class Serializable {
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    nodeName(): string
    propertyUseNick(): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Serializable */
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncNodeName(): string
    vfuncPropertyUseNick(): boolean
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: Serializable, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: Serializable, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: Serializable, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: Serializable, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: Serializable, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: Serializable, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: Serializable, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: Serializable, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: Serializable, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Serializable_ConstructProps)
    _init (config?: Serializable_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableProperty_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableProperty {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableProperty */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableProperty, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableProperty_ConstructProps)
    _init (config?: SerializableProperty_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SerializableMapKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableMapKey {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableMapKey */
    getMapKey(): object | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableMapKey */
    vfuncGetMapKey(): object | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableMapKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableMapKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableMapKey_ConstructProps)
    _init (config?: SerializableMapKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SerializableMapDualKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableMapDualKey {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableMapDualKey */
    getMapPrimaryKey(): object | null
    getMapSecondaryKey(): object | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableMapDualKey */
    vfuncGetMapPrimaryKey(): object | null
    vfuncGetMapSecondaryKey(): object | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableMapDualKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableMapDualKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableMapDualKey_ConstructProps)
    _init (config?: SerializableMapDualKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SerializableCollection_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableCollection {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableCollection */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    isCollection(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableCollection */
    vfuncDeserializeProceed(): boolean
    vfuncDeserialized(): boolean
    vfuncDeserializeNode(node: Node): boolean
    vfuncDeserializeChildren(): boolean
    vfuncIsCollection(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableCollection_ConstructProps)
    _init (config?: SerializableCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomAttr_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class DomAttr {
    /* Properties of GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly name: string
    value: string
    readonly specified: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomAttr */
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetSpecified(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: (($obj: DomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomAttr_ConstructProps)
    _init (config?: DomAttr_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCharacterData_ConstructProps extends GObject.Object_ConstructProps {
    data?: string
}
export class DomCharacterData {
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomCharacterData */
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCharacterData_ConstructProps)
    _init (config?: DomCharacterData_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomText_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomText {
    /* Properties of GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Virtual methods of GXml.DomText */
    vfuncSplitText(offset: number): DomText
    vfuncGetWholeText(): string
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.DomCharacterData */
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomText_ConstructProps)
    _init (config?: DomText_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomProcessingInstruction_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomProcessingInstruction {
    /* Properties of GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Virtual methods of GXml.DomProcessingInstruction */
    vfuncGetTarget(): string
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.DomCharacterData */
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomProcessingInstruction_ConstructProps)
    _init (config?: DomProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomComment_ConstructProps extends DomCharacterData_ConstructProps {
}
export class DomComment {
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Virtual methods of GXml.DomComment */
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.DomCharacterData */
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomComment_ConstructProps)
    _init (config?: DomComment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonElementParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonElementParentNode {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNonElementParentNode */
    vfuncGetElementById(elementId: string): DomElement | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonElementParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNonElementParentNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonElementParentNode_ConstructProps)
    _init (config?: DomNonElementParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomParentNode {
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomParentNode */
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: DomParentNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomParentNode_ConstructProps)
    _init (config?: DomParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNonDocumentTypeChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNonDocumentTypeChildNode {
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNonDocumentTypeChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: DomNonDocumentTypeChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonDocumentTypeChildNode_ConstructProps)
    _init (config?: DomNonDocumentTypeChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomChildNode {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomChildNode */
    vfuncRemove(): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomChildNode_ConstructProps)
    _init (config?: DomChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNodeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeList {
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNodeList */
    vfuncItem(index: number): DomNode | null
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeList_ConstructProps)
    _init (config?: DomNodeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomHTMLCollection_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomHTMLCollection {
    /* Properties of GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomHTMLCollection */
    vfuncGetElement(index: number): DomElement | null
    vfuncToArray(): DomElement[]
    vfuncItem(index: number): DomElement | null
    vfuncNamedItem(name: string): DomElement | null
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomHTMLCollection_ConstructProps)
    _init (config?: DomHTMLCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export class DomNodeIterator {
    /* Properties of GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    /* Methods of GXml.DomNodeIterator */
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    /* Virtual methods of GXml.DomNodeIterator */
    vfuncNextNode(): DomNode | null
    vfuncPreviousNode(): DomNode | null
    vfuncDetach(): void
    vfuncGetRoot(): DomNode
    vfuncGetReferenceNode(): DomNode
    vfuncGetPointerBeforeReferenceNode(): boolean
    vfuncGetWhatToShow(): number
    vfuncGetFilter(): DomNodeFilter | null
    static name: string
}
export interface DomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTreeWalker {
    /* Properties of GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    readonly currentNode: DomNode
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomTreeWalker */
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    getRoot(): DomNode
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    getCurrentNode(): DomNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomTreeWalker */
    vfuncParentNode(): DomNode | null
    vfuncFirstChild(): DomNode | null
    vfuncLastChild(): DomNode | null
    vfuncPreviousSibling(): DomNode | null
    vfuncNextSibling(): DomNode | null
    vfuncPreviousNode(): DomNode | null
    vfuncNextNode(): DomNode | null
    vfuncGetRoot(): DomNode
    vfuncGetWhatToShow(): number
    vfuncGetFilter(): DomNodeFilter | null
    vfuncGetCurrentNode(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: DomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTreeWalker_ConstructProps)
    _init (config?: DomTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNamedNodeMap_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNamedNodeMap {
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNamedNodeMap */
    vfuncItem(index: number): DomNode | null
    vfuncGetNamedItem(name: string): DomNode | null
    vfuncSetNamedItem(node: DomNode): DomNode | null
    vfuncRemoveNamedItem(name: string): DomNode | null
    vfuncRemoveNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncGetNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncSetNamedItemNs(node: DomNode): DomNode | null
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomNamedNodeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNamedNodeMap_ConstructProps)
    _init (config?: DomNamedNodeMap_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomTokenList_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomTokenList {
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomTokenList */
    vfuncItem(index: number): string | null
    vfuncContains(token: string): boolean
    vfuncAdd(tokens: string[]): void
    vfuncRemove(tokens: string[]): void
    vfuncToggle(token: string, force: boolean, auto: boolean): boolean
    vfuncToString(): string
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTokenList_ConstructProps)
    _init (config?: DomTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomSettableTokenList_ConstructProps extends DomTokenList_ConstructProps {
    value?: string
}
export class DomSettableTokenList {
    /* Properties of GXml.DomSettableTokenList */
    value: string
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomSettableTokenList */
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncItem(index: number): string | null
    vfuncContains(token: string): boolean
    vfuncAdd(tokens: string[]): void
    vfuncRemove(tokens: string[]): void
    vfuncToggle(token: string, force: boolean, auto: boolean): boolean
    vfuncToString(): string
    vfuncGetLength(): number
    /* Virtual methods of GXml.DomTokenList */
    vfuncItem(index: number): string | null
    vfuncContains(token: string): boolean
    vfuncAdd(tokens: string[]): void
    vfuncRemove(tokens: string[]): void
    vfuncToggle(token: string, force: boolean, auto: boolean): boolean
    vfuncToString(): string
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomSettableTokenList_ConstructProps)
    _init (config?: DomSettableTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocument {
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomDocument */
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateElementNs(namespace: string | null, qualifiedName: string): DomElement
    vfuncCreateDocumentFragment(): DomDocumentFragment
    vfuncCreateTextNode(data: string): DomText
    vfuncCreateComment(data: string): DomComment
    vfuncCreateProcessingInstruction(target: string, data: string): DomProcessingInstruction
    vfuncImportNode(node: DomNode, deep: boolean): DomNode
    vfuncAdoptNode(node: DomNode): DomNode
    vfuncCreateEvent(interface: string): DomEvent
    vfuncCreateRange(): DomRange
    vfuncCreateNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    vfuncCreateTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    vfuncGetImplementation(): DomImplementation
    vfuncGetUrl(): string
    vfuncGetDocumentUri(): string
    vfuncGetOrigin(): string
    vfuncGetCompatMode(): string
    vfuncGetCharacterSet(): string
    vfuncGetContentType(): string
    vfuncGetDoctype(): DomDocumentType | null
    vfuncGetDocumentElement(): DomElement | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: DomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocument_ConstructProps)
    _init (config?: DomDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomXMLDocument_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomXMLDocument {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomXMLDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomXMLDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomXMLDocument_ConstructProps)
    _init (config?: DomXMLDocument_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomImplementation {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomImplementation */
    vfuncCreateDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    vfuncCreateDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    vfuncCreateHtmlDocument(title: string): Document
    vfuncHasFeature(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomImplementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomImplementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomImplementation_ConstructProps)
    _init (config?: DomImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentFragment_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentFragment {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentFragment_ConstructProps)
    _init (config?: DomDocumentFragment_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomDocumentType_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomDocumentType {
    /* Properties of GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomDocumentType */
    vfuncGetName(): string
    vfuncGetPublicId(): string
    vfuncGetSystemId(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: DomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentType_ConstructProps)
    _init (config?: DomDocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomElement_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    className?: string
}
export class DomElement {
    /* Properties of GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomElement */
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElement_ConstructProps)
    _init (config?: DomElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventTarget_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventTarget {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEventTarget */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventTarget, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventTarget, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventTarget_ConstructProps)
    _init (config?: DomEventTarget_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEventListener_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEventListener {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomEventListener */
    handleEvent(event: DomEvent): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEventListener */
    vfuncHandleEvent(event: DomEvent): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventListener, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventListener, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventListener_ConstructProps)
    _init (config?: DomEventListener_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomEvent {
    /* Properties of GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomEvent */
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomEvent */
    vfuncStopPropagation(): void
    vfuncStopImmediatePropagation(): void
    vfuncPreventDefault(): void
    vfuncInitEvent(type: string, bubbles: boolean, cancelable: boolean): void
    vfuncGetEtype(): string
    vfuncGetEventTarget(): DomEventTarget | null
    vfuncGetCurrentTarget(): DomEventTarget | null
    vfuncGetBubbles(): boolean
    vfuncGetCancelable(): boolean
    vfuncGetIsTrusted(): boolean
    vfuncGetTimeStamp(): DomTimeStamp
    vfuncGetDefaultPrevented(): boolean
    vfuncGetEventPhase(): DomEventPhase
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: DomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEvent_ConstructProps)
    _init (config?: DomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomCustomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomCustomEvent {
    /* Properties of GXml.DomCustomEvent */
    readonly detail: any
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomCustomEvent */
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any): void
    getDetail(): any
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomCustomEvent */
    vfuncInitCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any): void
    vfuncGetDetail(): any
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEvent_ConstructProps)
    _init (config?: DomCustomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationObserver_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomMutationObserver {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomMutationObserver */
    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    takeRecords(): Gee.List
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomMutationObserver */
    vfuncObserve(target: Node, options: DomMutationObserverInit): void
    vfuncDisconnect(): void
    vfuncTakeRecords(): Gee.List
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationObserver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserver_ConstructProps)
    _init (config?: DomMutationObserver_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomMutationRecord_ConstructProps extends GObject.Object_ConstructProps {
    addedNodes?: DomNodeList
    removedNodes?: DomNodeList
}
export class DomMutationRecord {
    /* Properties of GXml.DomMutationRecord */
    readonly mtype: string
    readonly target: DomNode
    addedNodes: DomNodeList
    removedNodes: DomNodeList
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    readonly attributeName: string
    readonly attributeNamespace: string
    readonly oldValue: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomMutationRecord */
    getMtype(): string
    getTarget(): DomNode
    getAddedNodes(): DomNodeList
    setAddedNodes(value: DomNodeList): void
    getRemovedNodes(): DomNodeList
    setRemovedNodes(value: DomNodeList): void
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getAttributeName(): string | null
    getAttributeNamespace(): string | null
    getOldValue(): string | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomMutationRecord */
    vfuncGetMtype(): string
    vfuncGetTarget(): DomNode
    vfuncGetAddedNodes(): DomNodeList
    vfuncSetAddedNodes(value: DomNodeList): void
    vfuncGetRemovedNodes(): DomNodeList
    vfuncSetRemovedNodes(value: DomNodeList): void
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetAttributeName(): string | null
    vfuncGetAttributeNamespace(): string | null
    vfuncGetOldValue(): string | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtype", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::added-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removed-nodes", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-name", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-namespace", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::old-value", callback: (($obj: DomMutationRecord, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationRecord_ConstructProps)
    _init (config?: DomMutationRecord_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DomNode_ConstructProps extends GObject.Object_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class DomNode {
    /* Properties of GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomNode */
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: DomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNode_ConstructProps)
    _init (config?: DomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface DomRange_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomRange {
    /* Properties of GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomRange */
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.DomRange */
    vfuncSetStart(node: DomNode, offset: number): void
    vfuncSetEnd(node: DomNode, offset: number): void
    vfuncSetStartBefore(node: DomNode): void
    vfuncSetStartAfter(node: DomNode): void
    vfuncSetEndBefore(node: DomNode): void
    vfuncSetEndAfter(node: DomNode): void
    vfuncCollapse(toStart: boolean): void
    vfuncSelectNode(node: DomNode): void
    vfuncSelectNodeContents(node: DomNode): void
    vfuncCompareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    vfuncDeleteContents(): void
    vfuncExtractContents(): DomDocumentFragment | null
    vfuncCloneContents(): DomDocumentFragment | null
    vfuncInsertNode(node: DomNode): void
    vfuncSurroundContents(newParent: DomNode): void
    vfuncCloneRange(): DomRange
    vfuncDetach(): void
    vfuncIsPointInRange(node: DomNode, offset: number): boolean
    vfuncComparePoint(node: DomNode, offset: number): number
    vfuncIntersectsNode(node: DomNode): boolean
    vfuncToString(): string
    vfuncGetStartContainer(): DomNode
    vfuncGetStartOffset(): number
    vfuncGetEndContainer(): DomNode
    vfuncGetEndOffset(): number
    vfuncGetCollapsed(): boolean
    vfuncGetCommonAncestorContainer(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: DomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomRange_ConstructProps)
    _init (config?: DomRange_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathContext_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathContext {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.XPathContext */
    vfuncEvaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XPathContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathContext_ConstructProps)
    _init (config?: XPathContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface XPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class XPathObject {
    /* Properties of GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.XPathObject */
    vfuncGetObjectType(): XPathObjectType
    vfuncGetBooleanValue(): boolean
    vfuncGetStringValue(): string
    vfuncGetNumberValue(): number
    vfuncGetNodeset(): DomHTMLCollection
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: XPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathObject_ConstructProps)
    _init (config?: XPathObject_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GomObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class GomObject {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomObject */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(pname: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string): string | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomObject */
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetAttribute(name: string): string | null
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncRemoveAttribute(name: string): boolean
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomObject_ConstructProps)
    _init (config?: GomObject_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GomCollection_ConstructProps extends GObject.Object_ConstructProps {
    element?: GomElement
    itemsType?: GObject.Type
}
export class GomCollection {
    /* Properties of GXml.GomCollection */
    readonly nodesIndex: GLib.Queue
    element: GomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomCollection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): GomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomCollection */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomCollection_ConstructProps)
    _init (config?: GomCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElement_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElement {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.MappeableElement */
    getMapKey(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElement */
    vfuncGetMapKey(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElement_ConstructProps)
    _init (config?: MappeableElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementPairKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementPairKey {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.MappeableElementPairKey */
    getMapPrimaryKey(): string
    getMapSecondaryKey(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElementPairKey */
    vfuncGetMapPrimaryKey(): string
    vfuncGetMapSecondaryKey(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementPairKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElementPairKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementPairKey_ConstructProps)
    _init (config?: MappeableElementPairKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface MappeableElementThreeKey_ConstructProps extends GObject.Object_ConstructProps {
}
export class MappeableElementThreeKey {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.MappeableElementThreeKey */
    getMapPkey(): string
    getMapSkey(): string
    getMapTkey(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.MappeableElementThreeKey */
    vfuncGetMapPkey(): string
    vfuncGetMapSkey(): string
    vfuncGetMapTkey(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MappeableElementThreeKey, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MappeableElementThreeKey, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementThreeKey_ConstructProps)
    _init (config?: MappeableElementThreeKey_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GomProperty_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class GomProperty {
    /* Properties of GXml.GomProperty */
    value: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomProperty, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomProperty, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomProperty_ConstructProps)
    _init (config?: GomProperty_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Parser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
}
export class Parser {
    /* Properties of GXml.Parser */
    backup: boolean
    indent: boolean
    readonly node: DomNode
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.Parser */
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeString(): string
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readString(str: string, cancellable?: Gio.Cancellable | null): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getNode(): DomNode
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.Parser */
    vfuncWriteFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfuncWriteString(): string
    vfuncWriteStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfuncReadFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfuncReadStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfuncReadString(str: string, cancellable?: Gio.Cancellable | null): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNode(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: Parser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Parser_ConstructProps)
    _init (config?: Parser_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSchema_ConstructProps extends GObject.Object_ConstructProps {
    elementDefinitions?: IXsdListElements
    simpleTypeDefinitions?: IXsdListSimpleTypes
    complexTypeDefinitions?: IXsdListComplexTypes
}
export class IXsdSchema {
    /* Properties of GXml.IXsdSchema */
    elementDefinitions: IXsdListElements
    simpleTypeDefinitions: IXsdListSimpleTypes
    complexTypeDefinitions: IXsdListComplexTypes
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdSchema */
    getElementDefinitions(): IXsdListElements
    setElementDefinitions(value: IXsdListElements): void
    getSimpleTypeDefinitions(): IXsdListSimpleTypes
    setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    getComplexTypeDefinitions(): IXsdListComplexTypes
    setComplexTypeDefinitions(value: IXsdListComplexTypes): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdSchema */
    vfuncGetElementDefinitions(): IXsdListElements
    vfuncSetElementDefinitions(value: IXsdListElements): void
    vfuncGetSimpleTypeDefinitions(): IXsdListSimpleTypes
    vfuncSetSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    vfuncGetComplexTypeDefinitions(): IXsdListComplexTypes
    vfuncSetComplexTypeDefinitions(value: IXsdListComplexTypes): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: IXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSchema_ConstructProps)
    _init (config?: IXsdSchema_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseType_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseType {
    /* Properties of GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseType */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseType */
    vfuncGetAnotation(): IXsdAnnotation
    vfuncSetAnotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseType_ConstructProps)
    _init (config?: IXsdBaseType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleType_ConstructProps extends GObject.Object_ConstructProps {
    final?: string
    id?: string
    name?: string
    annotation?: IXsdAnnotation
    list?: IXsdTypeList
    union?: IXsdTypeUnion
    restriction?: IXsdTypeRestriction
}
export class IXsdSimpleType {
    /* Properties of GXml.IXsdSimpleType */
    final: string
    id: string
    name: string
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getId(): string
    setId(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    getList(): IXsdTypeList
    setList(value: IXsdTypeList): void
    getUnion(): IXsdTypeUnion
    setUnion(value: IXsdTypeUnion): void
    getRestriction(): IXsdTypeRestriction
    setRestriction(value: IXsdTypeRestriction): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdSimpleType */
    vfuncGetFinal(): string
    vfuncSetFinal(value: string): void
    vfuncGetId(): string
    vfuncSetId(value: string): void
    vfuncGetName(): string
    vfuncSetName(value: string): void
    vfuncGetAnnotation(): IXsdAnnotation
    vfuncSetAnnotation(value: IXsdAnnotation): void
    vfuncGetList(): IXsdTypeList
    vfuncSetList(value: IXsdTypeList): void
    vfuncGetUnion(): IXsdTypeUnion
    vfuncSetUnion(value: IXsdTypeUnion): void
    vfuncGetRestriction(): IXsdTypeRestriction
    vfuncSetRestriction(value: IXsdTypeRestriction): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: IXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleType_ConstructProps)
    _init (config?: IXsdSimpleType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeDef_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeDef {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeDef_ConstructProps)
    _init (config?: IXsdTypeDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestriction_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
    id?: string
    simpleType?: IXsdSimpleType
    enumerations?: IXsdListTypeRestrictionEnumerations
    whiteSpaces?: IXsdListTypeRestrictionWhiteSpaces
}
export class IXsdTypeRestriction {
    /* Properties of GXml.IXsdTypeRestriction */
    base: string
    id: string
    simpleType: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    whiteSpaces: IXsdListTypeRestrictionWhiteSpaces
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getId(): string
    setId(value: string): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getEnumerations(): IXsdListTypeRestrictionEnumerations
    setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestriction */
    vfuncGetBase(): string
    vfuncSetBase(value: string): void
    vfuncGetId(): string
    vfuncSetId(value: string): void
    vfuncGetSimpleType(): IXsdSimpleType
    vfuncSetSimpleType(value: IXsdSimpleType): void
    vfuncGetEnumerations(): IXsdListTypeRestrictionEnumerations
    vfuncSetEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    vfuncGetWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    vfuncSetWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: IXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestriction_ConstructProps)
    _init (config?: IXsdTypeRestriction_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeList_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeList {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeList_ConstructProps)
    _init (config?: IXsdTypeList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeUnion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeUnion {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeUnion_ConstructProps)
    _init (config?: IXsdTypeUnion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionDef_ConstructProps extends GObject.Object_ConstructProps {
    annotation?: IXsdAnnotation
}
export class IXsdTypeRestrictionDef {
    /* Properties of GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionDef */
    vfuncGetAnnotation(): IXsdAnnotation
    vfuncSetAnnotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: IXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionDef_ConstructProps)
    _init (config?: IXsdTypeRestrictionDef_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinExclusive {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinInclusive {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxExclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxExclusive {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxInclusive_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxInclusive {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionTotalDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionTotalDigits {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionTotalDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionFractionDigits_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionFractionDigits {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionFractionDigits_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionLength {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMinLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMinLength {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionMaxLength_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionMaxLength {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxLength_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionEnumeration_ConstructProps extends GObject.Object_ConstructProps {
    id?: string
    value?: string
}
export class IXsdTypeRestrictionEnumeration {
    /* Properties of GXml.IXsdTypeRestrictionEnumeration */
    id: string
    value: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionEnumeration */
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionEnumeration */
    vfuncGetId(): string
    vfuncSetId(value: string): void
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: IXsdTypeRestrictionEnumeration_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionWhiteSpace_ConstructProps extends GObject.Object_ConstructProps {
    fixed?: boolean
    id?: string
    value?: string
}
export class IXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml.IXsdTypeRestrictionWhiteSpace */
    fixed: boolean
    id: string
    value: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdTypeRestrictionWhiteSpace */
    getFixed(): boolean
    setFixed(value: boolean): void
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdTypeRestrictionWhiteSpace */
    vfuncGetFixed(): boolean
    vfuncSetFixed(value: boolean): void
    vfuncGetId(): string
    vfuncSetId(value: string): void
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: IXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionPattern_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionPattern {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: IXsdTypeRestrictionPattern_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionAssertion_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionAssertion {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: IXsdTypeRestrictionAssertion_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdTypeRestrictionExplicitTimezone_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdTypeRestrictionExplicitTimezone {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexType_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: IXsdBaseContent
}
export class IXsdComplexType {
    /* Properties of GXml.IXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: IXsdBaseContent
    readonly typeAttributes: IXsdListAttributes
    readonly groupAttributes: IXsdListAttributesGroup
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): IXsdBaseContent
    setContentType(value: IXsdBaseContent): void
    getTypeAttributes(): IXsdListAttributes
    getGroupAttributes(): IXsdListAttributesGroup
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdComplexType */
    vfuncGetAbstract(): boolean
    vfuncSetAbstract(value: boolean): void
    vfuncGetBlock(): string
    vfuncSetBlock(value: string): void
    vfuncGetFinal(): string
    vfuncSetFinal(value: string): void
    vfuncGetMixed(): boolean
    vfuncSetMixed(value: boolean): void
    vfuncGetName(): string
    vfuncSetName(value: string): void
    vfuncGetDefaultAttributesApply(): boolean
    vfuncSetDefaultAttributesApply(value: boolean): void
    vfuncGetContentType(): IXsdBaseContent
    vfuncSetContentType(value: IXsdBaseContent): void
    vfuncGetTypeAttributes(): IXsdListAttributes
    vfuncGetGroupAttributes(): IXsdListAttributesGroup
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: IXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexType_ConstructProps)
    _init (config?: IXsdComplexType_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdExtension_ConstructProps extends GObject.Object_ConstructProps {
    base?: string
}
export class IXsdExtension {
    /* Properties of GXml.IXsdExtension */
    base: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdExtension */
    vfuncGetBase(): string
    vfuncSetBase(value: string): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: IXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdExtension_ConstructProps)
    _init (config?: IXsdExtension_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdElement_ConstructProps extends GObject.Object_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    id?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: IXsdAnnotation
    simpleType?: IXsdSimpleType
    complexType?: IXsdComplexType
}
export class IXsdElement {
    /* Properties of GXml.IXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    id: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: IXsdAnnotation
    simpleType: IXsdSimpleType
    complexType: IXsdComplexType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getId(): string | null
    setId(value?: string | null): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getComplexType(): IXsdComplexType
    setComplexType(value: IXsdComplexType): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdElement */
    vfuncGetAbstract(): boolean
    vfuncSetAbstract(value: boolean): void
    vfuncGetBlock(): string
    vfuncSetBlock(value: string): void
    vfuncGetDefault(): string
    vfuncSetDefault(value: string): void
    vfuncGetFinal(): string
    vfuncSetFinal(value: string): void
    vfuncGetFixed(): string
    vfuncSetFixed(value: string): void
    vfuncGetForm(): string
    vfuncSetForm(value: string): void
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetMaxOccurs(): string
    vfuncSetMaxOccurs(value: string): void
    vfuncGetMinOccurs(): string
    vfuncSetMinOccurs(value: string): void
    vfuncGetName(): string
    vfuncSetName(value: string): void
    vfuncGetNillable(): boolean
    vfuncSetNillable(value: boolean): void
    vfuncGetRef(): string
    vfuncSetRef(value: string): void
    vfuncGetSubstitutionGroup(): DomTokenList
    vfuncSetSubstitutionGroup(value: DomTokenList): void
    vfuncGetTargetNamespace(): string
    vfuncSetTargetNamespace(value: string): void
    vfuncGetObjectType(): string
    vfuncSetObjectType(value: string): void
    vfuncGetAnotation(): IXsdAnnotation
    vfuncSetAnotation(value: IXsdAnnotation): void
    vfuncGetSimpleType(): IXsdSimpleType
    vfuncSetSimpleType(value: IXsdSimpleType): void
    vfuncGetComplexType(): IXsdComplexType
    vfuncSetComplexType(value: IXsdComplexType): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maxOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minOccurs", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: IXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdElement_ConstructProps)
    _init (config?: IXsdElement_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAnnotation_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAnnotation {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAnnotation_ConstructProps)
    _init (config?: IXsdAnnotation_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseContent_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseContent {
    /* Properties of GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseContent */
    vfuncGetAnotation(): IXsdAnnotation
    vfuncSetAnotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseContent_ConstructProps)
    _init (config?: IXsdBaseContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdSimpleContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdSimpleContent {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleContent_ConstructProps)
    _init (config?: IXsdSimpleContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdComplexContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdComplexContent {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexContent_ConstructProps)
    _init (config?: IXsdComplexContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdOpenContent_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdOpenContent {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdOpenContent_ConstructProps)
    _init (config?: IXsdOpenContent_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdBaseAttribute_ConstructProps extends GObject.Object_ConstructProps {
    anotation?: IXsdAnnotation
}
export class IXsdBaseAttribute {
    /* Properties of GXml.IXsdBaseAttribute */
    anotation: IXsdAnnotation
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdBaseAttribute */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdBaseAttribute */
    vfuncGetAnotation(): IXsdAnnotation
    vfuncSetAnotation(value: IXsdAnnotation): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: IXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseAttribute_ConstructProps)
    _init (config?: IXsdBaseAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttribute_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttribute {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttribute_ConstructProps)
    _init (config?: IXsdAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdAttributeGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdAttributeGroup {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttributeGroup_ConstructProps)
    _init (config?: IXsdAttributeGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdList_ConstructProps extends GObject.Object_ConstructProps {
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
export class IXsdList {
    /* Properties of GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.IXsdList */
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(element: DomElement): void
    vfuncRemove(index: number): void
    vfuncIndexOf(element: DomElement): number
    vfuncGetElement(): DomElement
    vfuncSetElement(value: DomElement): void
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetItemsName(): GObject.Type
    vfuncSetItemsName(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: IXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdList_ConstructProps)
    _init (config?: IXsdList_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListElements_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListElements {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListElements, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListElements_ConstructProps)
    _init (config?: IXsdListElements_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListSimpleTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListSimpleTypes {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListSimpleTypes_ConstructProps)
    _init (config?: IXsdListSimpleTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListComplexTypes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListComplexTypes {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListComplexTypes_ConstructProps)
    _init (config?: IXsdListComplexTypes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributes_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributes {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListAttributes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributes_ConstructProps)
    _init (config?: IXsdListAttributes_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListAttributesGroup_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListAttributesGroup {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListAttributesGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListAttributesGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributesGroup_ConstructProps)
    _init (config?: IXsdListAttributesGroup_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionEnumerations_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionEnumerations {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: IXsdListTypeRestrictionEnumerations_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GObject.Object_ConstructProps {
}
export class IXsdListTypeRestrictionWhiteSpaces {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class ElementList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of GXml.ElementList */
    parentInstance: Gee.ArrayList
    priv: ElementListPrivate
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Virtual methods of GXml.ElementList */
    vfuncGetElement(index: number): DomElement | null
    vfuncToArray(): DomElement[]
    vfuncToArray(): object[]
    vfuncItem(index: number): DomElement | null
    vfuncNamedItem(name: string): DomElement | null
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: ElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ElementList_ConstructProps)
    _init (config?: ElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ElementList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): ElementList
    static $gtype: GObject.Type
}
export interface NodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class NodeList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GXml.NodeList */
    parentInstance: Gee.ArrayList
    priv: NodeListPrivate
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.NodeList */
    get(index: number): Node
    toArray(): Node[]
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.NodeList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: NodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NodeList_ConstructProps)
    _init (config?: NodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NodeList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): NodeList
    static $gtype: GObject.Type
}
export interface SerializableBool_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableBool {
    /* Fields of GXml.SerializableBool */
    parentInstance: GObject.Object
    priv: SerializableBoolPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableBool */
    getValue(): boolean
    setValue(val: boolean): void
    toString(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Virtual methods of GXml.SerializableBool */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableBool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableBool, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableBool_ConstructProps)
    _init (config?: SerializableBool_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableBool
    static $gtype: GObject.Type
}
export interface SerializableDouble_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableDouble {
    /* Fields of GXml.SerializableDouble */
    parentInstance: GObject.Object
    priv: SerializableDoublePrivate
    val: string
    fraction: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    getValue(): number
    setValue(val: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Virtual methods of GXml.SerializableDouble */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableDouble, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableDouble, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableDouble_ConstructProps)
    _init (config?: SerializableDouble_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableDouble
    static $gtype: GObject.Type
}
export interface SerializableFloat_ConstructProps extends SerializableDouble_ConstructProps {
}
export class SerializableFloat {
    /* Fields of GXml.SerializableFloat */
    parentInstance: SerializableDouble
    priv: SerializableFloatPrivate
    /* Fields of GXml.SerializableDouble */
    val: string
    fraction: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableFloat */
    getValue(): number
    setValue(val: number): void
    /* Methods of GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableDouble */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableFloat, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableFloat, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableFloat_ConstructProps)
    _init (config?: SerializableFloat_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableFloat
    static $gtype: GObject.Type
}
export interface SerializableEnum_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableEnum {
    /* Fields of GXml.SerializableEnum */
    parentInstance: GObject.Object
    priv: SerializableEnumPrivate
    val: string
    enumtype: GObject.Type
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableEnum */
    setEnumType(type: GObject.Type): void
    getEnumType(): GObject.Type
    parse(str: string): void
    parseInteger(v: number): void
    toInteger(): number
    toString(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Virtual methods of GXml.SerializableEnum */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableEnum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableEnum, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableEnum_ConstructProps)
    _init (config?: SerializableEnum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withEnum(type: GObject.Type): SerializableEnum
    static new(): SerializableEnum
    static $gtype: GObject.Type
}
export interface SerializableInt_ConstructProps extends SerializableDouble_ConstructProps {
}
export class SerializableInt {
    /* Fields of GXml.SerializableInt */
    parentInstance: SerializableDouble
    priv: SerializableIntPrivate
    /* Fields of GXml.SerializableDouble */
    val: string
    fraction: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableInt */
    getValue(): number
    setValue(val: number): void
    /* Methods of GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableDouble */
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableInt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableInt, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableInt_ConstructProps)
    _init (config?: SerializableInt_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableInt
    static $gtype: GObject.Type
}
export interface SerializableValueList_ConstructProps extends GObject.Object_ConstructProps {
}
export class SerializableValueList {
    /* Fields of GXml.SerializableValueList */
    parentInstance: GObject.Object
    priv: SerializableValueListPrivate
    vals: string[]
    extra: Gee.ArrayList
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableValueList */
    getValues(): Gee.List
    addValues(vals: string[]): void
    getValueAt(index: number): string | null
    selectValueAt(index: number): void
    getValuesArray(): string[]
    isValue(): boolean
    toString(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Virtual methods of GXml.SerializableValueList */
    vfuncGetValues(): Gee.List
    vfuncAddValues(vals: string[]): void
    vfuncGetValueAt(index: number): string | null
    vfuncSelectValueAt(index: number): void
    vfuncGetValuesArray(): string[]
    vfuncIsValue(): boolean
    vfuncGetSerializablePropertyValue(): string
    vfuncSetSerializablePropertyValue(val?: string | null): void
    vfuncDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    vfuncSerializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableValueList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableValueList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableValueList_ConstructProps)
    _init (config?: SerializableValueList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableValueList
    static $gtype: GObject.Type
}
export interface SerializableObjectModel_ConstructProps extends GObject.Object_ConstructProps {
    properties?: GObject.ParamSpec[]
    ignoredSerializableProperties?: GLib.HashTable
    serializedXmlNodeValue?: string
}
export class SerializableObjectModel {
    /* Properties of GXml.SerializableObjectModel */
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GXml.SerializableObjectModel */
    parentInstance: GObject.Object
    priv: SerializableObjectModelPrivate
    node: Node
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableObjectModel */
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean
    nodeName(): string
    defaultNodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Element, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    toString(): string
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Serializable */
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Virtual methods of GXml.SerializableObjectModel */
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncToString(): string
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: SerializableObjectModel, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: SerializableObjectModel, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableObjectModel, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableObjectModel, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableObjectModel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableObjectModel_ConstructProps)
    _init (config?: SerializableObjectModel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableTreeMap_ConstructProps extends Gee.TreeMap_ConstructProps {
    properties?: GObject.ParamSpec[]
    ignoredSerializableProperties?: GLib.HashTable
    serializedXmlNodeValue?: string
}
export class SerializableTreeMap {
    /* Properties of GXml.SerializableTreeMap */
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee.AbstractBidirSortedMap */
    readonly readOnlyView: Gee.BidirSortedMap
    /* Properties of Gee.AbstractSortedMap */
    readonly ascendingKeys: Gee.SortedSet
    readonly ascendingEntries: Gee.SortedSet
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GXml.SerializableTreeMap */
    parentInstance: Gee.TreeMap
    priv: SerializableTreeMapPrivate
    node: Node
    deserialized: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableTreeMap */
    deserializeProceed(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee.TreeMap */
    getKeyCompareFunc(): [ /* returnType */ GLib.CompareDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirSortedMap */
    bidirMapIterator(): Gee.BidirMapIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirSortedMap
    /* Methods of Gee.AbstractSortedMap */
    headMap(before?: object | null): Gee.SortedMap
    tailMap(after?: object | null): Gee.SortedMap
    subMap(before?: object | null, after?: object | null): Gee.SortedMap
    getAscendingKeys(): Gee.SortedSet
    getAscendingEntries(): Gee.SortedSet
    /* Methods of Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml.SerializableCollection */
    isCollection(): boolean
    /* Virtual methods of GXml.SerializableTreeMap */
    vfuncDeserializeProceed(): boolean
    vfuncDeserialized(): boolean
    vfuncDeserializeNode(node: Node): boolean
    vfuncDeserializeChildren(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    vfuncIsCollection(): boolean
    vfuncGetReadOnlyView(): Gee.BidirSortedMap
    vfuncGetReadOnlyView(): Gee.SortedMap
    vfuncGetReadOnlyView(): Gee.Map
    /* Virtual methods of Gee.TreeMap */
    vfuncGetReadOnlyView(): Gee.BidirSortedMap
    vfuncGetReadOnlyView(): Gee.SortedMap
    vfuncGetReadOnlyView(): Gee.Map
    /* Virtual methods of Gee.AbstractBidirSortedMap */
    vfuncBidirMapIterator(): Gee.BidirMapIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirSortedMap
    vfuncGetReadOnlyView(): Gee.SortedMap
    vfuncGetReadOnlyView(): Gee.Map
    /* Virtual methods of Gee.AbstractSortedMap */
    vfuncHeadMap(before?: object | null): Gee.SortedMap
    vfuncTailMap(after?: object | null): Gee.SortedMap
    vfuncSubMap(before?: object | null, after?: object | null): Gee.SortedMap
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetAscendingKeys(): Gee.SortedSet
    vfuncGetAscendingEntries(): Gee.SortedSet
    vfuncGetReadOnlyView(): Gee.SortedMap
    vfuncGetReadOnlyView(): Gee.Map
    /* Virtual methods of Gee.AbstractMap */
    vfuncHasKey(key?: object | null): boolean
    vfuncHas(key?: object | null, value?: object | null): boolean
    vfuncGet(key?: object | null): object | null
    vfuncSet(key?: object | null, value?: object | null): void
    vfuncUnset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfuncMapIterator(): Gee.MapIterator
    vfuncClear(): void
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetKeys(): Gee.Set
    vfuncGetValues(): Gee.Collection
    vfuncGetEntries(): Gee.Set
    vfuncGetReadOnlyView(): Gee.Map
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncIterator(): Gee.Iterator
    vfuncSetAll(map: Gee.Map): void
    vfuncUnsetAll(map: Gee.Map): boolean
    vfuncHasAll(map: Gee.Map): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: SerializableTreeMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: SerializableTreeMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableTreeMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableTreeMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ascending-keys", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ascending-keys", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ascending-entries", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ascending-entries", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableTreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableTreeMap_ConstructProps)
    _init (config?: SerializableTreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableTreeMap
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyCompareFunc: GLib.CompareDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): SerializableTreeMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableHashMap_ConstructProps extends Gee.HashMap_ConstructProps {
    properties?: GObject.ParamSpec[]
    ignoredSerializableProperties?: GLib.HashTable
    serializedXmlNodeValue?: string
}
export class SerializableHashMap {
    /* Properties of GXml.SerializableHashMap */
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GXml.SerializableHashMap */
    parentInstance: Gee.HashMap
    priv: SerializableHashMapPrivate
    node: Node
    deserialized: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableHashMap */
    deserializeProceed(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee.HashMap */
    getKeyHashFunc(): [ /* returnType */ Gee.HashDataFunc, /* resultTarget */ object | null ]
    getKeyEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Serializable */
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml.SerializableCollection */
    isCollection(): boolean
    /* Virtual methods of GXml.SerializableHashMap */
    vfuncDeserializeProceed(): boolean
    vfuncDeserialized(): boolean
    vfuncDeserializeNode(node: Node): boolean
    vfuncDeserializeChildren(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    vfuncIsCollection(): boolean
    /* Virtual methods of Gee.AbstractMap */
    vfuncHasKey(key?: object | null): boolean
    vfuncHas(key?: object | null, value?: object | null): boolean
    vfuncGet(key?: object | null): object | null
    vfuncSet(key?: object | null, value?: object | null): void
    vfuncUnset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfuncMapIterator(): Gee.MapIterator
    vfuncClear(): void
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetKeys(): Gee.Set
    vfuncGetValues(): Gee.Collection
    vfuncGetEntries(): Gee.Set
    vfuncGetReadOnlyView(): Gee.Map
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncIterator(): Gee.Iterator
    vfuncSetAll(map: Gee.Map): void
    vfuncUnsetAll(map: Gee.Map): boolean
    vfuncHasAll(map: Gee.Map): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: SerializableHashMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: SerializableHashMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableHashMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableHashMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableHashMap_ConstructProps)
    _init (config?: SerializableHashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableHashMap
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): SerializableHashMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableDualKeyMap_ConstructProps extends GObject.Object_ConstructProps {
    properties?: GObject.ParamSpec[]
    ignoredSerializableProperties?: GLib.HashTable
    serializedXmlNodeValue?: string
}
export class SerializableDualKeyMap {
    /* Properties of GXml.SerializableDualKeyMap */
    readonly valueType: GObject.Type
    readonly primaryKeyType: GObject.Type
    readonly secondaryKeyType: GObject.Type
    readonly primaryKeys: Gee.Collection
    readonly size: number
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GXml.SerializableDualKeyMap */
    parentInstance: GObject.Object
    priv: SerializableDualKeyMapPrivate
    storage: Gee.HashMultiMap
    node: Node
    deserialized: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableDualKeyMap */
    deserializeProceed(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    secondaryKeys(key?: object | null): Gee.Collection
    valuesForKey(primaryKey?: object | null): Gee.Collection
    values(): Gee.Collection
    set(primaryKey?: object | null, secundaryKey?: object | null, val?: object | null): void
    get(primaryKey?: object | null, secondaryKey?: object | null): object | null
    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getValueType(): GObject.Type
    getPrimaryKeyType(): GObject.Type
    getSecondaryKeyType(): GObject.Type
    getPrimaryKeys(): Gee.Collection
    getSize(): number
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of GXml.Serializable */
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml.SerializableCollection */
    isCollection(): boolean
    /* Virtual methods of GXml.SerializableDualKeyMap */
    vfuncDeserializeProceed(): boolean
    vfuncDeserialized(): boolean
    vfuncDeserializeNode(node: Node): boolean
    vfuncDeserializeChildren(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    vfuncIsCollection(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: SerializableDualKeyMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: SerializableDualKeyMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableDualKeyMap, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableDualKeyMap, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-key-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-key-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::secondary-key-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-key-type", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableDualKeyMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableDualKeyMap_ConstructProps)
    _init (config?: SerializableDualKeyMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableDualKeyMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableArrayList_ConstructProps extends Gee.ArrayList_ConstructProps {
    properties?: GObject.ParamSpec[]
    ignoredSerializableProperties?: GLib.HashTable
    serializedXmlNodeValue?: string
}
export class SerializableArrayList {
    /* Properties of GXml.SerializableArrayList */
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GXml.SerializableArrayList */
    parentInstance: Gee.ArrayList
    priv: SerializableArrayListPrivate
    node: Node
    deserialized: boolean
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableArrayList */
    deserializeProceed(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml.SerializableCollection */
    isCollection(): boolean
    /* Virtual methods of GXml.SerializableArrayList */
    vfuncDeserializeProceed(): boolean
    vfuncDeserialized(): boolean
    vfuncDeserializeNode(node: Node): boolean
    vfuncDeserializeChildren(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    vfuncIsCollection(): boolean
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: (($obj: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property", callback: (($obj: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "serialize-unknown-property-type", callback: (($obj: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    on(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property", callback: (($obj: SerializableArrayList, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property", callback: (($obj: SerializableArrayList, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableArrayList, node: Node, prop: GObject.ParamSpec) => void)): number
    connect_after(sigName: "deserialize-unknown-property-type", callback: (($obj: SerializableArrayList, node: Node, prop: GObject.ParamSpec) => void)): number
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    on(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: (($obj: SerializableArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableArrayList_ConstructProps)
    _init (config?: SerializableArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableArrayList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): SerializableArrayList
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
export interface SerializableContainer_ConstructProps extends SerializableObjectModel_ConstructProps {
}
export class SerializableContainer {
    /* Properties of GXml.SerializableObjectModel */
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    /* Fields of GXml.SerializableContainer */
    parentInstance: SerializableObjectModel
    priv: SerializableContainerPrivate
    /* Fields of GXml.SerializableObjectModel */
    node: Node
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.SerializableContainer */
    initContainers(): void
    /* Methods of GXml.SerializableObjectModel */
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean
    nodeName(): string
    defaultNodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Element, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    toString(): string
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.SerializableContainer */
    vfuncInitContainers(): void
    /* Virtual methods of GXml.SerializableObjectModel */
    vfuncGetEnableUnknownSerializableProperty(): boolean
    vfuncSerializeUseXmlNodeValue(): boolean
    vfuncPropertyUseNick(): boolean
    vfuncSetDefaultNamespace(node: Node): boolean
    vfuncNodeName(): string
    vfuncFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncListSerializableProperties(): GObject.ParamSpec[]
    vfuncSerialize(node: Node): Node | null
    vfuncSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    vfuncDeserialize(node: Node): boolean
    vfuncDeserializeProperty(propertyNode: Node): boolean
    vfuncToString(): string
    vfuncDefaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    vfuncDefaultListSerializableProperties(): GObject.ParamSpec[]
    vfuncGetUnknownSerializableProperties(): Gee.Map
    vfuncGetUnknownSerializableNodes(): Gee.Collection
    vfuncGetSerializedXmlNodeValue(): string | null
    vfuncSetSerializedXmlNodeValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: (($obj: SerializableContainer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableContainer_ConstructProps)
    _init (config?: SerializableContainer_ConstructProps): void
    static $gtype: GObject.Type
}
export interface TAttribute_ConstructProps extends TNode_ConstructProps {
    namespace?: Namespace
}
export class TAttribute {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Fields of GXml.TAttribute */
    parentInstance: TNode
    priv: TAttributePrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Virtual methods of GXml.TAttribute */
    vfuncGetNamespace(): Namespace | null
    vfuncSetNamespace(value?: Namespace | null): void
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncGetPrefix(): string | null
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: TAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TAttribute_ConstructProps)
    _init (config?: TAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, name: string, value: string): TAttribute
    static $gtype: GObject.Type
}
export interface TComment_ConstructProps extends TNode_ConstructProps {
    str?: string
}
export class TComment {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Comment */
    str: string
    /* Fields of GXml.TComment */
    parentInstance: TNode
    priv: TCommentPrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Virtual methods of GXml.TComment */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: TComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TComment_ConstructProps)
    _init (config?: TComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: Document, text: string): TComment
    static $gtype: GObject.Type
}
export interface TCDATA_ConstructProps extends TNode_ConstructProps {
}
export class TCDATA {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.CDATA */
    readonly str: string
    /* Fields of GXml.TCDATA */
    parentInstance: TNode
    priv: TCDATAPrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.CDATA */
    getStr(): string
    /* Virtual methods of GXml.TCDATA */
    vfuncGetStr(): string
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: TCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TCDATA_ConstructProps)
    _init (config?: TCDATA_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, text: string): TCDATA
    static $gtype: GObject.Type
}
export interface TDocument_ConstructProps extends TNode_ConstructProps {
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
}
export class TDocument {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Fields of GXml.TDocument */
    parentInstance: TNode
    priv: TDocumentPrivate
    children: Gee.ArrayList
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TDocument */
    saveTo(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Virtual methods of GXml.TDocument */
    vfuncCreateElement(name: string): Node
    vfuncCreateText(text: string): Node
    vfuncCreateComment(text: string): Node
    vfuncCreateCdata(text: string): Node
    vfuncCreatePi(target: string, data: string): Node
    vfuncSave(cancellable?: Gio.Cancellable | null): boolean
    vfuncSaveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNsTop(): boolean
    vfuncSetNsTop(value: boolean): void
    vfuncGetPrefixDefaultNs(): boolean
    vfuncSetPrefixDefaultNs(value: boolean): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetRoot(): Node
    vfuncGetFile(): Gio.File
    vfuncSetFile(value: Gio.File): void
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: TDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TDocument_ConstructProps)
    _init (config?: TDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TDocument
    static fromPath(path: string): TDocument
    static fromUri(uri: string): TDocument
    static fromFile(file: Gio.File): TDocument
    static fromStream(stream: Gio.InputStream): TDocument
    static fromString(str: string): TDocument
    static fromPathWithReadtypeFunc(path: string, func: TDocumentReadTypeFunc): TDocument
    static fromUriWithReadtypeFunc(uri: string, func: TDocumentReadTypeFunc): TDocument
    static fromFileWithReadtypeFunc(file: Gio.File, func: TDocumentReadTypeFunc): TDocument
    static fromStreamWithReadtypeFunc(stream: Gio.InputStream, func: TDocumentReadTypeFunc): TDocument
    static fromStringWithReadtypeFunc(str: string, func: TDocumentReadTypeFunc): TDocument
    static twSaveAs(doc: Document, f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    static writeDocument(doc: Document, tw: libxml2.TextWriter): void
    static startNode(doc: Document, tw: libxml2.TextWriter, node: Node, root: boolean, declaredNs: Gee.ArrayList): /* declaredNs */ Gee.ArrayList
    static readDoc(doc: Document, file: Gio.File, rtfunc?: TDocumentReadTypeFunc | null): void
    static readDocStream(doc: Document, istream: Gio.InputStream, rtfunc?: TDocumentReadTypeFunc | null): void
    static readNode(node: Node, tr: libxml2.TextReader, rntfunc?: TDocumentReadTypeFunc | null): TDocumentReadType
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static $gtype: GObject.Type
}
export interface TElement_ConstructProps extends TNode_ConstructProps {
    content?: string
}
export class TElement {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Element */
    readonly tagName: string
    content: string
    /* Fields of GXml.TElement */
    parentInstance: TNode
    priv: TElementPrivate
    children: TNodeTChildrenList
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Element */
    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getTagName(): string
    getContent(): string
    setContent(value: string): void
    /* Virtual methods of GXml.TElement */
    vfuncNormalize(): void
    vfuncSetAttr(name: string, value: string): void
    vfuncGetAttr(name: string): Node | null
    vfuncRemoveAttr(name: string): void
    vfuncRemoveNsAttr(name: string, uri: string): void
    vfuncSetNsAttr(ns: string, name: string, value: string): void
    vfuncGetNsAttr(name: string, uri: string): Node | null
    vfuncGetTagName(): string
    vfuncGetContent(): string
    vfuncSetContent(value: string): void
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: TElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TElement_ConstructProps)
    _init (config?: TElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, name: string): TElement
    static $gtype: GObject.Type
}
export interface TNamespace_ConstructProps extends TNode_ConstructProps {
}
export class TNamespace {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GXml.TNamespace */
    parentInstance: TNode
    priv: TNamespacePrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Virtual methods of GXml.TNamespace */
    vfuncGetUri(): string | null
    vfuncGetPrefix(): string | null
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: TNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNamespace_ConstructProps)
    _init (config?: TNamespace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, uri: string, prefix?: string | null): TNamespace
    static $gtype: GObject.Type
}
export interface TNode_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class TNode {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Fields of GXml.TNode */
    parentInstance: GObject.Object
    priv: TNodePrivate
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    nsPrefix(): string
    nsUri(): string
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNode_ConstructProps)
    _init (config?: TNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface TNodeTChildrenList_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
export class TNodeTChildrenList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GXml.TNodeTChildrenList */
    parentInstance: Gee.AbstractBidirList
    priv: TNodeTChildrenListPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.TNodeTChildrenList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: TNodeTChildrenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNodeTChildrenList_ConstructProps)
    _init (config?: TNodeTChildrenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: Node): TNodeTChildrenList
    static $gtype: GObject.Type
}
export interface TProcessingInstruction_ConstructProps extends TNode_ConstructProps {
    data?: string
}
export class TProcessingInstruction {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Fields of GXml.TProcessingInstruction */
    parentInstance: TNode
    priv: TProcessingInstructionPrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Virtual methods of GXml.TProcessingInstruction */
    vfuncGetTarget(): string
    vfuncGetData(): string
    vfuncSetData(value: string): void
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: TProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TProcessingInstruction_ConstructProps)
    _init (config?: TProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: Document, target: string, data: string): TProcessingInstruction
    static $gtype: GObject.Type
}
export interface TText_ConstructProps extends TNode_ConstructProps {
    str?: string
}
export class TText {
    /* Properties of GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Properties of GXml.Text */
    str: string
    /* Fields of GXml.TText */
    parentInstance: TNode
    priv: TTextPrivate
    /* Fields of GXml.TNode */
    doc: Document
    nodeType: NodeType
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Virtual methods of GXml.TText */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GXml.TNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncSetParent(node: Node): void
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetDocument(): Document
    vfuncGetName(): string
    vfuncGetNamespaces(): Gee.List
    vfuncGetTypeNode(): NodeType
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetParent(): Node
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: TText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TText_ConstructProps)
    _init (config?: TText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, text: string): TText
    static $gtype: GObject.Type
}
export interface HtmlDocument_ConstructProps extends GDocument_ConstructProps {
}
export class HtmlDocument {
    /* Properties of GXml.HtmlDocument */
    readonly defaultOptions: number
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml.HtmlDocument */
    parentInstance: GDocument
    priv: HtmlDocumentPrivate
    /* Fields of GXml.GDocument */
    doc: object | null
    buffer: libxml2.Buffer
    implementation: GImplementation
    url: string
    origin: string
    compatMode: string
    characterSet: string
    contentType: string
    constructor: DomEvent
    /* Fields of GXml.GNode */
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.HtmlDocument */
    vfuncCreateElement(name: string): Node
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateComment(text: string): Node
    vfuncCreateComment(data: string): DomComment
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    /* Virtual methods of GXml.GDocument */
    vfuncSave(cancellable?: Gio.Cancellable | null): boolean
    vfuncSaveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfuncCreateElement(name: string): Node
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateText(text: string): Node
    vfuncCreateComment(text: string): Node
    vfuncCreateComment(data: string): DomComment
    vfuncCreateCdata(text: string): Node
    vfuncCreatePi(target: string, data: string): Node
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNsTop(): boolean
    vfuncSetNsTop(value: boolean): void
    vfuncGetPrefixDefaultNs(): boolean
    vfuncSetPrefixDefaultNs(value: boolean): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetRoot(): Node
    vfuncGetFile(): Gio.File
    vfuncSetFile(value: Gio.File): void
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetElementById(elementId: string): DomElement | null
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncCreateElementNs(namespace: string | null, qualifiedName: string): DomElement
    vfuncCreateDocumentFragment(): DomDocumentFragment
    vfuncCreateTextNode(data: string): DomText
    vfuncCreateProcessingInstruction(target: string, data: string): DomProcessingInstruction
    vfuncImportNode(node: DomNode, deep: boolean): DomNode
    vfuncAdoptNode(node: DomNode): DomNode
    vfuncCreateEvent(interface: string): DomEvent
    vfuncCreateRange(): DomRange
    vfuncCreateNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    vfuncCreateTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    vfuncGetImplementation(): DomImplementation
    vfuncGetUrl(): string
    vfuncGetDocumentUri(): string
    vfuncGetOrigin(): string
    vfuncGetCompatMode(): string
    vfuncGetCharacterSet(): string
    vfuncGetContentType(): string
    vfuncGetDoctype(): DomDocumentType | null
    vfuncGetDocumentElement(): DomElement | null
    vfuncEvaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-options", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-options", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: HtmlDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HtmlDocument_ConstructProps)
    _init (config?: HtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static fromPath(path: string, options: number): HtmlDocument
    static fromUri(uri: string, options: number): HtmlDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): HtmlDocument
    static fromString(html: string, options: number): HtmlDocument
    static new(): HtmlDocument
    static getDefaultOptions(): number
    static $gtype: GObject.Type
}
export interface GAttribute_ConstructProps extends GNode_ConstructProps {
    namespace?: Namespace
    value?: string
}
export class GAttribute {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Properties of GXml.DomAttr */
    readonly namespaceUri: string
    readonly localName: string
    readonly specified: boolean
    /* Fields of GXml.GAttribute */
    parentInstance: GNode
    priv: GAttributePrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Methods of GXml.DomAttr */
    getNamespaceUri(): string | null
    getLocalName(): string
    getSpecified(): boolean
    /* Virtual methods of GXml.GAttribute */
    vfuncGetNamespace(): Namespace | null
    vfuncSetNamespace(value?: Namespace | null): void
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncGetPrefix(): string | null
    vfuncGetNamespaceUri(): string | null
    vfuncGetLocalName(): string
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetSpecified(): boolean
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: (($obj: GAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GAttribute_ConstructProps)
    _init (config?: GAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GAttribute
    static $gtype: GObject.Type
}
export interface GComment_ConstructProps extends GCharacterData_ConstructProps {
    str?: string
    data?: string
}
export class GComment {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.Comment */
    str: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GComment */
    parentInstance: GCharacterData
    priv: GCommentPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GComment */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    /* Virtual methods of GXml.GCharacterData */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GComment_ConstructProps)
    _init (config?: GComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GComment
    static new(): GComment
    static $gtype: GObject.Type
}
export interface GCharacterData_ConstructProps extends GNonDocumentChildNode_ConstructProps {
    str?: string
    data?: string
}
export class GCharacterData {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.Character */
    str: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GCharacterData */
    parentInstance: GNonDocumentChildNode
    priv: GCharacterDataPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Character */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GCharacterData */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GCharacterData_ConstructProps)
    _init (config?: GCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GCharacterData
    static $gtype: GObject.Type
}
export interface GChildNode_ConstructProps extends GNode_ConstructProps {
}
export class GChildNode {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml.GChildNode */
    parentInstance: GNode
    priv: GChildNodePrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GChildNode_ConstructProps)
    _init (config?: GChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GChildNode
    static $gtype: GObject.Type
}
export interface GNonDocumentChildNode_ConstructProps extends GChildNode_ConstructProps {
}
export class GNonDocumentChildNode {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml.GNonDocumentChildNode */
    parentInstance: GChildNode
    priv: GNonDocumentChildNodePrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: GNonDocumentChildNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNonDocumentChildNode_ConstructProps)
    _init (config?: GNonDocumentChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GNonDocumentChildNode
    static $gtype: GObject.Type
}
export interface GCDATA_ConstructProps extends GNode_ConstructProps {
}
export class GCDATA {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.CDATA */
    readonly str: string
    /* Fields of GXml.GCDATA */
    parentInstance: GNode
    priv: GCDATAPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.CDATA */
    getStr(): string
    /* Virtual methods of GXml.GCDATA */
    vfuncGetStr(): string
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: GCDATA, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GCDATA_ConstructProps)
    _init (config?: GCDATA_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GCDATA
    static $gtype: GObject.Type
}
export interface GDocument_ConstructProps extends GNode_ConstructProps {
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
}
export class GDocument {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GXml.GDocument */
    parentInstance: GNode
    priv: GDocumentPrivate
    doc: object | null
    buffer: libxml2.Buffer
    constructor: DomEvent
    /* Fields of GXml.GNode */
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GDocument */
    vfuncSave(cancellable?: Gio.Cancellable | null): boolean
    vfuncSaveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfuncCreateElement(name: string): Node
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateText(text: string): Node
    vfuncCreateComment(text: string): Node
    vfuncCreateComment(data: string): DomComment
    vfuncCreateCdata(text: string): Node
    vfuncCreatePi(target: string, data: string): Node
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNsTop(): boolean
    vfuncSetNsTop(value: boolean): void
    vfuncGetPrefixDefaultNs(): boolean
    vfuncSetPrefixDefaultNs(value: boolean): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetRoot(): Node
    vfuncGetFile(): Gio.File
    vfuncSetFile(value: Gio.File): void
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetElementById(elementId: string): DomElement | null
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncCreateElementNs(namespace: string | null, qualifiedName: string): DomElement
    vfuncCreateDocumentFragment(): DomDocumentFragment
    vfuncCreateTextNode(data: string): DomText
    vfuncCreateProcessingInstruction(target: string, data: string): DomProcessingInstruction
    vfuncImportNode(node: DomNode, deep: boolean): DomNode
    vfuncAdoptNode(node: DomNode): DomNode
    vfuncCreateEvent(interface: string): DomEvent
    vfuncCreateRange(): DomRange
    vfuncCreateNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    vfuncCreateTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    vfuncGetImplementation(): DomImplementation
    vfuncGetUrl(): string
    vfuncGetDocumentUri(): string
    vfuncGetOrigin(): string
    vfuncGetCompatMode(): string
    vfuncGetCharacterSet(): string
    vfuncGetContentType(): string
    vfuncGetDoctype(): DomDocumentType | null
    vfuncGetDocumentElement(): DomElement | null
    vfuncEvaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: GDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocument_ConstructProps)
    _init (config?: GDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDocument
    static fromPath(path: string, options: number): GDocument
    static fromUri(uri: string, options: number): GDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GDocument
    static fromString(str: string, options: number): GDocument
    static fromStream(istream: Gio.InputStream): GDocument
    static fromDoc(doc: libxml2.Doc): GDocument
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static $gtype: GObject.Type
}
export interface GImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class GImplementation {
    /* Fields of GXml.GImplementation */
    parentInstance: GObject.Object
    priv: GImplementationPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Virtual methods of GXml.GImplementation */
    vfuncCreateDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    vfuncCreateDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    vfuncCreateHtmlDocument(title: string): Document
    vfuncHasFeature(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GImplementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GImplementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GImplementation_ConstructProps)
    _init (config?: GImplementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GImplementation
    static $gtype: GObject.Type
}
export interface GDocumentType_ConstructProps extends GChildNode_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class GDocumentType {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml.DomDocumentType */
    readonly publicId: string
    readonly systemId: string
    /* Fields of GXml.GDocumentType */
    parentInstance: GChildNode
    priv: GDocumentTypePrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomDocumentType */
    getPublicId(): string
    getSystemId(): string
    /* Virtual methods of GXml.GDocumentType */
    vfuncGetName(): string
    vfuncGetPublicId(): string
    vfuncGetSystemId(): string
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: GDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocumentType_ConstructProps)
    _init (config?: GDocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withName(name: string): GDocumentType
    static withIds(name: string, publicId: string, systemId: string): GDocumentType
    static new(): GDocumentType
    static $gtype: GObject.Type
}
export interface GDocumentFragment_ConstructProps extends GDocument_ConstructProps {
}
export class GDocumentFragment {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml.GDocumentFragment */
    parentInstance: GDocument
    priv: GDocumentFragmentPrivate
    /* Fields of GXml.GDocument */
    doc: object | null
    buffer: libxml2.Buffer
    implementation: GImplementation
    url: string
    origin: string
    compatMode: string
    characterSet: string
    contentType: string
    constructor: DomEvent
    /* Fields of GXml.GNode */
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GDocumentFragment */
    vfuncCreateElement(name: string): Node
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateComment(text: string): Node
    vfuncCreateComment(data: string): DomComment
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    /* Virtual methods of GXml.GDocument */
    vfuncSave(cancellable?: Gio.Cancellable | null): boolean
    vfuncSaveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    vfuncCreateElement(name: string): Node
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateText(text: string): Node
    vfuncCreateComment(text: string): Node
    vfuncCreateComment(data: string): DomComment
    vfuncCreateCdata(text: string): Node
    vfuncCreatePi(target: string, data: string): Node
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNsTop(): boolean
    vfuncSetNsTop(value: boolean): void
    vfuncGetPrefixDefaultNs(): boolean
    vfuncSetPrefixDefaultNs(value: boolean): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetRoot(): Node
    vfuncGetFile(): Gio.File
    vfuncSetFile(value: Gio.File): void
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetElementById(elementId: string): DomElement | null
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncCreateElementNs(namespace: string | null, qualifiedName: string): DomElement
    vfuncCreateDocumentFragment(): DomDocumentFragment
    vfuncCreateTextNode(data: string): DomText
    vfuncCreateProcessingInstruction(target: string, data: string): DomProcessingInstruction
    vfuncImportNode(node: DomNode, deep: boolean): DomNode
    vfuncAdoptNode(node: DomNode): DomNode
    vfuncCreateEvent(interface: string): DomEvent
    vfuncCreateRange(): DomRange
    vfuncCreateNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    vfuncCreateTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    vfuncGetImplementation(): DomImplementation
    vfuncGetUrl(): string
    vfuncGetDocumentUri(): string
    vfuncGetOrigin(): string
    vfuncGetCompatMode(): string
    vfuncGetCharacterSet(): string
    vfuncGetContentType(): string
    vfuncGetDoctype(): DomDocumentType | null
    vfuncGetDocumentElement(): DomElement | null
    vfuncEvaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocumentFragment_ConstructProps)
    _init (config?: GDocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: GDocument): GDocumentFragment
    static new(): GDocumentFragment
    static $gtype: GObject.Type
}
export interface GDomNodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class GDomNodeIterator {
    /* Properties of GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    /* Fields of GXml.GDomNodeIterator */
    parentInstance: GObject.Object
    priv: GDomNodeIteratorPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeIterator */
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    /* Virtual methods of GXml.GDomNodeIterator */
    vfuncNextNode(): DomNode | null
    vfuncPreviousNode(): DomNode | null
    vfuncDetach(): void
    vfuncGetRoot(): DomNode
    vfuncGetReferenceNode(): DomNode
    vfuncGetPointerBeforeReferenceNode(): boolean
    vfuncGetWhatToShow(): number
    vfuncGetFilter(): DomNodeFilter | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: GDomNodeIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomNodeIterator_ConstructProps)
    _init (config?: GDomNodeIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(n: DomNode, whatToShow: number, filter: DomNodeFilter): GDomNodeIterator
    static $gtype: GObject.Type
}
export interface GDomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
export class GDomTreeWalker {
    /* Properties of GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    readonly currentNode: DomNode
    /* Fields of GXml.GDomTreeWalker */
    parentInstance: GObject.Object
    priv: GDomTreeWalkerPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomTreeWalker */
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    getRoot(): DomNode
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    getCurrentNode(): DomNode
    /* Virtual methods of GXml.GDomTreeWalker */
    vfuncParentNode(): DomNode | null
    vfuncFirstChild(): DomNode | null
    vfuncLastChild(): DomNode | null
    vfuncPreviousSibling(): DomNode | null
    vfuncNextSibling(): DomNode | null
    vfuncPreviousNode(): DomNode | null
    vfuncNextNode(): DomNode | null
    vfuncGetRoot(): DomNode
    vfuncGetWhatToShow(): number
    vfuncGetFilter(): DomNodeFilter | null
    vfuncGetCurrentNode(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: (($obj: GDomTreeWalker, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomTreeWalker_ConstructProps)
    _init (config?: GDomTreeWalker_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(r: DomNode, w: number, f: DomNodeFilter): GDomTreeWalker
    static $gtype: GObject.Type
}
export interface GDomTokenList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class GDomTokenList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GXml.GDomTokenList */
    parentInstance: Gee.ArrayList
    priv: GDomTokenListPrivate
    element: DomElement
    attr: string
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDomTokenList */
    update(): void
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Virtual methods of GXml.GDomTokenList */
    vfuncItem(index: number): string | null
    vfuncContains(token: string): boolean
    vfuncContains(item?: object | null): boolean
    vfuncAdd(tokens: string[]): void
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(tokens: string[]): void
    vfuncRemove(item?: object | null): boolean
    vfuncToggle(token: string, force: boolean, auto: boolean): boolean
    vfuncToString(): string
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GDomTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomTokenList_ConstructProps)
    _init (config?: GDomTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): GDomTokenList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomTokenList
    static $gtype: GObject.Type
}
export interface GDomSettableTokenList_ConstructProps extends GDomTokenList_ConstructProps {
    value?: string
}
export class GDomSettableTokenList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomSettableTokenList */
    value: string
    /* Properties of GXml.DomTokenList */
    readonly length: number
    /* Fields of GXml.GDomSettableTokenList */
    parentInstance: GDomTokenList
    priv: GDomSettableTokenListPrivate
    /* Fields of GXml.GDomTokenList */
    element: DomElement
    attr: string
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDomTokenList */
    update(): void
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Virtual methods of GXml.GDomSettableTokenList */
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncContains(token: string): boolean
    vfuncContains(item?: object | null): boolean
    vfuncAdd(tokens: string[]): void
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(tokens: string[]): void
    vfuncRemove(item?: object | null): boolean
    /* Virtual methods of GXml.GDomTokenList */
    vfuncItem(index: number): string | null
    vfuncContains(token: string): boolean
    vfuncContains(item?: object | null): boolean
    vfuncAdd(tokens: string[]): void
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(tokens: string[]): void
    vfuncRemove(item?: object | null): boolean
    vfuncToggle(token: string, force: boolean, auto: boolean): boolean
    vfuncToString(): string
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GDomSettableTokenList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomSettableTokenList_ConstructProps)
    _init (config?: GDomSettableTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): GDomSettableTokenList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomSettableTokenList
    static $gtype: GObject.Type
}
export interface GDomHTMLCollection_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class GDomHTMLCollection {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of GXml.GDomHTMLCollection */
    parentInstance: Gee.ArrayList
    priv: GDomHTMLCollectionPrivate
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Virtual methods of GXml.GDomHTMLCollection */
    vfuncGetElement(index: number): DomElement | null
    vfuncToArray(): DomElement[]
    vfuncToArray(): object[]
    vfuncItem(index: number): DomElement | null
    vfuncNamedItem(name: string): DomElement | null
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GDomHTMLCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomHTMLCollection_ConstructProps)
    _init (config?: GDomHTMLCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomHTMLCollection
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomHTMLCollection
    static $gtype: GObject.Type
}
export interface GDomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
export class GDomEvent {
    /* Properties of GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GXml.GDomEvent */
    parentInstance: GObject.Object
    priv: GDomEventPrivate
    flags: DomEventFlags
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomEvent */
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    /* Virtual methods of GXml.GDomEvent */
    vfuncStopPropagation(): void
    vfuncStopImmediatePropagation(): void
    vfuncPreventDefault(): void
    vfuncInitEvent(type: string, bubbles: boolean, cancelable: boolean): void
    vfuncGetEtype(): string
    vfuncGetEventTarget(): DomEventTarget | null
    vfuncGetCurrentTarget(): DomEventTarget | null
    vfuncGetBubbles(): boolean
    vfuncGetCancelable(): boolean
    vfuncGetIsTrusted(): boolean
    vfuncGetTimeStamp(): DomTimeStamp
    vfuncGetDefaultPrevented(): boolean
    vfuncGetEventPhase(): DomEventPhase
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::etype", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: (($obj: GDomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomEvent_ConstructProps)
    _init (config?: GDomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomEvent
    static $gtype: GObject.Type
}
export interface GDomCustomEvent_ConstructProps extends GDomEvent_ConstructProps {
}
export class GDomCustomEvent {
    /* Properties of GXml.GDomCustomEvent */
    readonly detail: any
    /* Fields of GXml.GDomCustomEvent */
    parentInstance: GDomEvent
    priv: GDomCustomEventPrivate
    /* Fields of GXml.GDomEvent */
    etype: string
    eventTarget: DomEventTarget
    currentTarget: DomEventTarget
    bubbles: boolean
    cancelable: boolean
    isTrusted: boolean
    timeStamp: DomTimeStamp
    defaultPrevented: boolean
    eventPhase: DomEventPhase
    flags: DomEventFlags
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GDomCustomEvent */
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any): void
    getDetail(): any
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GDomEvent */
    vfuncStopPropagation(): void
    vfuncStopImmediatePropagation(): void
    vfuncPreventDefault(): void
    vfuncInitEvent(type: string, bubbles: boolean, cancelable: boolean): void
    vfuncGetEtype(): string
    vfuncGetEventTarget(): DomEventTarget | null
    vfuncGetCurrentTarget(): DomEventTarget | null
    vfuncGetBubbles(): boolean
    vfuncGetCancelable(): boolean
    vfuncGetIsTrusted(): boolean
    vfuncGetTimeStamp(): DomTimeStamp
    vfuncGetDefaultPrevented(): boolean
    vfuncGetEventPhase(): DomEventPhase
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: GDomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: GDomCustomEvent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomCustomEvent_ConstructProps)
    _init (config?: GDomCustomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomCustomEvent
    static $gtype: GObject.Type
}
export interface GDomRange_ConstructProps extends GObject.Object_ConstructProps {
}
export class GDomRange {
    /* Properties of GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GXml.GDomRange */
    parentInstance: GObject.Object
    priv: GDomRangePrivate
    document: DomDocument
    collapse: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomRange */
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    /* Virtual methods of GXml.GDomRange */
    vfuncSetStart(node: DomNode, offset: number): void
    vfuncSetEnd(node: DomNode, offset: number): void
    vfuncSetStartBefore(node: DomNode): void
    vfuncSetStartAfter(node: DomNode): void
    vfuncSetEndBefore(node: DomNode): void
    vfuncSetEndAfter(node: DomNode): void
    vfuncCollapse(toStart: boolean): void
    vfuncSelectNode(node: DomNode): void
    vfuncSelectNodeContents(node: DomNode): void
    vfuncCompareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    vfuncDeleteContents(): void
    vfuncExtractContents(): DomDocumentFragment | null
    vfuncCloneContents(): DomDocumentFragment | null
    vfuncInsertNode(node: DomNode): void
    vfuncSurroundContents(newParent: DomNode): void
    vfuncCloneRange(): DomRange
    vfuncDetach(): void
    vfuncIsPointInRange(node: DomNode, offset: number): boolean
    vfuncComparePoint(node: DomNode, offset: number): number
    vfuncIntersectsNode(node: DomNode): boolean
    vfuncToString(): string
    vfuncGetStartContainer(): DomNode
    vfuncGetStartOffset(): number
    vfuncGetEndContainer(): DomNode
    vfuncGetEndOffset(): number
    vfuncGetCollapsed(): boolean
    vfuncGetCommonAncestorContainer(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: (($obj: GDomRange, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomRange_ConstructProps)
    _init (config?: GDomRange_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): GDomRange
    static $gtype: GObject.Type
}
export interface GElement_ConstructProps extends GNonDocumentChildNode_ConstructProps {
    id?: string
    className?: string
    content?: string
}
export class GElement {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml.Element */
    content: string
    /* Fields of GXml.GElement */
    parentInstance: GNonDocumentChildNode
    priv: GElementPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml.Element */
    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getContent(): string
    setContent(value: string): void
    /* Methods of GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GElement */
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncNormalize(): void
    vfuncSetAttr(name: string, value: string): void
    vfuncGetAttr(name: string): Node | null
    vfuncRemoveAttr(name: string): void
    vfuncRemoveNsAttr(name: string, uri: string): void
    vfuncSetNsAttr(ns: string, name: string, value: string): void
    vfuncGetNsAttr(name: string, uri: string): Node | null
    vfuncGetContent(): string
    vfuncSetContent(value: string): void
    vfuncEvaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: GElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GElement_ConstructProps)
    _init (config?: GElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GElement
    static new(): GElement
    static $gtype: GObject.Type
}
export interface GNamespace_ConstructProps extends GObject.Object_ConstructProps {
}
export class GNamespace {
    /* Properties of GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GXml.GNamespace */
    parentInstance: GObject.Object
    priv: GNamespacePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNamespace */
    getInternalNs(): object | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Virtual methods of GXml.GNamespace */
    vfuncGetUri(): string | null
    vfuncGetPrefix(): string | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: GNamespace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNamespace_ConstructProps)
    _init (config?: GNamespace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(ns?: object | null): GNamespace
    static $gtype: GObject.Type
}
export interface GNode_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class GNode {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GXml.GNode */
    parentInstance: GObject.Object
    priv: GNodePrivate
    doc: GDocument
    node: object | null
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    nsPrefix(): string
    nsUri(): string
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: GNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNode_ConstructProps)
    _init (config?: GNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static toGnode(doc: GDocument, node?: object | null): Node
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface GProcessingInstruction_ConstructProps extends GCharacterData_ConstructProps {
    data?: string
}
export class GProcessingInstruction {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Properties of GXml.DomCharacterData */
    readonly length: number
    /* Fields of GXml.GProcessingInstruction */
    parentInstance: GCharacterData
    priv: GProcessingInstructionPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getLength(): number
    /* Virtual methods of GXml.GProcessingInstruction */
    vfuncGetTarget(): string
    vfuncGetData(): string
    vfuncSetData(value: string): void
    /* Virtual methods of GXml.GCharacterData */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GProcessingInstruction_ConstructProps)
    _init (config?: GProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GProcessingInstruction
    static new(): GProcessingInstruction
    static $gtype: GObject.Type
}
export interface GText_ConstructProps extends GCharacterData_ConstructProps {
    str?: string
    data?: string
}
export class GText {
    /* Properties of GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml.Text */
    str: string
    /* Properties of GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GText */
    parentInstance: GCharacterData
    priv: GTextPrivate
    /* Fields of GXml.GNode */
    doc: GDocument
    node: object | null
    baseUri: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GText */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    vfuncSplitText(offset: number): DomText
    vfuncGetWholeText(): string
    /* Virtual methods of GXml.GCharacterData */
    vfuncGetStr(): string
    vfuncSetStr(value: string): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GNonDocumentChildNode */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    /* Virtual methods of GXml.GChildNode */
    vfuncRemove(): void
    /* Virtual methods of GXml.GNode */
    vfuncSetNamespace(uri: string, prefix?: string | null): boolean
    vfuncToString(): string
    vfuncGetAttrs(): Gee.Map
    vfuncGetChildrenNodes(): Gee.BidirList
    vfuncGetNamespaces(): Gee.List
    vfuncGetDocument(): Document
    vfuncGetParent(): Node
    vfuncGetTypeNode(): NodeType
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    vfuncGet(key: string): Node | null
    vfuncGetElementsByPropertyValue(property: string, value: string): ElementList
    vfuncGetElementsByName(name: string): ElementList
    vfuncGetElementsByNameNs(name: string, ns?: string | null): ElementList
    vfuncNsPrefix(): string
    vfuncNsUri(): string
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GText_ConstructProps)
    _init (config?: GText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GText
    static new(): GText
    static $gtype: GObject.Type
}
export interface GHashMapAttr_ConstructProps extends Gee.AbstractMap_ConstructProps {
}
export class GHashMapAttr {
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GXml.GHashMapAttr */
    parentInstance: Gee.AbstractMap
    priv: GHashMapAttrPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Virtual methods of GXml.GHashMapAttr */
    vfuncItem(index: number): DomNode | null
    vfuncGetNamedItem(name: string): DomNode | null
    vfuncSetNamedItem(node: DomNode): DomNode | null
    vfuncRemoveNamedItem(name: string): DomNode | null
    vfuncRemoveNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncGetNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncSetNamedItemNs(node: DomNode): DomNode | null
    vfuncGetLength(): number
    /* Virtual methods of Gee.AbstractMap */
    vfuncHasKey(key?: object | null): boolean
    vfuncHas(key?: object | null, value?: object | null): boolean
    vfuncGet(key?: object | null): object | null
    vfuncSet(key?: object | null, value?: object | null): void
    vfuncUnset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfuncMapIterator(): Gee.MapIterator
    vfuncClear(): void
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetKeys(): Gee.Set
    vfuncGetValues(): Gee.Collection
    vfuncGetEntries(): Gee.Set
    vfuncGetReadOnlyView(): Gee.Map
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncIterator(): Gee.Iterator
    vfuncSetAll(map: Gee.Map): void
    vfuncUnsetAll(map: Gee.Map): boolean
    vfuncHasAll(map: Gee.Map): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GHashMapAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttr_ConstructProps)
    _init (config?: GHashMapAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GHashMapAttr
    static $gtype: GObject.Type
}
export interface GHashMapAttrEntry_ConstructProps extends Gee.MapEntry_ConstructProps {
}
export class GHashMapAttrEntry {
    /* Properties of Gee.MapEntry */
    readonly key: object
    value: object
    readonly readOnly: boolean
    /* Fields of GXml.GHashMapAttrEntry */
    parentInstance: Gee.MapEntry
    priv: GHashMapAttrEntryPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.MapEntry */
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    getReadOnly(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of Gee.MapEntry */
    vfuncGetKey(): object | null
    vfuncGetValue(): object | null
    vfuncSetValue(value?: object | null): void
    vfuncGetReadOnly(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GHashMapAttrEntry, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttrEntry_ConstructProps)
    _init (config?: GHashMapAttrEntry_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, attr?: object | null): GHashMapAttrEntry
    static $gtype: GObject.Type
}
export interface GHashMapAttrIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class GHashMapAttrIterator {
    /* Properties of Gee.MapIterator */
    readonly valid: boolean
    readonly mutable: boolean
    readonly readOnly: boolean
    /* Fields of GXml.GHashMapAttrIterator */
    parentInstance: GObject.Object
    priv: GHashMapAttrIteratorPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee.MapIterator */
    next(): boolean
    hasNext(): boolean
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    unset(): void
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldMapFunc, seed?: object | null): object | null
    foreach(f: Gee.ForallMapFunc): boolean
    getValid(): boolean
    getMutable(): boolean
    getReadOnly(): boolean
    /* Virtual methods of GXml.GHashMapAttrIterator */
    vfuncNext(): boolean
    vfuncHasNext(): boolean
    vfuncGetKey(): object | null
    vfuncGetValue(): object | null
    vfuncSetValue(value?: object | null): void
    vfuncUnset(): void
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldMapFunc, seed?: object | null): object | null
    vfuncForeach(f: Gee.ForallMapFunc): boolean
    vfuncGetValid(): boolean
    vfuncGetMutable(): boolean
    vfuncGetReadOnly(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valid", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mutable", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mutable", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GHashMapAttrIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttrIterator_ConstructProps)
    _init (config?: GHashMapAttrIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GHashMapAttrIterator
    static $gtype: GObject.Type
}
export interface GListChildren_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
export class GListChildren {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of GXml.GListChildren */
    parentInstance: Gee.AbstractBidirList
    priv: GListChildrenPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Virtual methods of GXml.GListChildren */
    vfuncItem(index: number): DomNode | null
    vfuncItem(index: number): DomElement | null
    vfuncGetLength(): number
    vfuncGetElement(index: number): DomElement | null
    vfuncToArray(): DomElement[]
    vfuncToArray(): object[]
    vfuncNamedItem(name: string): DomElement | null
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GListChildren, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListChildren_ConstructProps)
    _init (config?: GListChildren_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListChildren
    static $gtype: GObject.Type
}
export interface GListChildrenIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class GListChildrenIterator {
    /* Properties of Gee.Iterator */
    readonly valid: boolean
    readonly readOnly: boolean
    /* Fields of GXml.GListChildrenIterator */
    parentInstance: GObject.Object
    priv: GListChildrenIteratorPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee.Iterator */
    next(): boolean
    hasNext(): boolean
    get(): object | null
    remove(): void
    getValid(): boolean
    getReadOnly(): boolean
    /* Methods of Gee.BidirIterator */
    previous(): boolean
    hasPrevious(): boolean
    first(): boolean
    last(): boolean
    /* Methods of Gee.ListIterator */
    set(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Methods of Gee.BidirListIterator */
    insert(item?: object | null): void
    /* Virtual methods of GXml.GListChildrenIterator */
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncNext(): boolean
    vfuncHasNext(): boolean
    vfuncGet(): object | null
    vfuncRemove(): void
    vfuncGetValid(): boolean
    vfuncGetReadOnly(): boolean
    vfuncPrevious(): boolean
    vfuncHasPrevious(): boolean
    vfuncFirst(): boolean
    vfuncLast(): boolean
    vfuncSet(item?: object | null): void
    vfuncAdd(item?: object | null): void
    vfuncIndex(): number
    vfuncInsert(item?: object | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valid", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GListChildrenIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListChildrenIterator_ConstructProps)
    _init (config?: GListChildrenIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListChildrenIterator
    static unfold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.UnfoldFunc, current?: Gee.Lazy | null): Gee.Iterator
    static concat(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, iters: Gee.Iterator): Gee.Iterator
    static $gtype: GObject.Type
}
export interface GListNamespaces_ConstructProps extends Gee.AbstractList_ConstructProps {
}
export class GListNamespaces {
    /* Properties of Gee.AbstractList */
    readonly readOnlyView: Gee.List
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GXml.GListNamespaces */
    parentInstance: Gee.AbstractList
    priv: GListNamespacesPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GListNamespaces */
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GListNamespaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListNamespaces_ConstructProps)
    _init (config?: GListNamespaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListNamespaces
    static $gtype: GObject.Type
}
export interface GListNamespacesIterator_ConstructProps extends GObject.Object_ConstructProps {
}
export class GListNamespacesIterator {
    /* Properties of Gee.Iterator */
    readonly valid: boolean
    readonly readOnly: boolean
    /* Fields of GXml.GListNamespacesIterator */
    parentInstance: GObject.Object
    priv: GListNamespacesIteratorPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee.Iterator */
    next(): boolean
    hasNext(): boolean
    get(): object | null
    remove(): void
    getValid(): boolean
    getReadOnly(): boolean
    /* Methods of Gee.ListIterator */
    set(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Virtual methods of GXml.GListNamespacesIterator */
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncNext(): boolean
    vfuncHasNext(): boolean
    vfuncGet(): object | null
    vfuncRemove(): void
    vfuncGetValid(): boolean
    vfuncGetReadOnly(): boolean
    vfuncSet(item?: object | null): void
    vfuncAdd(item?: object | null): void
    vfuncIndex(): number
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valid", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GListNamespacesIterator, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListNamespacesIterator_ConstructProps)
    _init (config?: GListNamespacesIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node?: object | null): GListNamespacesIterator
    static unfold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.UnfoldFunc, current?: Gee.Lazy | null): Gee.Iterator
    static concat(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, iters: Gee.Iterator): Gee.Iterator
    static $gtype: GObject.Type
}
export interface DomNodeFilter_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomNodeFilter {
    /* Fields of GXml.DomNodeFilter */
    parentInstance: GObject.Object
    priv: DomNodeFilterPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomNodeFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomNodeFilter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeFilter_ConstructProps)
    _init (config?: DomNodeFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomNodeFilter
    static $gtype: GObject.Type
}
export interface DomElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class DomElementList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of GXml.DomElementList */
    parentInstance: Gee.ArrayList
    priv: DomElementListPrivate
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Virtual methods of GXml.DomElementList */
    vfuncGetElement(index: number): DomElement | null
    vfuncToArray(): DomElement[]
    vfuncToArray(): object[]
    vfuncItem(index: number): DomElement | null
    vfuncNamedItem(name: string): DomElement | null
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: DomElementList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElementList_ConstructProps)
    _init (config?: DomElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomElementList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): DomElementList
    static $gtype: GObject.Type
}
export interface DomEventInit_ConstructProps extends GObject.Object_ConstructProps {
    bubbles?: boolean
    cancelable?: boolean
}
export class DomEventInit {
    /* Properties of GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GXml.DomEventInit */
    parentInstance: GObject.Object
    priv: DomEventInitPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventInit_ConstructProps)
    _init (config?: DomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomEventInit
    static $gtype: GObject.Type
}
export interface DomCustomEventInit_ConstructProps extends DomEventInit_ConstructProps {
    detail?: any
}
export class DomCustomEventInit {
    /* Properties of GXml.DomCustomEventInit */
    detail: any
    /* Properties of GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GXml.DomCustomEventInit */
    parentInstance: DomEventInit
    priv: DomCustomEventInitPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomCustomEventInit */
    getDetail(): any
    setDetail(value?: any): void
    /* Methods of GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: DomCustomEventInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEventInit_ConstructProps)
    _init (config?: DomCustomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomCustomEventInit
    static $gtype: GObject.Type
}
export interface DomTimeStamp_ConstructProps extends GObject.Object_ConstructProps {
    time?: GLib.DateTime
}
export class DomTimeStamp {
    /* Properties of GXml.DomTimeStamp */
    time: GLib.DateTime
    /* Fields of GXml.DomTimeStamp */
    parentInstance: GObject.Object
    priv: DomTimeStampPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomTimeStamp */
    toString(): string
    getTime(): GLib.DateTime
    setTime(value: GLib.DateTime): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time", callback: (($obj: DomTimeStamp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTimeStamp_ConstructProps)
    _init (config?: DomTimeStamp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomTimeStamp
    static $gtype: GObject.Type
}
export interface DomMutationObserverInit_ConstructProps extends GObject.Object_ConstructProps {
    childList?: boolean
    attributes?: boolean
    characterData?: boolean
    subtree?: boolean
    attributeOldValue?: boolean
    characterDataOldValue?: boolean
    attributeFilter?: Gee.List
}
export class DomMutationObserverInit {
    /* Properties of GXml.DomMutationObserverInit */
    childList: boolean
    attributes: boolean
    characterData: boolean
    subtree: boolean
    attributeOldValue: boolean
    characterDataOldValue: boolean
    attributeFilter: Gee.List
    /* Fields of GXml.DomMutationObserverInit */
    parentInstance: GObject.Object
    priv: DomMutationObserverInitPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomMutationObserverInit */
    getChildList(): boolean
    setChildList(value: boolean): void
    getAttributes(): boolean
    setAttributes(value: boolean): void
    getCharacterData(): boolean
    setCharacterData(value: boolean): void
    getSubtree(): boolean
    setSubtree(value: boolean): void
    getAttributeOldValue(): boolean
    setAttributeOldValue(value: boolean): void
    getCharacterDataOldValue(): boolean
    setCharacterDataOldValue(value: boolean): void
    getAttributeFilter(): Gee.List
    setAttributeFilter(value: Gee.List): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-list", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtree", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data-old-value", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-filter", callback: (($obj: DomMutationObserverInit, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserverInit_ConstructProps)
    _init (config?: DomMutationObserverInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomMutationObserverInit
    static $gtype: GObject.Type
}
export interface DomErrorName_ConstructProps extends GObject.Object_ConstructProps {
}
export class DomErrorName {
    /* Fields of GXml.DomErrorName */
    parentInstance: GObject.Object
    priv: DomErrorNamePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.DomErrorName */
    getName(errorCode: number): string
    getCode(errorName: string): number
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DomErrorName, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DomErrorName, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomErrorName_ConstructProps)
    _init (config?: DomErrorName_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomErrorName
    static $gtype: GObject.Type
}
export interface GXPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
export class GXPathObject {
    /* Properties of GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GXml.GXPathObject */
    parentInstance: GObject.Object
    priv: GXPathObjectPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Virtual methods of GXml.GXPathObject */
    vfuncGetObjectType(): XPathObjectType
    vfuncGetBooleanValue(): boolean
    vfuncGetStringValue(): string
    vfuncGetNumberValue(): number
    vfuncGetNodeset(): DomHTMLCollection
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: (($obj: GXPathObject, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GXPathObject_ConstructProps)
    _init (config?: GXPathObject_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(document: GDocument, pointer?: object | null): GXPathObject
    static $gtype: GObject.Type
}
export interface GomDocument_ConstructProps extends GomNode_ConstructProps {
}
export class GomDocument {
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Fields of GXml.GomDocument */
    parentInstance: GomNode
    priv: GomDocumentPrivate
    constructor: DomEvent
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomDocument */
    writeFile(file: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    writeString(): string
    readFromFile(file: Gio.File): void
    readFromString(str: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Virtual methods of GXml.GomDocument */
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetElementById(elementId: string): DomElement | null
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncCreateElement(localName: string): DomElement
    vfuncCreateElementNs(namespace: string | null, qualifiedName: string): DomElement
    vfuncCreateDocumentFragment(): DomDocumentFragment
    vfuncCreateTextNode(data: string): DomText
    vfuncCreateComment(data: string): DomComment
    vfuncCreateProcessingInstruction(target: string, data: string): DomProcessingInstruction
    vfuncImportNode(node: DomNode, deep: boolean): DomNode
    vfuncAdoptNode(node: DomNode): DomNode
    vfuncCreateEvent(interface: string): DomEvent
    vfuncCreateRange(): DomRange
    vfuncCreateNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    vfuncCreateTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    vfuncGetImplementation(): DomImplementation
    vfuncGetUrl(): string
    vfuncGetDocumentUri(): string
    vfuncGetOrigin(): string
    vfuncGetCompatMode(): string
    vfuncGetCharacterSet(): string
    vfuncGetContentType(): string
    vfuncGetDoctype(): DomDocumentType | null
    vfuncGetDocumentElement(): DomElement | null
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: (($obj: GomDocument, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocument_ConstructProps)
    _init (config?: GomDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDocument
    static fromPath(path: string): GomDocument
    static fromUri(uri: string): GomDocument
    static fromFile(file: Gio.File): GomDocument
    static fromStream(stream: Gio.InputStream): GomDocument
    static fromString(str: string): GomDocument
    static $gtype: GObject.Type
}
export interface GomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
export class GomImplementation {
    /* Fields of GXml.GomImplementation */
    parentInstance: GObject.Object
    priv: GomImplementationPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Virtual methods of GXml.GomImplementation */
    vfuncCreateDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    vfuncCreateDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    vfuncCreateHtmlDocument(title: string): Document
    vfuncHasFeature(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomImplementation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomImplementation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomImplementation_ConstructProps)
    _init (config?: GomImplementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomImplementation
    static $gtype: GObject.Type
}
export interface GomDocumentType_ConstructProps extends GomNode_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class GomDocumentType {
    /* Properties of GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Fields of GXml.GomDocumentType */
    parentInstance: GomNode
    priv: GomDocumentTypePrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    parent: DomNode
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Virtual methods of GXml.GomDocumentType */
    vfuncRemove(): void
    vfuncGetName(): string
    vfuncGetPublicId(): string
    vfuncGetSystemId(): string
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: (($obj: GomDocumentType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocumentType_ConstructProps)
    _init (config?: GomDocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withName(doc: DomDocument, name: string): GomDocumentType
    static withIds(doc: DomDocument, name: string, publicId: string, systemId: string): GomDocumentType
    static new(): GomDocumentType
    static $gtype: GObject.Type
}
export interface GomDocumentFragment_ConstructProps extends GomNode_ConstructProps {
}
export class GomDocumentFragment {
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GXml.GomDocumentFragment */
    parentInstance: GomNode
    priv: GomDocumentFragmentPrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Virtual methods of GXml.GomDocumentFragment */
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetElementById(elementId: string): DomElement | null
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: GomDocumentFragment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocumentFragment_ConstructProps)
    _init (config?: GomDocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): GomDocumentFragment
    static new(): GomDocumentFragment
    static $gtype: GObject.Type
}
export interface GomElement_ConstructProps extends GomNode_ConstructProps {
    parseChildren?: boolean
    unparsed?: string
    id?: string
    className?: string
}
export class GomElement {
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Fields of GXml.GomElement */
    parentInstance: GomNode
    priv: GomElementPrivate
    /* Fields of GXml.GomNode */
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml.GomObject */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(pname: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: GomElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomElement_ConstructProps)
    _init (config?: GomElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomElement
    static $gtype: GObject.Type
}
export interface GomElementAttributes_ConstructProps extends Gee.HashMap_ConstructProps {
}
export class GomElementAttributes {
    /* Properties of Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GXml.GomElementAttributes */
    parentInstance: Gee.HashMap
    priv: GomElementAttributesPrivate
    element: GomElement
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.HashMap */
    getKeyHashFunc(): [ /* returnType */ Gee.HashDataFunc, /* resultTarget */ object | null ]
    getKeyEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Virtual methods of GXml.GomElementAttributes */
    vfuncItem(index: number): DomNode | null
    vfuncGetNamedItem(name: string): DomNode | null
    vfuncSetNamedItem(node: DomNode): DomNode | null
    vfuncRemoveNamedItem(name: string): DomNode | null
    vfuncRemoveNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncGetNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    vfuncSetNamedItemNs(node: DomNode): DomNode | null
    vfuncGetLength(): number
    /* Virtual methods of Gee.AbstractMap */
    vfuncHasKey(key?: object | null): boolean
    vfuncHas(key?: object | null, value?: object | null): boolean
    vfuncGet(key?: object | null): object | null
    vfuncSet(key?: object | null, value?: object | null): void
    vfuncUnset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    vfuncMapIterator(): Gee.MapIterator
    vfuncClear(): void
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetKeys(): Gee.Set
    vfuncGetValues(): Gee.Collection
    vfuncGetEntries(): Gee.Set
    vfuncGetReadOnlyView(): Gee.Map
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncIterator(): Gee.Iterator
    vfuncSetAll(map: Gee.Map): void
    vfuncUnsetAll(map: Gee.Map): boolean
    vfuncHasAll(map: Gee.Map): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomElementAttributes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomElementAttributes_ConstructProps)
    _init (config?: GomElementAttributes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: GomElement): GomElementAttributes
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): GomElementAttributes
    static $gtype: GObject.Type
}
export interface GomAttr_ConstructProps extends GomNode_ConstructProps {
    value?: string
}
export class GomAttr {
    /* Properties of GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly name: string
    value: string
    readonly specified: boolean
    /* Fields of GXml.GomAttr */
    parentInstance: GomNode
    priv: GomAttrPrivate
    /* Fields of GXml.GomNode */
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Virtual methods of GXml.GomAttr */
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetName(): string
    vfuncGetValue(): string
    vfuncSetValue(value: string): void
    vfuncGetSpecified(): boolean
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: (($obj: GomAttr, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomAttr_ConstructProps)
    _init (config?: GomAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: DomElement, name: string, value: string): GomAttr
    static new(): GomAttr
    static namespace(element: DomElement, namespaceUri: string, prefix: string | null, name: string, value: string): GomAttr
    static $gtype: GObject.Type
}
export interface GomNode_ConstructProps extends GObject.Object_ConstructProps {
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
export class GomNode {
    /* Properties of GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GXml.GomNode */
    parentInstance: GObject.Object
    priv: GomNodePrivate
    localName: string
    prefix: string
    parent: DomNode
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: (($obj: GomNode, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomNode_ConstructProps)
    _init (config?: GomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomNode
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
export interface GomNodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
export class GomNodeList {
    /* Properties of Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml.DomNodeList */
    readonly length: number
    /* Fields of GXml.GomNodeList */
    parentInstance: Gee.ArrayList
    priv: GomNodeListPrivate
    /* Fields of Gee.ArrayList */
    items: object[]
    itemsLength1: number
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Virtual methods of GXml.GomNodeList */
    vfuncItem(index: number): DomNode | null
    vfuncGetLength(): number
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.ArrayList */
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractBidirList */
    vfuncBidirListIterator(): Gee.BidirListIterator
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.BidirList
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    /* Virtual methods of Gee.AbstractList */
    vfuncListIterator(): Gee.ListIterator
    vfuncGet(index: number): object | null
    vfuncSet(index: number, item?: object | null): void
    vfuncIndexOf(item?: object | null): number
    vfuncInsert(index: number, item?: object | null): void
    vfuncRemoveAt(index: number): object | null
    vfuncSlice(start: number, stop: number): Gee.List | null
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetReadOnlyView(): Gee.List
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncFirst(): object | null
    vfuncLast(): object | null
    vfuncInsertAll(index: number, collection: Gee.Collection): void
    vfuncSort(compareFunc: GLib.CompareDataFunc | null): void
    /* Virtual methods of Gee.AbstractCollection */
    vfuncContains(item?: object | null): boolean
    vfuncAdd(item?: object | null): boolean
    vfuncRemove(item?: object | null): boolean
    vfuncClear(): void
    vfuncIterator(): Gee.Iterator
    vfuncForeach(f: Gee.ForallFunc): boolean
    vfuncReserved0(): void
    vfuncReserved1(): void
    vfuncReserved2(): void
    vfuncReserved3(): void
    vfuncReserved4(): void
    vfuncReserved5(): void
    vfuncReserved6(): void
    vfuncReserved7(): void
    vfuncReserved8(): void
    vfuncReserved9(): void
    vfuncGetSize(): number
    vfuncGetReadOnly(): boolean
    vfuncGetReadOnlyView(): Gee.Collection
    vfuncStream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    vfuncFold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    vfuncMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    vfuncScan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    vfuncFilter(pred: Gee.Predicate): Gee.Iterator
    vfuncChop(offset: number, length: number): Gee.Iterator
    vfuncFlatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    vfuncTee(forks: number): Gee.Iterator[]
    vfuncFirstMatch(pred: Gee.Predicate): object | null
    vfuncAnyMatch(pred: Gee.Predicate): boolean
    vfuncAllMatch(pred: Gee.Predicate): boolean
    vfuncMax(compare: GLib.CompareDataFunc): object | null
    vfuncMin(compare: GLib.CompareDataFunc): object | null
    vfuncOrderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    vfuncGetElementType(): GObject.Type
    vfuncAddAll(collection: Gee.Collection): boolean
    vfuncContainsAll(collection: Gee.Collection): boolean
    vfuncRemoveAll(collection: Gee.Collection): boolean
    vfuncRetainAll(collection: Gee.Collection): boolean
    vfuncToArray(): object[]
    vfuncAddAllArray(array: object[]): boolean
    vfuncContainsAllArray(array: object[]): boolean
    vfuncRemoveAllArray(array: object[]): boolean
    vfuncAddAllIterator(iter: Gee.Iterator): boolean
    vfuncContainsAllIterator(iter: Gee.Iterator): boolean
    vfuncRemoveAllIterator(iter: Gee.Iterator): boolean
    vfuncGetIsEmpty(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomNodeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomNodeList_ConstructProps)
    _init (config?: GomNodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomNodeList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GomNodeList
    static $gtype: GObject.Type
}
export interface GomCharacterData_ConstructProps extends GomNode_ConstructProps {
    data?: string
}
export class GomCharacterData {
    /* Properties of GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GomCharacterData */
    parentInstance: GomNode
    priv: GomCharacterDataPrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml.DomChildNode */
    remove(): void
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GomCharacterData */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncRemove(): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomCharacterData, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomCharacterData_ConstructProps)
    _init (config?: GomCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomCharacterData
    static $gtype: GObject.Type
}
export interface GomText_ConstructProps extends GomCharacterData_ConstructProps {
    data?: string
}
export class GomText {
    /* Properties of GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GomText */
    parentInstance: GomCharacterData
    priv: GomTextPrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GomText */
    vfuncSplitText(offset: number): DomText
    vfuncGetWholeText(): string
    /* Virtual methods of GXml.GomCharacterData */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncRemove(): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomText, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomText_ConstructProps)
    _init (config?: GomText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): GomText
    static new(): GomText
    static $gtype: GObject.Type
}
export interface GomProcessingInstruction_ConstructProps extends GomCharacterData_ConstructProps {
    data?: string
}
export class GomProcessingInstruction {
    /* Properties of GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GomProcessingInstruction */
    parentInstance: GomCharacterData
    priv: GomProcessingInstructionPrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GomProcessingInstruction */
    vfuncGetTarget(): string
    /* Virtual methods of GXml.GomCharacterData */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncRemove(): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomProcessingInstruction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomProcessingInstruction_ConstructProps)
    _init (config?: GomProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, target: string, data: string): GomProcessingInstruction
    static new(): GomProcessingInstruction
    static $gtype: GObject.Type
}
export interface GomComment_ConstructProps extends GomCharacterData_ConstructProps {
    data?: string
}
export class GomComment {
    /* Properties of GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Fields of GXml.GomComment */
    parentInstance: GomCharacterData
    priv: GomCommentPrivate
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Virtual methods of GXml.GomCharacterData */
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncRemove(): void
    vfuncSubstringData(offset: number, count: number): string
    vfuncAppendData(data: string): void
    vfuncInsertData(offset: number, data: string): void
    vfuncDeleteData(offset: number, count: number): void
    vfuncReplaceData(offset: number, count: number, data: string): void
    vfuncGetData(): string
    vfuncSetData(value: string): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomComment, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomComment_ConstructProps)
    _init (config?: GomComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): GomComment
    static new(): GomComment
    static $gtype: GObject.Type
}
export interface BaseCollection_ConstructProps extends GObject.Object_ConstructProps {
    itemsType?: GObject.Type
    element?: GomElement
}
export class BaseCollection {
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.BaseCollection */
    parentInstance: GObject.Object
    priv: BaseCollectionPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: BaseCollection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BaseCollection_ConstructProps)
    _init (config?: BaseCollection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GomArrayList_ConstructProps extends BaseCollection_ConstructProps {
    element?: GomElement
    itemsType?: GObject.Type
}
export class GomArrayList {
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Properties of GXml.GomCollection */
    readonly length: number
    /* Fields of GXml.GomArrayList */
    parentInstance: BaseCollection
    priv: GomArrayListPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.GomCollection */
    getItem(index: number): DomElement | null
    initialize(t: GObject.Type): void
    createItem(): GomElement | null
    getLength(): number
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomArrayList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomArrayList_ConstructProps)
    _init (config?: GomArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomArrayList
    static $gtype: GObject.Type
}
export interface GomHashMap_ConstructProps extends BaseCollection_ConstructProps {
    attributeKey?: string
    element?: GomElement
    itemsType?: GObject.Type
}
export class GomHashMap {
    /* Properties of GXml.GomHashMap */
    attributeKey: string
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Properties of GXml.GomCollection */
    readonly length: number
    /* Fields of GXml.GomHashMap */
    parentInstance: BaseCollection
    priv: GomHashMapPrivate
    hashtable: GLib.HashTable
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomHashMap */
    initializeElementWithKey(element: GomElement, itemsType: GObject.Type, attributeKey: string): void
    initializeWithKey(itemsType: GObject.Type, attributeKey: string): void
    get(key: string): DomElement | null
    hasKey(key: string): boolean
    getKeys(): string[]
    getAttributeKey(): string
    setAttributeKey(value: string): void
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.GomCollection */
    getItem(index: number): DomElement | null
    initialize(t: GObject.Type): void
    createItem(): GomElement | null
    getLength(): number
    /* Virtual methods of GXml.GomHashMap */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-key", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomHashMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashMap_ConstructProps)
    _init (config?: GomHashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashMap
    static $gtype: GObject.Type
}
export interface GomHashPairedMap_ConstructProps extends BaseCollection_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    element?: GomElement
    itemsType?: GObject.Type
}
export class GomHashPairedMap {
    /* Properties of GXml.GomHashPairedMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Properties of GXml.GomCollection */
    readonly length: number
    /* Fields of GXml.GomHashPairedMap */
    parentInstance: BaseCollection
    priv: GomHashPairedMapPrivate
    hashtable: GLib.HashTable
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomHashPairedMap */
    initializeElementWithKeys(element: GomElement, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    get(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.GomCollection */
    getItem(index: number): DomElement | null
    initialize(t: GObject.Type): void
    createItem(): GomElement | null
    getLength(): number
    /* Virtual methods of GXml.GomHashPairedMap */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomHashPairedMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashPairedMap_ConstructProps)
    _init (config?: GomHashPairedMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashPairedMap
    static $gtype: GObject.Type
}
export interface GomHashThreeMap_ConstructProps extends BaseCollection_ConstructProps {
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    attributeThirdKey?: string
    element?: GomElement
    itemsType?: GObject.Type
}
export class GomHashThreeMap {
    /* Properties of GXml.GomHashThreeMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    attributeThirdKey: string
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Properties of GXml.GomCollection */
    readonly length: number
    /* Fields of GXml.GomHashThreeMap */
    parentInstance: BaseCollection
    priv: GomHashThreeMapPrivate
    hashtable: GLib.HashTable
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomHashThreeMap */
    initializeElementWithKeys(element: GomElement, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    get(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getThirdKeys(pkey: string, skey: string): string[]
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.GomCollection */
    getItem(index: number): DomElement | null
    initialize(t: GObject.Type): void
    createItem(): GomElement | null
    getLength(): number
    /* Virtual methods of GXml.GomHashThreeMap */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-primary-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-third-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomHashThreeMap, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashThreeMap_ConstructProps)
    _init (config?: GomHashThreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashThreeMap
    static $gtype: GObject.Type
}
export interface GomBaseProperty_ConstructProps extends GObject.Object_ConstructProps {
    value?: string
}
export class GomBaseProperty {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomBaseProperty */
    parentInstance: GObject.Object
    priv: GomBasePropertyPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomBaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomBaseProperty, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomBaseProperty, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomBaseProperty, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomBaseProperty_ConstructProps)
    _init (config?: GomBaseProperty_ConstructProps): void
    static $gtype: GObject.Type
}
export interface GomString_ConstructProps extends GomBaseProperty_ConstructProps {
}
export class GomString {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomString */
    parentInstance: GomBaseProperty
    priv: GomStringPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomString, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomString_ConstructProps)
    _init (config?: GomString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomString
    static $gtype: GObject.Type
}
export interface GomArrayString_ConstructProps extends GomBaseProperty_ConstructProps {
}
export class GomArrayString {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomArrayString */
    parentInstance: GomBaseProperty
    priv: GomArrayStringPrivate
    values: string[]
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomArrayString, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomArrayString_ConstructProps)
    _init (config?: GomArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomArrayString
    static $gtype: GObject.Type
}
export interface GomXsdArrayString_ConstructProps extends GomArrayString_ConstructProps {
    simpleType?: string
    source?: Gio.File
}
export class GomXsdArrayString {
    /* Properties of GXml.GomXsdArrayString */
    simpleType: string
    source: Gio.File
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomXsdArrayString */
    parentInstance: GomArrayString
    priv: GomXsdArrayStringPrivate
    /* Fields of GXml.GomArrayString */
    values: string[]
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdArrayString */
    load(): void
    getSimpleType(): string
    setSimpleType(value: string): void
    getSource(): Gio.File
    setSource(value: Gio.File): void
    /* Methods of GXml.GomArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::source", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomXsdArrayString, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdArrayString_ConstructProps)
    _init (config?: GomXsdArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdArrayString
    static $gtype: GObject.Type
}
export interface GomDouble_ConstructProps extends GomBaseProperty_ConstructProps {
    decimals?: number
}
export class GomDouble {
    /* Properties of GXml.GomDouble */
    decimals: number
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomDouble */
    parentInstance: GomBaseProperty
    priv: GomDoublePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomDouble */
    getDouble(): number
    setDouble(value: number): void
    getDecimals(): number
    setDecimals(value: number): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::decimals", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomDouble, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDouble_ConstructProps)
    _init (config?: GomDouble_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDouble
    static $gtype: GObject.Type
}
export interface GomFloat_ConstructProps extends GomDouble_ConstructProps {
}
export class GomFloat {
    /* Properties of GXml.GomDouble */
    decimals: number
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomFloat */
    parentInstance: GomDouble
    priv: GomFloatPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomFloat */
    getFloat(): number
    setFloat(value: number): void
    /* Methods of GXml.GomDouble */
    getDouble(): number
    setDouble(value: number): void
    getDecimals(): number
    setDecimals(value: number): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::decimals", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomFloat, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomFloat_ConstructProps)
    _init (config?: GomFloat_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomFloat
    static $gtype: GObject.Type
}
export interface GomInt_ConstructProps extends GomBaseProperty_ConstructProps {
}
export class GomInt {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomInt */
    parentInstance: GomBaseProperty
    priv: GomIntPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomInt */
    getInteger(): number
    setInteger(value: number): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomInt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomInt, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomInt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomInt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomInt_ConstructProps)
    _init (config?: GomInt_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomInt
    static $gtype: GObject.Type
}
export interface GomBoolean_ConstructProps extends GomBaseProperty_ConstructProps {
}
export class GomBoolean {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomBoolean */
    parentInstance: GomBaseProperty
    priv: GomBooleanPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomBoolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomBoolean, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomBoolean, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomBoolean, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomBoolean, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomBoolean_ConstructProps)
    _init (config?: GomBoolean_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomBoolean
    static $gtype: GObject.Type
}
export interface GomEnum_ConstructProps extends GomBaseProperty_ConstructProps {
    enumType?: GObject.Type
}
export class GomEnum {
    /* Properties of GXml.GomEnum */
    enumType: GObject.Type
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomEnum */
    parentInstance: GomBaseProperty
    priv: GomEnumPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomEnum */
    initializeEnum(enumType: GObject.Type): void
    getEnum(): number
    setEnum(value: number): void
    getEnumType(): GObject.Type
    setEnumType(value: GObject.Type): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enum-type", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enum-type", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomEnum, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomEnum_ConstructProps)
    _init (config?: GomEnum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomEnum
    static $gtype: GObject.Type
}
export interface GomDate_ConstructProps extends GomBaseProperty_ConstructProps {
}
export class GomDate {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomDate */
    parentInstance: GomBaseProperty
    priv: GomDatePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomDate */
    getDate(): /* result */ GLib.Date
    setDate(date: GLib.Date): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDate, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomDate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomDate, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDate_ConstructProps)
    _init (config?: GomDate_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDate
    static $gtype: GObject.Type
}
export interface GomDateTime_ConstructProps extends GomBaseProperty_ConstructProps {
    format?: string
}
export class GomDateTime {
    /* Properties of GXml.GomDateTime */
    format: string
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomDateTime */
    parentInstance: GomBaseProperty
    priv: GomDateTimePrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomDateTime */
    getDatetime(): GLib.DateTime
    setDatetime(dt: GLib.DateTime): void
    getFormat(): string
    setFormat(value: string): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::format", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::format", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomDateTime, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDateTime_ConstructProps)
    _init (config?: GomDateTime_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDateTime
    static $gtype: GObject.Type
}
export interface XParser_ConstructProps extends GObject.Object_ConstructProps {
    backup?: boolean
    indent?: boolean
}
export class XParser {
    /* Properties of GXml.Parser */
    backup: boolean
    indent: boolean
    readonly node: DomNode
    /* Fields of GXml.XParser */
    parentInstance: GObject.Object
    priv: XParserPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.XParser */
    createStream(cancellable?: Gio.Cancellable | null): Gio.InputStream
    readChildNodesStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readChildNodesString(str: string, cancellable?: Gio.Cancellable | null): void
    readNode(node: DomNode): void
    readUnparsed(): string
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    readChildNodes(parent: DomNode): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of GXml.Parser */
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeString(): string
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readString(str: string, cancellable?: Gio.Cancellable | null): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getNode(): DomNode
    /* Virtual methods of GXml.XParser */
    vfuncWriteFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfuncWriteString(): string
    vfuncWriteStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    vfuncReadFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    vfuncReadStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    vfuncReadString(str: string, cancellable?: Gio.Cancellable | null): void
    vfuncGetBackup(): boolean
    vfuncSetBackup(value: boolean): void
    vfuncGetIndent(): boolean
    vfuncSetIndent(value: boolean): void
    vfuncGetNode(): DomNode
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: (($obj: XParser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XParser_ConstructProps)
    _init (config?: XParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node: DomNode): XParser
    static $gtype: GObject.Type
}
export interface GomXsdSchema_ConstructProps extends GomElement_ConstructProps {
    elementDefinitions?: GomXsdListElements
    simpleTypeDefinitions?: GomXsdListSimpleTypes
    complexTypeDefinitions?: GomXsdListComplexTypes
}
export class GomXsdSchema {
    /* Properties of GXml.GomXsdSchema */
    elementDefinitions: GomXsdListElements
    simpleTypeDefinitions: GomXsdListSimpleTypes
    complexTypeDefinitions: GomXsdListComplexTypes
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdSchema */
    parentInstance: GomElement
    priv: GomXsdSchemaPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdSchema */
    getElementDefinitions(): GomXsdListElements
    setElementDefinitions(value: GomXsdListElements): void
    getSimpleTypeDefinitions(): GomXsdListSimpleTypes
    setSimpleTypeDefinitions(value: GomXsdListSimpleTypes): void
    getComplexTypeDefinitions(): GomXsdListComplexTypes
    setComplexTypeDefinitions(value: GomXsdListComplexTypes): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdSchema */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdSchema, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSchema_ConstructProps)
    _init (config?: GomXsdSchema_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSchema
    static $gtype: GObject.Type
}
export interface GomXsdSimpleType_ConstructProps extends GomElement_ConstructProps {
    final?: string
    name?: string
    annotation?: GomXsdAnnotation
    list?: GomXsdTypeList
    union?: GomXsdTypeUnion
    restriction?: GomXsdTypeRestriction
}
export class GomXsdSimpleType {
    /* Properties of GXml.GomXsdSimpleType */
    final: string
    name: string
    annotation: GomXsdAnnotation
    list: GomXsdTypeList
    union: GomXsdTypeUnion
    restriction: GomXsdTypeRestriction
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdSimpleType */
    parentInstance: GomElement
    priv: GomXsdSimpleTypePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    getList(): GomXsdTypeList
    setList(value: GomXsdTypeList): void
    getUnion(): GomXsdTypeUnion
    setUnion(value: GomXsdTypeUnion): void
    getRestriction(): GomXsdTypeRestriction
    setRestriction(value: GomXsdTypeRestriction): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdSimpleType */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdSimpleType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSimpleType_ConstructProps)
    _init (config?: GomXsdSimpleType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSimpleType
    static $gtype: GObject.Type
}
export interface GomXsdTypeDefinition_ConstructProps extends GomElement_ConstructProps {
    annotation?: GomXsdAnnotation
}
export class GomXsdTypeDefinition {
    /* Properties of GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeDefinition */
    parentInstance: GomElement
    priv: GomXsdTypeDefinitionPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeDefinition */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeDefinition, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeDefinition_ConstructProps)
    _init (config?: GomXsdTypeDefinition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeDefinition
    static $gtype: GObject.Type
}
export interface GomXsdTypeList_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
}
export class GomXsdTypeList {
    /* Properties of GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeList */
    parentInstance: GomXsdTypeDefinition
    priv: GomXsdTypeListPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeList */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeDefinition */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeList_ConstructProps)
    _init (config?: GomXsdTypeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeList
    static $gtype: GObject.Type
}
export interface GomXsdTypeUnion_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
}
export class GomXsdTypeUnion {
    /* Properties of GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeUnion */
    parentInstance: GomXsdTypeDefinition
    priv: GomXsdTypeUnionPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeUnion */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeDefinition */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeUnion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeUnion_ConstructProps)
    _init (config?: GomXsdTypeUnion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeUnion
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestriction_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
    base?: string
    simpleType?: GomXsdSimpleType
    enumerations?: GomXsdListTypeRestrictionEnumerations
    whiteSpaces?: GomXsdListTypeRestrictionWhiteSpaces
}
export class GomXsdTypeRestriction {
    /* Properties of GXml.GomXsdTypeRestriction */
    base: string
    simpleType: GomXsdSimpleType
    enumerations: GomXsdListTypeRestrictionEnumerations
    whiteSpaces: GomXsdListTypeRestrictionWhiteSpaces
    /* Properties of GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestriction */
    parentInstance: GomXsdTypeDefinition
    priv: GomXsdTypeRestrictionPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getEnumerations(): GomXsdListTypeRestrictionEnumerations
    setEnumerations(value: GomXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): GomXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: GomXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestriction */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeDefinition */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestriction, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestriction_ConstructProps)
    _init (config?: GomXsdTypeRestriction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestriction
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionDef_ConstructProps extends GomElement_ConstructProps {
    annotation?: GomXsdAnnotation
}
export class GomXsdTypeRestrictionDef {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionDef */
    parentInstance: GomElement
    priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionDef, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionDef_ConstructProps)
    _init (config?: GomXsdTypeRestrictionDef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionDef
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMinExclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMinExclusive {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMinExclusive */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMinExclusivePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMinExclusive */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinExclusive
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMinInclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMinInclusive {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMinInclusive */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMinInclusivePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMinInclusive */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinInclusive
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMaxExclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMaxExclusive {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMaxExclusive */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMaxExclusivePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMaxExclusive */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxExclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxExclusive
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMaxInclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMaxInclusive {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMaxInclusive */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMaxInclusivePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMaxInclusive */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxInclusive, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxInclusive
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionTotalDigits_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionTotalDigits {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionTotalDigits */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionTotalDigitsPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionTotalDigits */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionTotalDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: GomXsdTypeRestrictionTotalDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionTotalDigits
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionFractionDigits_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionFractionDigits {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionFractionDigits */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionFractionDigitsPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionFractionDigits */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionFractionDigits, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: GomXsdTypeRestrictionFractionDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionFractionDigits
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionLength {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionLength */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionLengthPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionLength */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionLength
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMinLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMinLength {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMinLength */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMinLengthPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMinLength */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMinLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinLength
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionMaxLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionMaxLength {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionMaxLength */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionMaxLengthPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionMaxLength */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionMaxLength, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxLength
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionEnumeration_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
    value?: string
}
export class GomXsdTypeRestrictionEnumeration {
    /* Properties of GXml.GomXsdTypeRestrictionEnumeration */
    value: string
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionEnumeration */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionEnumerationPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionEnumeration */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionEnumeration */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionEnumeration, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: GomXsdTypeRestrictionEnumeration_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionEnumeration
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionWhiteSpace_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
    fixed?: GomXsdTypeRestrictionWhiteSpaceFixed
    value?: string
}
export class GomXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml.GomXsdTypeRestrictionWhiteSpace */
    fixed: GomXsdTypeRestrictionWhiteSpaceFixed
    value: string
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionWhiteSpace */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionWhiteSpacePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionWhiteSpace */
    getFixed(): GomXsdTypeRestrictionWhiteSpaceFixed
    setFixed(value: GomXsdTypeRestrictionWhiteSpaceFixed): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionWhiteSpace */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionWhiteSpace, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: GomXsdTypeRestrictionWhiteSpace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionWhiteSpace
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps extends GomBoolean_ConstructProps {
}
export class GomXsdTypeRestrictionWhiteSpaceFixed {
    /* Properties of GXml.GomBaseProperty */
    value: string
    /* Fields of GXml.GomXsdTypeRestrictionWhiteSpaceFixed */
    parentInstance: GomBoolean
    priv: GomXsdTypeRestrictionWhiteSpaceFixedPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomBoolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomBaseProperty */
    vfuncValidateValue(val: string): boolean
    vfuncGetValue(): string | null
    vfuncSetValue(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: GomXsdTypeRestrictionWhiteSpaceFixed, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps)
    _init (config?: GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionWhiteSpaceFixed
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionPattern_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionPattern {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionPattern */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionPatternPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionPattern */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionPattern, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: GomXsdTypeRestrictionPattern_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionPattern
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionAssertion_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionAssertion {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionAssertion */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionAssertionPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionAssertion */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionAssertion, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: GomXsdTypeRestrictionAssertion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionAssertion
    static $gtype: GObject.Type
}
export interface GomXsdTypeRestrictionExplicitTimezone_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
export class GomXsdTypeRestrictionExplicitTimezone {
    /* Properties of GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdTypeRestrictionExplicitTimezone */
    parentInstance: GomXsdTypeRestrictionDef
    priv: GomXsdTypeRestrictionExplicitTimezonePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdTypeRestrictionExplicitTimezone */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdTypeRestrictionDef */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdTypeRestrictionExplicitTimezone, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: GomXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionExplicitTimezone
    static $gtype: GObject.Type
}
export interface GomXsdComplexType_ConstructProps extends GomXsdBaseType_ConstructProps {
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: GomXsdBaseContent
}
export class GomXsdComplexType {
    /* Properties of GXml.GomXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: GomXsdBaseContent
    readonly typeAttributes: GomXsdList
    readonly groupAttributes: GomXsdList
    /* Properties of GXml.GomXsdBaseType */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdComplexType */
    parentInstance: GomXsdBaseType
    priv: GomXsdComplexTypePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): GomXsdBaseContent
    setContentType(value: GomXsdBaseContent): void
    getTypeAttributes(): GomXsdList
    getGroupAttributes(): GomXsdList
    /* Methods of GXml.GomXsdBaseType */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdComplexType */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseType */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::abstract", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdComplexType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdComplexType_ConstructProps)
    _init (config?: GomXsdComplexType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdComplexType
    static $gtype: GObject.Type
}
export interface GomXsdExtension_ConstructProps extends GomElement_ConstructProps {
    base?: string
}
export class GomXsdExtension {
    /* Properties of GXml.GomXsdExtension */
    base: string
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdExtension */
    parentInstance: GomElement
    priv: GomXsdExtensionPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdExtension */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdExtension, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdExtension_ConstructProps)
    _init (config?: GomXsdExtension_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdExtension
    static $gtype: GObject.Type
}
export interface GomXsdElement_ConstructProps extends GomElement_ConstructProps {
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: GomXsdAnnotation
    simpleType?: GomXsdSimpleType
    complexType?: GomXsdComplexType
}
export class GomXsdElement {
    /* Properties of GXml.GomXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: GomXsdAnnotation
    simpleType: GomXsdSimpleType
    complexType: GomXsdComplexType
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdElement */
    parentInstance: GomElement
    priv: GomXsdElementPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getComplexType(): GomXsdComplexType
    setComplexType(value: GomXsdComplexType): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdElement */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::abstract", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-occurs", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-occurs", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::min-occurs", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-occurs", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdElement, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdElement_ConstructProps)
    _init (config?: GomXsdElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdElement
    static $gtype: GObject.Type
}
export interface GomXsdAnnotation_ConstructProps extends GomElement_ConstructProps {
}
export class GomXsdAnnotation {
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdAnnotation */
    parentInstance: GomElement
    priv: GomXsdAnnotationPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdAnnotation */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdAnnotation, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAnnotation_ConstructProps)
    _init (config?: GomXsdAnnotation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAnnotation
    static $gtype: GObject.Type
}
export interface GomXsdBaseType_ConstructProps extends GomElement_ConstructProps {
    anotation?: GomXsdAnnotation
}
export class GomXsdBaseType {
    /* Properties of GXml.GomXsdBaseType */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdBaseType */
    parentInstance: GomElement
    priv: GomXsdBaseTypePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseType */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdBaseType */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseType, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseType_ConstructProps)
    _init (config?: GomXsdBaseType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseType
    static $gtype: GObject.Type
}
export interface GomXsdBaseContent_ConstructProps extends GomElement_ConstructProps {
    anotation?: GomXsdAnnotation
}
export class GomXsdBaseContent {
    /* Properties of GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdBaseContent */
    parentInstance: GomElement
    priv: GomXsdBaseContentPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdBaseContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseContent_ConstructProps)
    _init (config?: GomXsdBaseContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseContent
    static $gtype: GObject.Type
}
export interface GomXsdSimpleContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
export class GomXsdSimpleContent {
    /* Properties of GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdSimpleContent */
    parentInstance: GomXsdBaseContent
    priv: GomXsdSimpleContentPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdSimpleContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdSimpleContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSimpleContent_ConstructProps)
    _init (config?: GomXsdSimpleContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSimpleContent
    static $gtype: GObject.Type
}
export interface GomXsdComplexContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
export class GomXsdComplexContent {
    /* Properties of GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdComplexContent */
    parentInstance: GomXsdBaseContent
    priv: GomXsdComplexContentPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdComplexContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdComplexContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdComplexContent_ConstructProps)
    _init (config?: GomXsdComplexContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdComplexContent
    static $gtype: GObject.Type
}
export interface GomXsdOpenContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
export class GomXsdOpenContent {
    /* Properties of GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdOpenContent */
    parentInstance: GomXsdBaseContent
    priv: GomXsdOpenContentPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdOpenContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseContent */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdOpenContent, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdOpenContent_ConstructProps)
    _init (config?: GomXsdOpenContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdOpenContent
    static $gtype: GObject.Type
}
export interface GomXsdBaseAttribute_ConstructProps extends GomElement_ConstructProps {
    anotation?: GomXsdAnnotation
}
export class GomXsdBaseAttribute {
    /* Properties of GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdBaseAttribute */
    parentInstance: GomElement
    priv: GomXsdBaseAttributePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdBaseAttribute */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdBaseAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseAttribute_ConstructProps)
    _init (config?: GomXsdBaseAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseAttribute
    static $gtype: GObject.Type
}
export interface GomXsdAttribute_ConstructProps extends GomXsdBaseAttribute_ConstructProps {
}
export class GomXsdAttribute {
    /* Properties of GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdAttribute */
    parentInstance: GomXsdBaseAttribute
    priv: GomXsdAttributePrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdAttribute */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseAttribute */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdAttribute, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAttribute_ConstructProps)
    _init (config?: GomXsdAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAttribute
    static $gtype: GObject.Type
}
export interface GomXsdAttributeGroup_ConstructProps extends GomXsdBaseAttribute_ConstructProps {
}
export class GomXsdAttributeGroup {
    /* Properties of GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml.GomXsdAttributeGroup */
    parentInstance: GomXsdBaseAttribute
    priv: GomXsdAttributeGroupPrivate
    /* Fields of GXml.GomElement */
    attributes: GomElementAttributes
    namespaceUri: string
    /* Fields of GXml.GomNode */
    localName: string
    prefix: string
    baseUri: string
    nodeValue: string
    parent: DomNode
    nodeType: DomNodeNodeType
    childNodes: GomNodeList
    document: DomDocument
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml.GomElement */
    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomXsdAttributeGroup */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomXsdBaseAttribute */
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    /* Virtual methods of GXml.GomElement */
    vfuncRemove(): void
    vfuncGetPreviousElementSibling(): DomElement | null
    vfuncGetNextElementSibling(): DomElement | null
    vfuncQuerySelector(selectors: string): DomElement | null
    vfuncQuerySelectorAll(selectors: string): DomNodeList
    vfuncGetElementsByPropertyValue(property: string, value: string): DomElementList
    vfuncGetChildren(): DomHTMLCollection
    vfuncGetFirstElementChild(): DomElement | null
    vfuncGetLastElementChild(): DomElement | null
    vfuncGetChildElementCount(): number
    vfuncGetAttribute(name: string): string | null
    vfuncGetAttributeNs(namespace: string | null, localName: string): string | null
    vfuncSetAttribute(name: string, value: string): void
    vfuncSetAttribute(name: string, val: string): boolean
    vfuncSetAttributeNs(namespace: string | null, name: string, value: string): void
    vfuncRemoveAttribute(name: string): void
    vfuncRemoveAttribute(name: string): boolean
    vfuncRemoveAttributeNs(namespace: string | null, localName: string): void
    vfuncHasAttribute(name: string): boolean
    vfuncHasAttributeNs(namespace: string | null, localName: string): boolean
    vfuncGetElementsByTagName(localName: string): DomHTMLCollection
    vfuncGetElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    vfuncGetElementsByClassName(classNames: string): DomHTMLCollection
    vfuncGetNamespaceUri(): string | null
    vfuncGetPrefix(): string | null
    vfuncGetLocalName(): string
    vfuncGetTagName(): string
    vfuncGetId(): string | null
    vfuncSetId(value?: string | null): void
    vfuncGetClassName(): string | null
    vfuncSetClassName(value?: string | null): void
    vfuncGetClassList(): DomTokenList
    vfuncGetAttributes(): DomNamedNodeMap
    vfuncGetPropertiesList(): GObject.ParamSpec[]
    vfuncFindPropertyName(pname: string): GObject.ParamSpec | null
    vfuncFindObjectPropertyName(pname: string): GObject.ParamSpec | null
    vfuncGetPropertyElementList(): GObject.ParamSpec[]
    vfuncGetPropertyString(prop: GObject.ParamSpec): string | null
    vfuncGetChild(name: string): DomElement | null
    vfuncFindElements(name: string): DomElementList
    vfuncSetInstanceProperty(name: string): boolean
    vfuncCleanPropertyElements(name: string): void
    /* Virtual methods of GXml.GomNode */
    vfuncAddEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncRemoveEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    vfuncDispatchEvent(event: DomEvent): boolean
    vfuncHasChildNodes(): boolean
    vfuncNormalize(): void
    vfuncIsEqualNode(node?: DomNode | null): boolean
    vfuncCompareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    vfuncContains(other?: DomNode | null): boolean
    vfuncLookupPrefix(nspace?: string | null): string | null
    vfuncLookupNamespaceUri(prefix?: string | null): string | null
    vfuncIsDefaultNamespace(nspace?: string | null): boolean
    vfuncInsertBefore(node: DomNode, child?: DomNode | null): DomNode
    vfuncAppendChild(node: DomNode): DomNode
    vfuncReplaceChild(node: DomNode, child: DomNode): DomNode
    vfuncRemoveChild(child: DomNode): DomNode
    vfuncCloneNode(deep: boolean): DomNode
    vfuncGetNodeType(): DomNodeNodeType
    vfuncGetNodeName(): string
    vfuncGetBaseUri(): string | null
    vfuncGetOwnerDocument(): DomDocument | null
    vfuncSetOwnerDocument(value?: DomDocument | null): void
    vfuncGetParentNode(): DomNode | null
    vfuncGetParentElement(): DomElement | null
    vfuncGetChildNodes(): DomNodeList
    vfuncGetFirstChild(): DomNode | null
    vfuncGetLastChild(): DomNode | null
    vfuncGetPreviousSibling(): DomNode | null
    vfuncGetNextSibling(): DomNode | null
    vfuncGetNodeValue(): string | null
    vfuncSetNodeValue(value?: string | null): void
    vfuncGetTextContent(): string | null
    vfuncSetTextContent(value?: string | null): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: (($obj: GomXsdAttributeGroup, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAttributeGroup_ConstructProps)
    _init (config?: GomXsdAttributeGroup_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAttributeGroup
    static $gtype: GObject.Type
}
export interface GomXsdList_ConstructProps extends GomArrayList_ConstructProps {
}
export class GomXsdList {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdList */
    parentInstance: GomArrayList
    priv: GomXsdListPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdList, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdList_ConstructProps)
    _init (config?: GomXsdList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdList
    static $gtype: GObject.Type
}
export interface GomXsdListElements_ConstructProps extends GomXsdList_ConstructProps {
}
export class GomXsdListElements {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdListElements */
    parentInstance: GomXsdList
    priv: GomXsdListElementsPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdListElements, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListElements_ConstructProps)
    _init (config?: GomXsdListElements_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListElements
    static $gtype: GObject.Type
}
export interface GomXsdListSimpleTypes_ConstructProps extends GomXsdList_ConstructProps {
}
export class GomXsdListSimpleTypes {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdListSimpleTypes */
    parentInstance: GomXsdList
    priv: GomXsdListSimpleTypesPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdListSimpleTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListSimpleTypes_ConstructProps)
    _init (config?: GomXsdListSimpleTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListSimpleTypes
    static $gtype: GObject.Type
}
export interface GomXsdListComplexTypes_ConstructProps extends GomXsdList_ConstructProps {
}
export class GomXsdListComplexTypes {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdListComplexTypes */
    parentInstance: GomXsdList
    priv: GomXsdListComplexTypesPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdListComplexTypes, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListComplexTypes_ConstructProps)
    _init (config?: GomXsdListComplexTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListComplexTypes
    static $gtype: GObject.Type
}
export interface GomXsdListTypeRestrictionEnumerations_ConstructProps extends GomXsdList_ConstructProps {
}
export class GomXsdListTypeRestrictionEnumerations {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdListTypeRestrictionEnumerations */
    parentInstance: GomXsdList
    priv: GomXsdListTypeRestrictionEnumerationsPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdListTypeRestrictionEnumerations, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: GomXsdListTypeRestrictionEnumerations_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListTypeRestrictionEnumerations
    static $gtype: GObject.Type
}
export interface GomXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GomXsdList_ConstructProps {
}
export class GomXsdListTypeRestrictionWhiteSpaces {
    /* Properties of GXml.GomXsdList */
    readonly length: number
    /* Properties of GXml.BaseCollection */
    readonly itemsName: string
    itemsType: GObject.Type
    readonly nodesIndex: GLib.Queue
    element: GomElement
    /* Fields of GXml.GomXsdListTypeRestrictionWhiteSpaces */
    parentInstance: GomXsdList
    priv: GomXsdListTypeRestrictionWhiteSpacesPrivate
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml.BaseCollection */
    initialize(itemsType: GObject.Type): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GXml.GomArrayList */
    vfuncSearch(): void
    vfuncGetItem(index: number): DomElement | null
    vfuncAppend(node: DomElement): void
    vfuncInitialize(t: GObject.Type): void
    vfuncCreateItem(): GomElement | null
    vfuncValidateAppend(index: number, element: DomElement): boolean
    vfuncGetNodesIndex(): GLib.Queue
    vfuncGetElement(): GomElement
    vfuncSetElement(value: GomElement): void
    vfuncGetItemsName(): string
    vfuncGetItemsType(): GObject.Type
    vfuncSetItemsType(value: GObject.Type): void
    vfuncGetLength(): number
    /* Virtual methods of GXml.BaseCollection */
    vfuncValidateAppend(index: number, element: DomElement): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed(): void
    vfuncDispatchPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose(): void
    vfuncFinalize(): void
    vfuncGetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify(pspec: GObject.ParamSpec): void
    vfuncSetProperty(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: (($obj: GomXsdListTypeRestrictionWhiteSpaces, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: GomXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListTypeRestrictionWhiteSpaces
    static $gtype: GObject.Type
}
export abstract class ElementListClass {
    /* Fields of GXml.ElementListClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class ElementListPrivate {
    static name: string
}
export abstract class NodeListClass {
    /* Fields of GXml.NodeListClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class NodeListPrivate {
    static name: string
}
export abstract class SerializableBoolClass {
    /* Fields of GXml.SerializableBoolClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class SerializableBoolPrivate {
    static name: string
}
export abstract class SerializableDoubleClass {
    /* Fields of GXml.SerializableDoubleClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class SerializableDoublePrivate {
    static name: string
}
export abstract class SerializableFloatClass {
    /* Fields of GXml.SerializableFloatClass */
    parentClass: SerializableDoubleClass
    static name: string
}
export class SerializableFloatPrivate {
    static name: string
}
export abstract class SerializableEnumClass {
    /* Fields of GXml.SerializableEnumClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class SerializableEnumPrivate {
    static name: string
}
export abstract class SerializableIntClass {
    /* Fields of GXml.SerializableIntClass */
    parentClass: SerializableDoubleClass
    static name: string
}
export class SerializableIntPrivate {
    static name: string
}
export abstract class SerializableValueListClass {
    /* Fields of GXml.SerializableValueListClass */
    parentClass: GObject.ObjectClass
    getValues: (self: SerializableValueList) => Gee.List
    addValues: (self: SerializableValueList, vals: string[]) => void
    getValueAt: (self: SerializableValueList, index: number) => string | null
    selectValueAt: (self: SerializableValueList, index: number) => void
    getValuesArray: (self: SerializableValueList) => string[]
    isValue: (self: SerializableValueList) => boolean
    static name: string
}
export class SerializableValueListPrivate {
    static name: string
}
export class Enumeration {
    static name: string
    static new(): Enumeration
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Enumeration
    static getNick(enumeration: GObject.Type, val: number): string
    static getNickCamelcase(enumeration: GObject.Type, val: number): string
    static getString(enumeration: GObject.Type, val: number, useNick: boolean, camelcase: boolean): string
    static parse(enumeration: GObject.Type, val: string): GObject.EnumValue | null
    static toArray(enumeration: GObject.Type): GObject.EnumValue[]
    static parseInteger(enumeration: GObject.Type, val: number): GObject.EnumValue | null
    static toStringArray(enumeration: GObject.Type): string[]
}
export abstract class SerializableObjectModelClass {
    /* Fields of GXml.SerializableObjectModelClass */
    parentClass: GObject.ObjectClass
    getEnableUnknownSerializableProperty: (self: SerializableObjectModel) => boolean
    serializeUseXmlNodeValue: (self: SerializableObjectModel) => boolean
    propertyUseNick: (self: SerializableObjectModel) => boolean
    setDefaultNamespace: (self: SerializableObjectModel, node: Node) => boolean
    nodeName: (self: SerializableObjectModel) => string
    findPropertySpec: (self: SerializableObjectModel, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableObjectModel) => GObject.ParamSpec[]
    serialize: (self: SerializableObjectModel, node: Node) => Node | null
    serializeProperty: (self: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableObjectModel, node: Node) => boolean
    deserializeProperty: (self: SerializableObjectModel, propertyNode: Node) => boolean
    toString: (self: SerializableObjectModel) => string
    static name: string
}
export class SerializableObjectModelPrivate {
    static name: string
}
export abstract class SerializableTreeMapClass {
    /* Fields of GXml.SerializableTreeMapClass */
    parentClass: Gee.TreeMapClass
    deserializeProceed: (self: SerializableTreeMap) => boolean
    deserialized: (self: SerializableTreeMap) => boolean
    deserializeNode: (self: SerializableTreeMap, node: Node) => boolean
    deserializeChildren: (self: SerializableTreeMap) => boolean
    setDefaultNamespace: (self: SerializableTreeMap, node: Node) => boolean
    serializeUseXmlNodeValue: (self: SerializableTreeMap) => boolean
    propertyUseNick: (self: SerializableTreeMap) => boolean
    nodeName: (self: SerializableTreeMap) => string
    findPropertySpec: (self: SerializableTreeMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableTreeMap) => GObject.ParamSpec[]
    serialize: (self: SerializableTreeMap, node: Node) => Node | null
    serializeProperty: (self: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableTreeMap, node: Node) => boolean
    deserializeProperty: (self: SerializableTreeMap, propertyNode: Node) => boolean
    static name: string
}
export class SerializableTreeMapPrivate {
    static name: string
}
export abstract class SerializableHashMapClass {
    /* Fields of GXml.SerializableHashMapClass */
    parentClass: Gee.HashMapClass
    deserializeProceed: (self: SerializableHashMap) => boolean
    deserialized: (self: SerializableHashMap) => boolean
    deserializeNode: (self: SerializableHashMap, node: Node) => boolean
    deserializeChildren: (self: SerializableHashMap) => boolean
    setDefaultNamespace: (self: SerializableHashMap, node: Node) => boolean
    getEnableUnknownSerializableProperty: (self: SerializableHashMap) => boolean
    serializeUseXmlNodeValue: (self: SerializableHashMap) => boolean
    propertyUseNick: (self: SerializableHashMap) => boolean
    nodeName: (self: SerializableHashMap) => string
    findPropertySpec: (self: SerializableHashMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableHashMap) => GObject.ParamSpec[]
    serialize: (self: SerializableHashMap, node: Node) => Node | null
    serializeProperty: (self: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableHashMap, node: Node) => boolean
    deserializeProperty: (self: SerializableHashMap, propertyNode: Node) => boolean
    static name: string
}
export class SerializableHashMapPrivate {
    static name: string
}
export abstract class SerializableDualKeyMapClass {
    /* Fields of GXml.SerializableDualKeyMapClass */
    parentClass: GObject.ObjectClass
    deserializeProceed: (self: SerializableDualKeyMap) => boolean
    deserialized: (self: SerializableDualKeyMap) => boolean
    deserializeNode: (self: SerializableDualKeyMap, node: Node) => boolean
    deserializeChildren: (self: SerializableDualKeyMap) => boolean
    setDefaultNamespace: (self: SerializableDualKeyMap, node: Node) => boolean
    getEnableUnknownSerializableProperty: (self: SerializableDualKeyMap) => boolean
    serializeUseXmlNodeValue: (self: SerializableDualKeyMap) => boolean
    propertyUseNick: (self: SerializableDualKeyMap) => boolean
    nodeName: (self: SerializableDualKeyMap) => string
    findPropertySpec: (self: SerializableDualKeyMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableDualKeyMap) => GObject.ParamSpec[]
    serialize: (self: SerializableDualKeyMap, node: Node) => Node | null
    serializeProperty: (self: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableDualKeyMap, node: Node) => boolean
    deserializeProperty: (self: SerializableDualKeyMap, propertyNode: Node) => boolean
    static name: string
}
export class SerializableDualKeyMapPrivate {
    static name: string
}
export abstract class SerializableArrayListClass {
    /* Fields of GXml.SerializableArrayListClass */
    parentClass: Gee.ArrayListClass
    deserializeProceed: (self: SerializableArrayList) => boolean
    deserialized: (self: SerializableArrayList) => boolean
    deserializeNode: (self: SerializableArrayList, node: Node) => boolean
    deserializeChildren: (self: SerializableArrayList) => boolean
    setDefaultNamespace: (self: SerializableArrayList, node: Node) => boolean
    serializeUseXmlNodeValue: (self: SerializableArrayList) => boolean
    propertyUseNick: (self: SerializableArrayList) => boolean
    nodeName: (self: SerializableArrayList) => string
    findPropertySpec: (self: SerializableArrayList, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableArrayList) => GObject.ParamSpec[]
    serialize: (self: SerializableArrayList, node: Node) => Node | null
    serializeProperty: (self: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableArrayList, node: Node) => boolean
    deserializeProperty: (self: SerializableArrayList, propertyNode: Node) => boolean
    static name: string
}
export class SerializableArrayListPrivate {
    static name: string
}
export abstract class SerializableContainerClass {
    /* Fields of GXml.SerializableContainerClass */
    parentClass: SerializableObjectModelClass
    initContainers: (self: SerializableContainer) => void
    static name: string
}
export class SerializableContainerPrivate {
    static name: string
}
export abstract class TAttributeClass {
    /* Fields of GXml.TAttributeClass */
    parentClass: TNodeClass
    static name: string
}
export class TAttributePrivate {
    static name: string
}
export abstract class TCommentClass {
    /* Fields of GXml.TCommentClass */
    parentClass: TNodeClass
    static name: string
}
export class TCommentPrivate {
    static name: string
}
export abstract class TCDATAClass {
    /* Fields of GXml.TCDATAClass */
    parentClass: TNodeClass
    static name: string
}
export class TCDATAPrivate {
    static name: string
}
export abstract class TDocumentClass {
    /* Fields of GXml.TDocumentClass */
    parentClass: TNodeClass
    static name: string
}
export class TDocumentPrivate {
    static name: string
}
export abstract class TElementClass {
    /* Fields of GXml.TElementClass */
    parentClass: TNodeClass
    static name: string
}
export class TElementPrivate {
    static name: string
}
export abstract class TNamespaceClass {
    /* Fields of GXml.TNamespaceClass */
    parentClass: TNodeClass
    static name: string
}
export class TNamespacePrivate {
    static name: string
}
export abstract class TNodeClass {
    /* Fields of GXml.TNodeClass */
    parentClass: GObject.ObjectClass
    setNamespace: (self: TNode, uri: string, prefix?: string | null) => boolean
    toString: (self: TNode) => string
    setParent: (self: TNode, node: Node) => void
    static name: string
}
export class TNodePrivate {
    static name: string
}
export abstract class TNodeTChildrenListClass {
    /* Fields of GXml.TNodeTChildrenListClass */
    parentClass: Gee.AbstractBidirListClass
    static name: string
}
export class TNodeTChildrenListPrivate {
    static name: string
}
export abstract class TProcessingInstructionClass {
    /* Fields of GXml.TProcessingInstructionClass */
    parentClass: TNodeClass
    static name: string
}
export class TProcessingInstructionPrivate {
    static name: string
}
export abstract class TTextClass {
    /* Fields of GXml.TTextClass */
    parentClass: TNodeClass
    static name: string
}
export class TTextPrivate {
    static name: string
}
export abstract class HtmlDocumentClass {
    /* Fields of GXml.HtmlDocumentClass */
    parentClass: GDocumentClass
    static name: string
}
export class HtmlDocumentPrivate {
    static name: string
}
export abstract class GAttributeClass {
    /* Fields of GXml.GAttributeClass */
    parentClass: GNodeClass
    static name: string
}
export class GAttributePrivate {
    static name: string
}
export abstract class GCommentClass {
    /* Fields of GXml.GCommentClass */
    parentClass: GCharacterDataClass
    static name: string
}
export class GCommentPrivate {
    static name: string
}
export abstract class GCharacterDataClass {
    /* Fields of GXml.GCharacterDataClass */
    parentClass: GNonDocumentChildNodeClass
    static name: string
}
export class GCharacterDataPrivate {
    static name: string
}
export abstract class GChildNodeClass {
    /* Fields of GXml.GChildNodeClass */
    parentClass: GNodeClass
    static name: string
}
export class GChildNodePrivate {
    static name: string
}
export abstract class GNonDocumentChildNodeClass {
    /* Fields of GXml.GNonDocumentChildNodeClass */
    parentClass: GChildNodeClass
    static name: string
}
export class GNonDocumentChildNodePrivate {
    static name: string
}
export abstract class GCDATAClass {
    /* Fields of GXml.GCDATAClass */
    parentClass: GNodeClass
    static name: string
}
export class GCDATAPrivate {
    static name: string
}
export abstract class GDocumentClass {
    /* Fields of GXml.GDocumentClass */
    parentClass: GNodeClass
    save: (self: GDocument, cancellable?: Gio.Cancellable | null) => boolean
    saveAs: (self: GDocument, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    static name: string
}
export class GDocumentPrivate {
    static name: string
}
export abstract class GImplementationClass {
    /* Fields of GXml.GImplementationClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GImplementationPrivate {
    static name: string
}
export abstract class GDocumentTypeClass {
    /* Fields of GXml.GDocumentTypeClass */
    parentClass: GChildNodeClass
    static name: string
}
export class GDocumentTypePrivate {
    static name: string
}
export abstract class GDocumentFragmentClass {
    /* Fields of GXml.GDocumentFragmentClass */
    parentClass: GDocumentClass
    static name: string
}
export class GDocumentFragmentPrivate {
    static name: string
}
export abstract class GDomNodeIteratorClass {
    /* Fields of GXml.GDomNodeIteratorClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GDomNodeIteratorPrivate {
    static name: string
}
export abstract class GDomTreeWalkerClass {
    /* Fields of GXml.GDomTreeWalkerClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GDomTreeWalkerPrivate {
    static name: string
}
export abstract class GDomTokenListClass {
    /* Fields of GXml.GDomTokenListClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class GDomTokenListPrivate {
    static name: string
}
export abstract class GDomSettableTokenListClass {
    /* Fields of GXml.GDomSettableTokenListClass */
    parentClass: GDomTokenListClass
    static name: string
}
export class GDomSettableTokenListPrivate {
    static name: string
}
export abstract class GDomHTMLCollectionClass {
    /* Fields of GXml.GDomHTMLCollectionClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class GDomHTMLCollectionPrivate {
    static name: string
}
export abstract class GDomEventClass {
    /* Fields of GXml.GDomEventClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GDomEventPrivate {
    static name: string
}
export abstract class GDomCustomEventClass {
    /* Fields of GXml.GDomCustomEventClass */
    parentClass: GDomEventClass
    static name: string
}
export class GDomCustomEventPrivate {
    static name: string
}
export abstract class GDomRangeClass {
    /* Fields of GXml.GDomRangeClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GDomRangePrivate {
    static name: string
}
export abstract class GElementClass {
    /* Fields of GXml.GElementClass */
    parentClass: GNonDocumentChildNodeClass
    static name: string
}
export class GElementPrivate {
    static name: string
}
export abstract class GNamespaceClass {
    /* Fields of GXml.GNamespaceClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GNamespacePrivate {
    static name: string
}
export abstract class GNodeClass {
    /* Fields of GXml.GNodeClass */
    parentClass: GObject.ObjectClass
    setNamespace: (self: GNode, uri: string, prefix?: string | null) => boolean
    toString: (self: GNode) => string
    static name: string
}
export class GNodePrivate {
    static name: string
}
export abstract class GProcessingInstructionClass {
    /* Fields of GXml.GProcessingInstructionClass */
    parentClass: GCharacterDataClass
    static name: string
}
export class GProcessingInstructionPrivate {
    static name: string
}
export abstract class GTextClass {
    /* Fields of GXml.GTextClass */
    parentClass: GCharacterDataClass
    static name: string
}
export class GTextPrivate {
    static name: string
}
export abstract class GHashMapAttrClass {
    /* Fields of GXml.GHashMapAttrClass */
    parentClass: Gee.AbstractMapClass
    static name: string
}
export class GHashMapAttrPrivate {
    static name: string
}
export abstract class GHashMapAttrEntryClass {
    /* Fields of GXml.GHashMapAttrEntryClass */
    parentClass: Gee.MapEntryClass
    static name: string
}
export class GHashMapAttrEntryPrivate {
    static name: string
}
export abstract class GHashMapAttrIteratorClass {
    /* Fields of GXml.GHashMapAttrIteratorClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GHashMapAttrIteratorPrivate {
    static name: string
}
export abstract class GListChildrenClass {
    /* Fields of GXml.GListChildrenClass */
    parentClass: Gee.AbstractBidirListClass
    static name: string
}
export class GListChildrenPrivate {
    static name: string
}
export abstract class GListChildrenIteratorClass {
    /* Fields of GXml.GListChildrenIteratorClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GListChildrenIteratorPrivate {
    static name: string
}
export abstract class GListNamespacesClass {
    /* Fields of GXml.GListNamespacesClass */
    parentClass: Gee.AbstractListClass
    static name: string
}
export class GListNamespacesPrivate {
    static name: string
}
export abstract class GListNamespacesIteratorClass {
    /* Fields of GXml.GListNamespacesIteratorClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GListNamespacesIteratorPrivate {
    static name: string
}
export abstract class DomNodeFilterClass {
    /* Fields of GXml.DomNodeFilterClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DomNodeFilterPrivate {
    static name: string
}
export abstract class DomElementListClass {
    /* Fields of GXml.DomElementListClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class DomElementListPrivate {
    static name: string
}
export abstract class DomEventInitClass {
    /* Fields of GXml.DomEventInitClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DomEventInitPrivate {
    static name: string
}
export abstract class DomCustomEventInitClass {
    /* Fields of GXml.DomCustomEventInitClass */
    parentClass: DomEventInitClass
    static name: string
}
export class DomCustomEventInitPrivate {
    static name: string
}
export abstract class DomTimeStampClass {
    /* Fields of GXml.DomTimeStampClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DomTimeStampPrivate {
    static name: string
}
export abstract class DomMutationObserverInitClass {
    /* Fields of GXml.DomMutationObserverInitClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DomMutationObserverInitPrivate {
    static name: string
}
export abstract class DomErrorNameClass {
    /* Fields of GXml.DomErrorNameClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class DomErrorNamePrivate {
    static name: string
}
export abstract class GXPathObjectClass {
    /* Fields of GXml.GXPathObjectClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GXPathObjectPrivate {
    static name: string
}
export abstract class GomDocumentClass {
    /* Fields of GXml.GomDocumentClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomDocumentPrivate {
    static name: string
}
export abstract class GomImplementationClass {
    /* Fields of GXml.GomImplementationClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GomImplementationPrivate {
    static name: string
}
export abstract class GomDocumentTypeClass {
    /* Fields of GXml.GomDocumentTypeClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomDocumentTypePrivate {
    static name: string
}
export abstract class GomDocumentFragmentClass {
    /* Fields of GXml.GomDocumentFragmentClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomDocumentFragmentPrivate {
    static name: string
}
export abstract class GomElementClass {
    /* Fields of GXml.GomElementClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomElementPrivate {
    static name: string
}
export abstract class GomElementAttributesClass {
    /* Fields of GXml.GomElementAttributesClass */
    parentClass: Gee.HashMapClass
    static name: string
}
export class GomElementAttributesPrivate {
    static name: string
}
export abstract class GomAttrClass {
    /* Fields of GXml.GomAttrClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomAttrPrivate {
    static name: string
}
export abstract class GomNodeClass {
    /* Fields of GXml.GomNodeClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class GomNodePrivate {
    static name: string
}
export abstract class GomNodeListClass {
    /* Fields of GXml.GomNodeListClass */
    parentClass: Gee.ArrayListClass
    static name: string
}
export class GomNodeListPrivate {
    static name: string
}
export abstract class GomCharacterDataClass {
    /* Fields of GXml.GomCharacterDataClass */
    parentClass: GomNodeClass
    static name: string
}
export class GomCharacterDataPrivate {
    static name: string
}
export abstract class GomTextClass {
    /* Fields of GXml.GomTextClass */
    parentClass: GomCharacterDataClass
    static name: string
}
export class GomTextPrivate {
    static name: string
}
export abstract class GomProcessingInstructionClass {
    /* Fields of GXml.GomProcessingInstructionClass */
    parentClass: GomCharacterDataClass
    static name: string
}
export class GomProcessingInstructionPrivate {
    static name: string
}
export abstract class GomCommentClass {
    /* Fields of GXml.GomCommentClass */
    parentClass: GomCharacterDataClass
    static name: string
}
export class GomCommentPrivate {
    static name: string
}
export abstract class BaseCollectionClass {
    /* Fields of GXml.BaseCollectionClass */
    parentClass: GObject.ObjectClass
    validateAppend: (self: BaseCollection, index: number, element: DomElement) => boolean
    static name: string
}
export class BaseCollectionPrivate {
    static name: string
}
export abstract class GomArrayListClass {
    /* Fields of GXml.GomArrayListClass */
    parentClass: BaseCollectionClass
    static name: string
}
export class GomArrayListPrivate {
    static name: string
}
export abstract class GomHashMapClass {
    /* Fields of GXml.GomHashMapClass */
    parentClass: BaseCollectionClass
    static name: string
}
export class GomHashMapPrivate {
    static name: string
}
export abstract class GomHashPairedMapClass {
    /* Fields of GXml.GomHashPairedMapClass */
    parentClass: BaseCollectionClass
    static name: string
}
export class GomHashPairedMapPrivate {
    static name: string
}
export abstract class GomHashThreeMapClass {
    /* Fields of GXml.GomHashThreeMapClass */
    parentClass: BaseCollectionClass
    static name: string
}
export class GomHashThreeMapPrivate {
    static name: string
}
export abstract class GomBasePropertyClass {
    /* Fields of GXml.GomBasePropertyClass */
    parentClass: GObject.ObjectClass
    validateValue: (self: GomBaseProperty, val: string) => boolean
    static name: string
}
export class GomBasePropertyPrivate {
    static name: string
}
export abstract class GomStringClass {
    /* Fields of GXml.GomStringClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomStringPrivate {
    static name: string
}
export abstract class GomArrayStringClass {
    /* Fields of GXml.GomArrayStringClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomArrayStringPrivate {
    static name: string
}
export abstract class GomXsdArrayStringClass {
    /* Fields of GXml.GomXsdArrayStringClass */
    parentClass: GomArrayStringClass
    static name: string
}
export class GomXsdArrayStringPrivate {
    static name: string
}
export abstract class GomDoubleClass {
    /* Fields of GXml.GomDoubleClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomDoublePrivate {
    static name: string
}
export abstract class GomFloatClass {
    /* Fields of GXml.GomFloatClass */
    parentClass: GomDoubleClass
    static name: string
}
export class GomFloatPrivate {
    static name: string
}
export abstract class GomIntClass {
    /* Fields of GXml.GomIntClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomIntPrivate {
    static name: string
}
export abstract class GomBooleanClass {
    /* Fields of GXml.GomBooleanClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomBooleanPrivate {
    static name: string
}
export abstract class GomEnumClass {
    /* Fields of GXml.GomEnumClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomEnumPrivate {
    static name: string
}
export abstract class GomDateClass {
    /* Fields of GXml.GomDateClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomDatePrivate {
    static name: string
}
export abstract class GomDateTimeClass {
    /* Fields of GXml.GomDateTimeClass */
    parentClass: GomBasePropertyClass
    static name: string
}
export class GomDateTimePrivate {
    static name: string
}
export abstract class XParserClass {
    /* Fields of GXml.XParserClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class XParserPrivate {
    static name: string
}
export abstract class GomXsdSchemaClass {
    /* Fields of GXml.GomXsdSchemaClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdSchemaPrivate {
    static name: string
}
export abstract class GomXsdSimpleTypeClass {
    /* Fields of GXml.GomXsdSimpleTypeClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdSimpleTypePrivate {
    static name: string
}
export abstract class GomXsdTypeDefinitionClass {
    /* Fields of GXml.GomXsdTypeDefinitionClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdTypeDefinitionPrivate {
    static name: string
}
export abstract class GomXsdTypeListClass {
    /* Fields of GXml.GomXsdTypeListClass */
    parentClass: GomXsdTypeDefinitionClass
    static name: string
}
export class GomXsdTypeListPrivate {
    static name: string
}
export abstract class GomXsdTypeUnionClass {
    /* Fields of GXml.GomXsdTypeUnionClass */
    parentClass: GomXsdTypeDefinitionClass
    static name: string
}
export class GomXsdTypeUnionPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionClass {
    /* Fields of GXml.GomXsdTypeRestrictionClass */
    parentClass: GomXsdTypeDefinitionClass
    static name: string
}
export class GomXsdTypeRestrictionPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionDefClass {
    /* Fields of GXml.GomXsdTypeRestrictionDefClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdTypeRestrictionDefPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMinExclusiveClass {
    /* Fields of GXml.GomXsdTypeRestrictionMinExclusiveClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMinExclusivePrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMinInclusiveClass {
    /* Fields of GXml.GomXsdTypeRestrictionMinInclusiveClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMinInclusivePrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMaxExclusiveClass {
    /* Fields of GXml.GomXsdTypeRestrictionMaxExclusiveClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMaxExclusivePrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMaxInclusiveClass {
    /* Fields of GXml.GomXsdTypeRestrictionMaxInclusiveClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMaxInclusivePrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionTotalDigitsClass {
    /* Fields of GXml.GomXsdTypeRestrictionTotalDigitsClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionTotalDigitsPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionFractionDigitsClass {
    /* Fields of GXml.GomXsdTypeRestrictionFractionDigitsClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionFractionDigitsPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionLengthClass {
    /* Fields of GXml.GomXsdTypeRestrictionLengthClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionLengthPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMinLengthClass {
    /* Fields of GXml.GomXsdTypeRestrictionMinLengthClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMinLengthPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionMaxLengthClass {
    /* Fields of GXml.GomXsdTypeRestrictionMaxLengthClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionMaxLengthPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionEnumerationClass {
    /* Fields of GXml.GomXsdTypeRestrictionEnumerationClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionEnumerationPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionWhiteSpaceClass {
    /* Fields of GXml.GomXsdTypeRestrictionWhiteSpaceClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionWhiteSpacePrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionWhiteSpaceFixedClass {
    /* Fields of GXml.GomXsdTypeRestrictionWhiteSpaceFixedClass */
    parentClass: GomBooleanClass
    static name: string
}
export class GomXsdTypeRestrictionWhiteSpaceFixedPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionPatternClass {
    /* Fields of GXml.GomXsdTypeRestrictionPatternClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionPatternPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionAssertionClass {
    /* Fields of GXml.GomXsdTypeRestrictionAssertionClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionAssertionPrivate {
    static name: string
}
export abstract class GomXsdTypeRestrictionExplicitTimezoneClass {
    /* Fields of GXml.GomXsdTypeRestrictionExplicitTimezoneClass */
    parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
export class GomXsdTypeRestrictionExplicitTimezonePrivate {
    static name: string
}
export abstract class GomXsdComplexTypeClass {
    /* Fields of GXml.GomXsdComplexTypeClass */
    parentClass: GomXsdBaseTypeClass
    static name: string
}
export class GomXsdComplexTypePrivate {
    static name: string
}
export abstract class GomXsdExtensionClass {
    /* Fields of GXml.GomXsdExtensionClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdExtensionPrivate {
    static name: string
}
export abstract class GomXsdElementClass {
    /* Fields of GXml.GomXsdElementClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdElementPrivate {
    static name: string
}
export abstract class GomXsdAnnotationClass {
    /* Fields of GXml.GomXsdAnnotationClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdAnnotationPrivate {
    static name: string
}
export abstract class GomXsdBaseTypeClass {
    /* Fields of GXml.GomXsdBaseTypeClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdBaseTypePrivate {
    static name: string
}
export abstract class GomXsdBaseContentClass {
    /* Fields of GXml.GomXsdBaseContentClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdBaseContentPrivate {
    static name: string
}
export abstract class GomXsdSimpleContentClass {
    /* Fields of GXml.GomXsdSimpleContentClass */
    parentClass: GomXsdBaseContentClass
    static name: string
}
export class GomXsdSimpleContentPrivate {
    static name: string
}
export abstract class GomXsdComplexContentClass {
    /* Fields of GXml.GomXsdComplexContentClass */
    parentClass: GomXsdBaseContentClass
    static name: string
}
export class GomXsdComplexContentPrivate {
    static name: string
}
export abstract class GomXsdOpenContentClass {
    /* Fields of GXml.GomXsdOpenContentClass */
    parentClass: GomXsdBaseContentClass
    static name: string
}
export class GomXsdOpenContentPrivate {
    static name: string
}
export abstract class GomXsdBaseAttributeClass {
    /* Fields of GXml.GomXsdBaseAttributeClass */
    parentClass: GomElementClass
    static name: string
}
export class GomXsdBaseAttributePrivate {
    static name: string
}
export abstract class GomXsdAttributeClass {
    /* Fields of GXml.GomXsdAttributeClass */
    parentClass: GomXsdBaseAttributeClass
    static name: string
}
export class GomXsdAttributePrivate {
    static name: string
}
export abstract class GomXsdAttributeGroupClass {
    /* Fields of GXml.GomXsdAttributeGroupClass */
    parentClass: GomXsdBaseAttributeClass
    static name: string
}
export class GomXsdAttributeGroupPrivate {
    static name: string
}
export abstract class GomXsdListClass {
    /* Fields of GXml.GomXsdListClass */
    parentClass: GomArrayListClass
    static name: string
}
export class GomXsdListPrivate {
    static name: string
}
export abstract class GomXsdListElementsClass {
    /* Fields of GXml.GomXsdListElementsClass */
    parentClass: GomXsdListClass
    static name: string
}
export class GomXsdListElementsPrivate {
    static name: string
}
export abstract class GomXsdListSimpleTypesClass {
    /* Fields of GXml.GomXsdListSimpleTypesClass */
    parentClass: GomXsdListClass
    static name: string
}
export class GomXsdListSimpleTypesPrivate {
    static name: string
}
export abstract class GomXsdListComplexTypesClass {
    /* Fields of GXml.GomXsdListComplexTypesClass */
    parentClass: GomXsdListClass
    static name: string
}
export class GomXsdListComplexTypesPrivate {
    static name: string
}
export abstract class GomXsdListTypeRestrictionEnumerationsClass {
    /* Fields of GXml.GomXsdListTypeRestrictionEnumerationsClass */
    parentClass: GomXsdListClass
    static name: string
}
export class GomXsdListTypeRestrictionEnumerationsPrivate {
    static name: string
}
export abstract class GomXsdListTypeRestrictionWhiteSpacesClass {
    /* Fields of GXml.GomXsdListTypeRestrictionWhiteSpacesClass */
    parentClass: GomXsdListClass
    static name: string
}
export class GomXsdListTypeRestrictionWhiteSpacesPrivate {
    static name: string
}
export abstract class AttributeIface {
    /* Fields of GXml.AttributeIface */
    parentIface: GObject.TypeInterface
    getNamespace: (self: Attribute) => Namespace | null
    setNamespace: (self: Attribute, value?: Namespace | null) => void
    getPrefix: (self: Attribute) => string | null
    static name: string
}
export abstract class CommentIface {
    /* Fields of GXml.CommentIface */
    parentIface: GObject.TypeInterface
    getStr: (self: Comment) => string
    setStr: (self: Comment, value: string) => void
    static name: string
}
export abstract class CDATAIface {
    /* Fields of GXml.CDATAIface */
    parentIface: GObject.TypeInterface
    getStr: (self: CDATA) => string
    static name: string
}
export abstract class CharacterIface {
    /* Fields of GXml.CharacterIface */
    parentIface: GObject.TypeInterface
    getStr: (self: Character) => string
    setStr: (self: Character, value: string) => void
    static name: string
}
export abstract class DocumentIface {
    /* Fields of GXml.DocumentIface */
    parentIface: GObject.TypeInterface
    createElement: (self: Document, name: string) => Node
    createText: (self: Document, text: string) => Node
    createComment: (self: Document, text: string) => Node
    createCdata: (self: Document, text: string) => Node
    createPi: (self: Document, target: string, data: string) => Node
    save: (self: Document, cancellable?: Gio.Cancellable | null) => boolean
    saveAs: (self: Document, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    getIndent: (self: Document) => boolean
    setIndent: (self: Document, value: boolean) => void
    getNsTop: (self: Document) => boolean
    setNsTop: (self: Document, value: boolean) => void
    getPrefixDefaultNs: (self: Document) => boolean
    setPrefixDefaultNs: (self: Document, value: boolean) => void
    getBackup: (self: Document) => boolean
    setBackup: (self: Document, value: boolean) => void
    getRoot: (self: Document) => Node
    getFile: (self: Document) => Gio.File
    setFile: (self: Document, value: Gio.File) => void
    static name: string
}
export abstract class DocumentTypeIface {
    /* Fields of GXml.DocumentTypeIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class ElementIface {
    /* Fields of GXml.ElementIface */
    parentIface: GObject.TypeInterface
    normalize: (self: Element) => void
    setAttr: (self: Element, name: string, value: string) => void
    getAttr: (self: Element, name: string) => Node | null
    removeAttr: (self: Element, name: string) => void
    removeNsAttr: (self: Element, name: string, uri: string) => void
    setNsAttr: (self: Element, ns: string, name: string, value: string) => void
    getNsAttr: (self: Element, name: string, uri: string) => Node | null
    getTagName: (self: Element) => string
    getContent: (self: Element) => string
    setContent: (self: Element, value: string) => void
    static name: string
}
export abstract class NamespaceIface {
    /* Fields of GXml.NamespaceIface */
    parentIface: GObject.TypeInterface
    getUri: (self: Namespace) => string | null
    getPrefix: (self: Namespace) => string | null
    static name: string
}
export abstract class NodeIface {
    /* Fields of GXml.NodeIface */
    parentIface: GObject.TypeInterface
    get: (self: Node, key: string) => Node | null
    getElementsByPropertyValue: (self: Node, property: string, value: string) => ElementList
    getElementsByName: (self: Node, name: string) => ElementList
    getElementsByNameNs: (self: Node, name: string, ns?: string | null) => ElementList
    toString: (self: Node) => string
    setNamespace: (self: Node, uri: string, prefix?: string | null) => boolean
    nsPrefix: (self: Node) => string
    nsUri: (self: Node) => string
    getNamespaces: (self: Node) => Gee.List
    getChildrenNodes: (self: Node) => Gee.BidirList
    getAttrs: (self: Node) => Gee.Map
    getName: (self: Node) => string
    getValue: (self: Node) => string
    setValue: (self: Node, value: string) => void
    getTypeNode: (self: Node) => NodeType
    getDocument: (self: Node) => Document
    getParent: (self: Node) => Node
    static name: string
}
export abstract class NotationIface {
    /* Fields of GXml.NotationIface */
    parentIface: GObject.TypeInterface
    getPublicId: (self: Notation) => string | null
    getExternalId: (self: Notation) => string | null
    static name: string
}
export abstract class EntityIface {
    /* Fields of GXml.EntityIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class ProcessingInstructionIface {
    /* Fields of GXml.ProcessingInstructionIface */
    parentIface: GObject.TypeInterface
    getTarget: (self: ProcessingInstruction) => string
    getData: (self: ProcessingInstruction) => string
    setData: (self: ProcessingInstruction, value: string) => void
    static name: string
}
export abstract class TextIface {
    /* Fields of GXml.TextIface */
    parentIface: GObject.TypeInterface
    getStr: (self: Text) => string
    setStr: (self: Text, value: string) => void
    static name: string
}
export abstract class SerializableIface {
    /* Fields of GXml.SerializableIface */
    parentIface: GObject.TypeInterface
    getEnableUnknownSerializableProperty: (self: Serializable) => boolean
    setDefaultNamespace: (self: Serializable, node: Node) => boolean
    serializeUseXmlNodeValue: (self: Serializable) => boolean
    nodeName: (self: Serializable) => string
    propertyUseNick: (self: Serializable) => boolean
    serialize: (self: Serializable, node: Node) => Node | null
    serializeProperty: (self: Serializable, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: Serializable, node: Node) => boolean
    deserializeProperty: (self: Serializable, propertyNode: Node) => boolean
    findPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    defaultFindPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    defaultListSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    getUnknownSerializableProperties: (self: Serializable) => Gee.Map
    getUnknownSerializableNodes: (self: Serializable) => Gee.Collection
    getSerializedXmlNodeValue: (self: Serializable) => string | null
    setSerializedXmlNodeValue: (self: Serializable, value?: string | null) => void
    static name: string
}
export abstract class SerializablePropertyIface {
    /* Fields of GXml.SerializablePropertyIface */
    parentIface: GObject.TypeInterface
    getSerializablePropertyValue: (self: SerializableProperty) => string
    setSerializablePropertyValue: (self: SerializableProperty, val?: string | null) => void
    deserializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => boolean
    serializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => Node | null
    static name: string
}
export abstract class SerializableMapKeyIface {
    /* Fields of GXml.SerializableMapKeyIface */
    parentIface: GObject.TypeInterface
    getMapKey: (self: SerializableMapKey) => object | null
    static name: string
}
export abstract class SerializableMapDualKeyIface {
    /* Fields of GXml.SerializableMapDualKeyIface */
    parentIface: GObject.TypeInterface
    getMapPrimaryKey: (self: SerializableMapDualKey) => object | null
    getMapSecondaryKey: (self: SerializableMapDualKey) => object | null
    static name: string
}
export abstract class SerializableCollectionIface {
    /* Fields of GXml.SerializableCollectionIface */
    parentIface: GObject.TypeInterface
    deserializeProceed: (self: SerializableCollection) => boolean
    deserialized: (self: SerializableCollection) => boolean
    deserializeNode: (self: SerializableCollection, node: Node) => boolean
    deserializeChildren: (self: SerializableCollection) => boolean
    isCollection: (self: SerializableCollection) => boolean
    static name: string
}
export abstract class DomAttrIface {
    /* Fields of GXml.DomAttrIface */
    parentIface: GObject.TypeInterface
    getNamespaceUri: (self: DomAttr) => string | null
    getPrefix: (self: DomAttr) => string | null
    getLocalName: (self: DomAttr) => string
    getName: (self: DomAttr) => string
    getValue: (self: DomAttr) => string
    setValue: (self: DomAttr, value: string) => void
    getSpecified: (self: DomAttr) => boolean
    static name: string
}
export abstract class DomCharacterDataIface {
    /* Fields of GXml.DomCharacterDataIface */
    parentIface: GObject.TypeInterface
    substringData: (self: DomCharacterData, offset: number, count: number) => string
    appendData: (self: DomCharacterData, data: string) => void
    insertData: (self: DomCharacterData, offset: number, data: string) => void
    deleteData: (self: DomCharacterData, offset: number, count: number) => void
    replaceData: (self: DomCharacterData, offset: number, count: number, data: string) => void
    getData: (self: DomCharacterData) => string
    setData: (self: DomCharacterData, value: string) => void
    getLength: (self: DomCharacterData) => number
    static name: string
}
export abstract class DomTextIface {
    /* Fields of GXml.DomTextIface */
    parentIface: GObject.TypeInterface
    splitText: (self: DomText, offset: number) => DomText
    getWholeText: (self: DomText) => string
    static name: string
}
export abstract class DomProcessingInstructionIface {
    /* Fields of GXml.DomProcessingInstructionIface */
    parentIface: GObject.TypeInterface
    getTarget: (self: DomProcessingInstruction) => string
    static name: string
}
export abstract class DomCommentIface {
    /* Fields of GXml.DomCommentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class DomNonElementParentNodeIface {
    /* Fields of GXml.DomNonElementParentNodeIface */
    parentIface: GObject.TypeInterface
    getElementById: (self: DomNonElementParentNode, elementId: string) => DomElement | null
    static name: string
}
export abstract class DomParentNodeIface {
    /* Fields of GXml.DomParentNodeIface */
    parentIface: GObject.TypeInterface
    querySelector: (self: DomParentNode, selectors: string) => DomElement | null
    querySelectorAll: (self: DomParentNode, selectors: string) => DomNodeList
    getElementsByPropertyValue: (self: DomParentNode, property: string, value: string) => DomElementList
    getChildren: (self: DomParentNode) => DomHTMLCollection
    getFirstElementChild: (self: DomParentNode) => DomElement | null
    getLastElementChild: (self: DomParentNode) => DomElement | null
    getChildElementCount: (self: DomParentNode) => number
    static name: string
}
export abstract class DomNonDocumentTypeChildNodeIface {
    /* Fields of GXml.DomNonDocumentTypeChildNodeIface */
    parentIface: GObject.TypeInterface
    getPreviousElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    getNextElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    static name: string
}
export abstract class DomChildNodeIface {
    /* Fields of GXml.DomChildNodeIface */
    parentIface: GObject.TypeInterface
    remove: (self: DomChildNode) => void
    static name: string
}
export abstract class DomNodeListIface {
    /* Fields of GXml.DomNodeListIface */
    parentIface: GObject.TypeInterface
    item: (self: DomNodeList, index: number) => DomNode | null
    getLength: (self: DomNodeList) => number
    static name: string
}
export abstract class DomHTMLCollectionIface {
    /* Fields of GXml.DomHTMLCollectionIface */
    parentIface: GObject.TypeInterface
    getElement: (self: DomHTMLCollection, index: number) => DomElement | null
    toArray: (self: DomHTMLCollection) => DomElement[]
    item: (self: DomHTMLCollection, index: number) => DomElement | null
    namedItem: (self: DomHTMLCollection, name: string) => DomElement | null
    getLength: (self: DomHTMLCollection) => number
    static name: string
}
export abstract class DomNodeIteratorIface {
    /* Fields of GXml.DomNodeIteratorIface */
    parentIface: GObject.TypeInterface
    nextNode: (self: DomNodeIterator) => DomNode | null
    previousNode: (self: DomNodeIterator) => DomNode | null
    detach: (self: DomNodeIterator) => void
    getRoot: (self: DomNodeIterator) => DomNode
    getReferenceNode: (self: DomNodeIterator) => DomNode
    getPointerBeforeReferenceNode: (self: DomNodeIterator) => boolean
    getWhatToShow: (self: DomNodeIterator) => number
    getFilter: (self: DomNodeIterator) => DomNodeFilter | null
    static name: string
}
export abstract class DomTreeWalkerIface {
    /* Fields of GXml.DomTreeWalkerIface */
    parentIface: GObject.TypeInterface
    parentNode: (self: DomTreeWalker) => DomNode | null
    firstChild: (self: DomTreeWalker) => DomNode | null
    lastChild: (self: DomTreeWalker) => DomNode | null
    previousSibling: (self: DomTreeWalker) => DomNode | null
    nextSibling: (self: DomTreeWalker) => DomNode | null
    previousNode: (self: DomTreeWalker) => DomNode | null
    nextNode: (self: DomTreeWalker) => DomNode | null
    getRoot: (self: DomTreeWalker) => DomNode
    getWhatToShow: (self: DomTreeWalker) => number
    getFilter: (self: DomTreeWalker) => DomNodeFilter | null
    getCurrentNode: (self: DomTreeWalker) => DomNode
    static name: string
}
export abstract class DomNamedNodeMapIface {
    /* Fields of GXml.DomNamedNodeMapIface */
    parentIface: GObject.TypeInterface
    item: (self: DomNamedNodeMap, index: number) => DomNode | null
    getNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    setNamedItem: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    removeNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    removeNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    getNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    setNamedItemNs: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    getLength: (self: DomNamedNodeMap) => number
    static name: string
}
export abstract class DomTokenListIface {
    /* Fields of GXml.DomTokenListIface */
    parentIface: GObject.TypeInterface
    item: (self: DomTokenList, index: number) => string | null
    contains: (self: DomTokenList, token: string) => boolean
    add: (self: DomTokenList, tokens: string[]) => void
    remove: (self: DomTokenList, tokens: string[]) => void
    toggle: (self: DomTokenList, token: string, force: boolean, auto: boolean) => boolean
    toString: (self: DomTokenList) => string
    getLength: (self: DomTokenList) => number
    static name: string
}
export abstract class DomSettableTokenListIface {
    /* Fields of GXml.DomSettableTokenListIface */
    parentIface: GObject.TypeInterface
    getValue: (self: DomSettableTokenList) => string
    setValue: (self: DomSettableTokenList, value: string) => void
    static name: string
}
export abstract class DomDocumentIface {
    /* Fields of GXml.DomDocumentIface */
    parentIface: GObject.TypeInterface
    getElementsByTagName: (self: DomDocument, localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomDocument, namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (self: DomDocument, classNames: string) => DomHTMLCollection
    createElement: (self: DomDocument, localName: string) => DomElement
    createElementNs: (self: DomDocument, namespace: string | null, qualifiedName: string) => DomElement
    createDocumentFragment: (self: DomDocument) => DomDocumentFragment
    createTextNode: (self: DomDocument, data: string) => DomText
    createComment: (self: DomDocument, data: string) => DomComment
    createProcessingInstruction: (self: DomDocument, target: string, data: string) => DomProcessingInstruction
    importNode: (self: DomDocument, node: DomNode, deep: boolean) => DomNode
    adoptNode: (self: DomDocument, node: DomNode) => DomNode
    createEvent: (self: DomDocument, interface: string) => DomEvent
    createRange: (self: DomDocument) => DomRange
    createNodeIterator: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomNodeIterator
    createTreeWalker: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomTreeWalker
    getImplementation: (self: DomDocument) => DomImplementation
    getUrl: (self: DomDocument) => string
    getDocumentUri: (self: DomDocument) => string
    getOrigin: (self: DomDocument) => string
    getCompatMode: (self: DomDocument) => string
    getCharacterSet: (self: DomDocument) => string
    getContentType: (self: DomDocument) => string
    getDoctype: (self: DomDocument) => DomDocumentType | null
    getDocumentElement: (self: DomDocument) => DomElement | null
    static name: string
}
export abstract class DomXMLDocumentIface {
    /* Fields of GXml.DomXMLDocumentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class DomImplementationIface {
    /* Fields of GXml.DomImplementationIface */
    parentIface: GObject.TypeInterface
    createDocumentType: (self: DomImplementation, qualifiedName: string, publicId: string, systemId: string) => DomDocumentType
    createDocument: (self: DomImplementation, nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null) => DomXMLDocument
    createHtmlDocument: (self: DomImplementation, title: string) => Document
    hasFeature: (self: DomImplementation) => boolean
    static name: string
}
export abstract class DomDocumentFragmentIface {
    /* Fields of GXml.DomDocumentFragmentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class DomDocumentTypeIface {
    /* Fields of GXml.DomDocumentTypeIface */
    parentIface: GObject.TypeInterface
    getName: (self: DomDocumentType) => string
    getPublicId: (self: DomDocumentType) => string
    getSystemId: (self: DomDocumentType) => string
    static name: string
}
export abstract class DomElementIface {
    /* Fields of GXml.DomElementIface */
    parentIface: GObject.TypeInterface
    getAttribute: (self: DomElement, name: string) => string | null
    getAttributeNs: (self: DomElement, namespace: string | null, localName: string) => string | null
    setAttribute: (self: DomElement, name: string, value: string) => void
    setAttributeNs: (self: DomElement, namespace: string | null, name: string, value: string) => void
    removeAttribute: (self: DomElement, name: string) => void
    removeAttributeNs: (self: DomElement, namespace: string | null, localName: string) => void
    hasAttribute: (self: DomElement, name: string) => boolean
    hasAttributeNs: (self: DomElement, namespace: string | null, localName: string) => boolean
    getElementsByTagName: (self: DomElement, localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomElement, namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (self: DomElement, classNames: string) => DomHTMLCollection
    getNamespaceUri: (self: DomElement) => string | null
    getPrefix: (self: DomElement) => string | null
    getLocalName: (self: DomElement) => string
    getTagName: (self: DomElement) => string
    getId: (self: DomElement) => string | null
    setId: (self: DomElement, value?: string | null) => void
    getClassName: (self: DomElement) => string | null
    setClassName: (self: DomElement, value?: string | null) => void
    getClassList: (self: DomElement) => DomTokenList
    getAttributes: (self: DomElement) => DomNamedNodeMap
    static name: string
}
export abstract class DomEventTargetIface {
    /* Fields of GXml.DomEventTargetIface */
    parentIface: GObject.TypeInterface
    addEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    removeEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    dispatchEvent: (self: DomEventTarget, event: DomEvent) => boolean
    static name: string
}
export abstract class DomEventListenerIface {
    /* Fields of GXml.DomEventListenerIface */
    parentIface: GObject.TypeInterface
    handleEvent: (self: DomEventListener, event: DomEvent) => void
    static name: string
}
export abstract class DomEventIface {
    /* Fields of GXml.DomEventIface */
    parentIface: GObject.TypeInterface
    stopPropagation: (self: DomEvent) => void
    stopImmediatePropagation: (self: DomEvent) => void
    preventDefault: (self: DomEvent) => void
    initEvent: (self: DomEvent, type: string, bubbles: boolean, cancelable: boolean) => void
    getEtype: (self: DomEvent) => string
    getEventTarget: (self: DomEvent) => DomEventTarget | null
    getCurrentTarget: (self: DomEvent) => DomEventTarget | null
    getBubbles: (self: DomEvent) => boolean
    getCancelable: (self: DomEvent) => boolean
    getIsTrusted: (self: DomEvent) => boolean
    getTimeStamp: (self: DomEvent) => DomTimeStamp
    getDefaultPrevented: (self: DomEvent) => boolean
    getEventPhase: (self: DomEvent) => DomEventPhase
    static name: string
}
export abstract class DomCustomEventIface {
    /* Fields of GXml.DomCustomEventIface */
    parentIface: GObject.TypeInterface
    initCustomEvent: (self: DomCustomEvent, type: string, bubbles: boolean, cancelable: boolean, detail?: any) => void
    getDetail: (self: DomCustomEvent) => any
    static name: string
}
export abstract class DomMutationObserverIface {
    /* Fields of GXml.DomMutationObserverIface */
    parentIface: GObject.TypeInterface
    observe: (self: DomMutationObserver, target: Node, options: DomMutationObserverInit) => void
    disconnect: (self: DomMutationObserver) => void
    takeRecords: (self: DomMutationObserver) => Gee.List
    static name: string
}
export abstract class DomMutationRecordIface {
    /* Fields of GXml.DomMutationRecordIface */
    parentIface: GObject.TypeInterface
    getMtype: (self: DomMutationRecord) => string
    getTarget: (self: DomMutationRecord) => DomNode
    getAddedNodes: (self: DomMutationRecord) => DomNodeList
    setAddedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getRemovedNodes: (self: DomMutationRecord) => DomNodeList
    setRemovedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getPreviousSibling: (self: DomMutationRecord) => DomNode | null
    getNextSibling: (self: DomMutationRecord) => DomNode | null
    getAttributeName: (self: DomMutationRecord) => string | null
    getAttributeNamespace: (self: DomMutationRecord) => string | null
    getOldValue: (self: DomMutationRecord) => string | null
    static name: string
}
export abstract class DomNodeIface {
    /* Fields of GXml.DomNodeIface */
    parentIface: GObject.TypeInterface
    hasChildNodes: (self: DomNode) => boolean
    normalize: (self: DomNode) => void
    isEqualNode: (self: DomNode, node?: DomNode | null) => boolean
    compareDocumentPosition: (self: DomNode, other: DomNode) => DomNodeDocumentPosition
    contains: (self: DomNode, other?: DomNode | null) => boolean
    lookupPrefix: (self: DomNode, nspace?: string | null) => string | null
    lookupNamespaceUri: (self: DomNode, prefix?: string | null) => string | null
    isDefaultNamespace: (self: DomNode, nspace?: string | null) => boolean
    insertBefore: (self: DomNode, node: DomNode, child?: DomNode | null) => DomNode
    appendChild: (self: DomNode, node: DomNode) => DomNode
    replaceChild: (self: DomNode, node: DomNode, child: DomNode) => DomNode
    removeChild: (self: DomNode, child: DomNode) => DomNode
    cloneNode: (self: DomNode, deep: boolean) => DomNode
    getNodeType: (self: DomNode) => DomNodeNodeType
    getNodeName: (self: DomNode) => string
    getBaseUri: (self: DomNode) => string | null
    getOwnerDocument: (self: DomNode) => DomDocument | null
    setOwnerDocument: (self: DomNode, value?: DomDocument | null) => void
    getParentNode: (self: DomNode) => DomNode | null
    getParentElement: (self: DomNode) => DomElement | null
    getChildNodes: (self: DomNode) => DomNodeList
    getFirstChild: (self: DomNode) => DomNode | null
    getLastChild: (self: DomNode) => DomNode | null
    getPreviousSibling: (self: DomNode) => DomNode | null
    getNextSibling: (self: DomNode) => DomNode | null
    getNodeValue: (self: DomNode) => string | null
    setNodeValue: (self: DomNode, value?: string | null) => void
    getTextContent: (self: DomNode) => string | null
    setTextContent: (self: DomNode, value?: string | null) => void
    static name: string
}
export abstract class DomRangeIface {
    /* Fields of GXml.DomRangeIface */
    parentIface: GObject.TypeInterface
    setStart: (self: DomRange, node: DomNode, offset: number) => void
    setEnd: (self: DomRange, node: DomNode, offset: number) => void
    setStartBefore: (self: DomRange, node: DomNode) => void
    setStartAfter: (self: DomRange, node: DomNode) => void
    setEndBefore: (self: DomRange, node: DomNode) => void
    setEndAfter: (self: DomRange, node: DomNode) => void
    collapse: (self: DomRange, toStart: boolean) => void
    selectNode: (self: DomRange, node: DomNode) => void
    selectNodeContents: (self: DomRange, node: DomNode) => void
    compareBoundaryPoints: (self: DomRange, how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    deleteContents: (self: DomRange) => void
    extractContents: (self: DomRange) => DomDocumentFragment | null
    cloneContents: (self: DomRange) => DomDocumentFragment | null
    insertNode: (self: DomRange, node: DomNode) => void
    surroundContents: (self: DomRange, newParent: DomNode) => void
    cloneRange: (self: DomRange) => DomRange
    detach: (self: DomRange) => void
    isPointInRange: (self: DomRange, node: DomNode, offset: number) => boolean
    comparePoint: (self: DomRange, node: DomNode, offset: number) => number
    intersectsNode: (self: DomRange, node: DomNode) => boolean
    toString: (self: DomRange) => string
    getStartContainer: (self: DomRange) => DomNode
    getStartOffset: (self: DomRange) => number
    getEndContainer: (self: DomRange) => DomNode
    getEndOffset: (self: DomRange) => number
    getCollapsed: (self: DomRange) => boolean
    getCommonAncestorContainer: (self: DomRange) => DomNode
    static name: string
}
export abstract class XPathContextIface {
    /* Fields of GXml.XPathContextIface */
    parentIface: GObject.TypeInterface
    evaluate: (self: XPathContext, expression: string, resolver?: Gee.List | null) => XPathObject
    static name: string
}
export abstract class XPathObjectIface {
    /* Fields of GXml.XPathObjectIface */
    parentIface: GObject.TypeInterface
    getObjectType: (self: XPathObject) => XPathObjectType
    getBooleanValue: (self: XPathObject) => boolean
    getStringValue: (self: XPathObject) => string
    getNumberValue: (self: XPathObject) => number
    getNodeset: (self: XPathObject) => DomHTMLCollection
    static name: string
}
export abstract class GomObjectIface {
    /* Fields of GXml.GomObjectIface */
    parentIface: GObject.TypeInterface
    getPropertiesList: (self: GomObject) => GObject.ParamSpec[]
    findPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    findObjectPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    getPropertyElementList: (self: GomObject) => GObject.ParamSpec[]
    getPropertyString: (self: GomObject, prop: GObject.ParamSpec) => string | null
    getAttribute: (self: GomObject, name: string) => string | null
    setAttribute: (self: GomObject, name: string, val: string) => boolean
    getChild: (self: GomObject, name: string) => DomElement | null
    findElements: (self: GomObject, name: string) => DomElementList
    removeAttribute: (self: GomObject, name: string) => boolean
    setInstanceProperty: (self: GomObject, name: string) => boolean
    cleanPropertyElements: (self: GomObject, name: string) => void
    static name: string
}
export abstract class GomCollectionIface {
    /* Fields of GXml.GomCollectionIface */
    parentIface: GObject.TypeInterface
    search: (self: GomCollection) => void
    getItem: (self: GomCollection, index: number) => DomElement | null
    append: (self: GomCollection, node: DomElement) => void
    initialize: (self: GomCollection, t: GObject.Type) => void
    createItem: (self: GomCollection) => GomElement | null
    validateAppend: (self: GomCollection, index: number, element: DomElement) => boolean
    getNodesIndex: (self: GomCollection) => GLib.Queue
    getElement: (self: GomCollection) => GomElement
    setElement: (self: GomCollection, value: GomElement) => void
    getItemsName: (self: GomCollection) => string
    getItemsType: (self: GomCollection) => GObject.Type
    setItemsType: (self: GomCollection, value: GObject.Type) => void
    getLength: (self: GomCollection) => number
    static name: string
}
export abstract class MappeableElementIface {
    /* Fields of GXml.MappeableElementIface */
    parentIface: GObject.TypeInterface
    getMapKey: (self: MappeableElement) => string
    static name: string
}
export abstract class MappeableElementPairKeyIface {
    /* Fields of GXml.MappeableElementPairKeyIface */
    parentIface: GObject.TypeInterface
    getMapPrimaryKey: (self: MappeableElementPairKey) => string
    getMapSecondaryKey: (self: MappeableElementPairKey) => string
    static name: string
}
export abstract class MappeableElementThreeKeyIface {
    /* Fields of GXml.MappeableElementThreeKeyIface */
    parentIface: GObject.TypeInterface
    getMapPkey: (self: MappeableElementThreeKey) => string
    getMapSkey: (self: MappeableElementThreeKey) => string
    getMapTkey: (self: MappeableElementThreeKey) => string
    static name: string
}
export abstract class GomPropertyIface {
    /* Fields of GXml.GomPropertyIface */
    parentIface: GObject.TypeInterface
    validateValue: (self: GomProperty, val: string) => boolean
    getValue: (self: GomProperty) => string | null
    setValue: (self: GomProperty, value?: string | null) => void
    static name: string
}
export abstract class ParserIface {
    /* Fields of GXml.ParserIface */
    parentIface: GObject.TypeInterface
    writeFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    writeString: (self: Parser) => string
    writeStream: (self: Parser, stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => void
    readFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readStream: (self: Parser, stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readString: (self: Parser, str: string, cancellable?: Gio.Cancellable | null) => void
    getBackup: (self: Parser) => boolean
    setBackup: (self: Parser, value: boolean) => void
    getIndent: (self: Parser) => boolean
    setIndent: (self: Parser, value: boolean) => void
    getNode: (self: Parser) => DomNode
    static name: string
}
export abstract class IXsdSchemaIface {
    /* Fields of GXml.IXsdSchemaIface */
    parentIface: GObject.TypeInterface
    getElementDefinitions: (self: IXsdSchema) => IXsdListElements
    setElementDefinitions: (self: IXsdSchema, value: IXsdListElements) => void
    getSimpleTypeDefinitions: (self: IXsdSchema) => IXsdListSimpleTypes
    setSimpleTypeDefinitions: (self: IXsdSchema, value: IXsdListSimpleTypes) => void
    getComplexTypeDefinitions: (self: IXsdSchema) => IXsdListComplexTypes
    setComplexTypeDefinitions: (self: IXsdSchema, value: IXsdListComplexTypes) => void
    static name: string
}
export abstract class IXsdBaseTypeIface {
    /* Fields of GXml.IXsdBaseTypeIface */
    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseType) => IXsdAnnotation
    setAnotation: (self: IXsdBaseType, value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleTypeIface {
    /* Fields of GXml.IXsdSimpleTypeIface */
    parentIface: GObject.TypeInterface
    getFinal: (self: IXsdSimpleType) => string
    setFinal: (self: IXsdSimpleType, value: string) => void
    getId: (self: IXsdSimpleType) => string
    setId: (self: IXsdSimpleType, value: string) => void
    getName: (self: IXsdSimpleType) => string
    setName: (self: IXsdSimpleType, value: string) => void
    getAnnotation: (self: IXsdSimpleType) => IXsdAnnotation
    setAnnotation: (self: IXsdSimpleType, value: IXsdAnnotation) => void
    getList: (self: IXsdSimpleType) => IXsdTypeList
    setList: (self: IXsdSimpleType, value: IXsdTypeList) => void
    getUnion: (self: IXsdSimpleType) => IXsdTypeUnion
    setUnion: (self: IXsdSimpleType, value: IXsdTypeUnion) => void
    getRestriction: (self: IXsdSimpleType) => IXsdTypeRestriction
    setRestriction: (self: IXsdSimpleType, value: IXsdTypeRestriction) => void
    static name: string
}
export abstract class IXsdTypeDefIface {
    /* Fields of GXml.IXsdTypeDefIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionIface {
    /* Fields of GXml.IXsdTypeRestrictionIface */
    parentIface: GObject.TypeInterface
    getBase: (self: IXsdTypeRestriction) => string
    setBase: (self: IXsdTypeRestriction, value: string) => void
    getId: (self: IXsdTypeRestriction) => string
    setId: (self: IXsdTypeRestriction, value: string) => void
    getSimpleType: (self: IXsdTypeRestriction) => IXsdSimpleType
    setSimpleType: (self: IXsdTypeRestriction, value: IXsdSimpleType) => void
    getEnumerations: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionEnumerations
    setEnumerations: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionEnumerations) => void
    getWhiteSpaces: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionWhiteSpaces) => void
    static name: string
}
export abstract class IXsdTypeListIface {
    /* Fields of GXml.IXsdTypeListIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeUnionIface {
    /* Fields of GXml.IXsdTypeUnionIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionDefIface {
    /* Fields of GXml.IXsdTypeRestrictionDefIface */
    parentIface: GObject.TypeInterface
    getAnnotation: (self: IXsdTypeRestrictionDef) => IXsdAnnotation
    setAnnotation: (self: IXsdTypeRestrictionDef, value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdTypeRestrictionMinExclusiveIface {
    /* Fields of GXml.IXsdTypeRestrictionMinExclusiveIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionMinInclusiveIface {
    /* Fields of GXml.IXsdTypeRestrictionMinInclusiveIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionMaxExclusiveIface {
    /* Fields of GXml.IXsdTypeRestrictionMaxExclusiveIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionMaxInclusiveIface {
    /* Fields of GXml.IXsdTypeRestrictionMaxInclusiveIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionTotalDigitsIface {
    /* Fields of GXml.IXsdTypeRestrictionTotalDigitsIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionFractionDigitsIface {
    /* Fields of GXml.IXsdTypeRestrictionFractionDigitsIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionLengthIface {
    /* Fields of GXml.IXsdTypeRestrictionLengthIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionMinLengthIface {
    /* Fields of GXml.IXsdTypeRestrictionMinLengthIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionMaxLengthIface {
    /* Fields of GXml.IXsdTypeRestrictionMaxLengthIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionEnumerationIface {
    /* Fields of GXml.IXsdTypeRestrictionEnumerationIface */
    parentIface: GObject.TypeInterface
    getId: (self: IXsdTypeRestrictionEnumeration) => string
    setId: (self: IXsdTypeRestrictionEnumeration, value: string) => void
    getValue: (self: IXsdTypeRestrictionEnumeration) => string
    setValue: (self: IXsdTypeRestrictionEnumeration, value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionWhiteSpaceIface {
    /* Fields of GXml.IXsdTypeRestrictionWhiteSpaceIface */
    parentIface: GObject.TypeInterface
    getFixed: (self: IXsdTypeRestrictionWhiteSpace) => boolean
    setFixed: (self: IXsdTypeRestrictionWhiteSpace, value: boolean) => void
    getId: (self: IXsdTypeRestrictionWhiteSpace) => string
    setId: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
    getValue: (self: IXsdTypeRestrictionWhiteSpace) => string
    setValue: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
    static name: string
}
export abstract class IXsdTypeRestrictionPatternIface {
    /* Fields of GXml.IXsdTypeRestrictionPatternIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionAssertionIface {
    /* Fields of GXml.IXsdTypeRestrictionAssertionIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdTypeRestrictionExplicitTimezoneIface {
    /* Fields of GXml.IXsdTypeRestrictionExplicitTimezoneIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdComplexTypeIface {
    /* Fields of GXml.IXsdComplexTypeIface */
    parentIface: GObject.TypeInterface
    getAbstract: (self: IXsdComplexType) => boolean
    setAbstract: (self: IXsdComplexType, value: boolean) => void
    getBlock: (self: IXsdComplexType) => string
    setBlock: (self: IXsdComplexType, value: string) => void
    getFinal: (self: IXsdComplexType) => string
    setFinal: (self: IXsdComplexType, value: string) => void
    getMixed: (self: IXsdComplexType) => boolean
    setMixed: (self: IXsdComplexType, value: boolean) => void
    getName: (self: IXsdComplexType) => string
    setName: (self: IXsdComplexType, value: string) => void
    getDefaultAttributesApply: (self: IXsdComplexType) => boolean
    setDefaultAttributesApply: (self: IXsdComplexType, value: boolean) => void
    getContentType: (self: IXsdComplexType) => IXsdBaseContent
    setContentType: (self: IXsdComplexType, value: IXsdBaseContent) => void
    getTypeAttributes: (self: IXsdComplexType) => IXsdListAttributes
    getGroupAttributes: (self: IXsdComplexType) => IXsdListAttributesGroup
    static name: string
}
export abstract class IXsdExtensionIface {
    /* Fields of GXml.IXsdExtensionIface */
    parentIface: GObject.TypeInterface
    getBase: (self: IXsdExtension) => string
    setBase: (self: IXsdExtension, value: string) => void
    static name: string
}
export abstract class IXsdElementIface {
    /* Fields of GXml.IXsdElementIface */
    parentIface: GObject.TypeInterface
    getAbstract: (self: IXsdElement) => boolean
    setAbstract: (self: IXsdElement, value: boolean) => void
    getBlock: (self: IXsdElement) => string
    setBlock: (self: IXsdElement, value: string) => void
    getDefault: (self: IXsdElement) => string
    setDefault: (self: IXsdElement, value: string) => void
    getFinal: (self: IXsdElement) => string
    setFinal: (self: IXsdElement, value: string) => void
    getFixed: (self: IXsdElement) => string
    setFixed: (self: IXsdElement, value: string) => void
    getForm: (self: IXsdElement) => string
    setForm: (self: IXsdElement, value: string) => void
    getId: (self: IXsdElement) => string | null
    setId: (self: IXsdElement, value?: string | null) => void
    getMaxOccurs: (self: IXsdElement) => string
    setMaxOccurs: (self: IXsdElement, value: string) => void
    getMinOccurs: (self: IXsdElement) => string
    setMinOccurs: (self: IXsdElement, value: string) => void
    getName: (self: IXsdElement) => string
    setName: (self: IXsdElement, value: string) => void
    getNillable: (self: IXsdElement) => boolean
    setNillable: (self: IXsdElement, value: boolean) => void
    getRef: (self: IXsdElement) => string
    setRef: (self: IXsdElement, value: string) => void
    getSubstitutionGroup: (self: IXsdElement) => DomTokenList
    setSubstitutionGroup: (self: IXsdElement, value: DomTokenList) => void
    getTargetNamespace: (self: IXsdElement) => string
    setTargetNamespace: (self: IXsdElement, value: string) => void
    getObjectType: (self: IXsdElement) => string
    setObjectType: (self: IXsdElement, value: string) => void
    getAnotation: (self: IXsdElement) => IXsdAnnotation
    setAnotation: (self: IXsdElement, value: IXsdAnnotation) => void
    getSimpleType: (self: IXsdElement) => IXsdSimpleType
    setSimpleType: (self: IXsdElement, value: IXsdSimpleType) => void
    getComplexType: (self: IXsdElement) => IXsdComplexType
    setComplexType: (self: IXsdElement, value: IXsdComplexType) => void
    static name: string
}
export abstract class IXsdAnnotationIface {
    /* Fields of GXml.IXsdAnnotationIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdBaseContentIface {
    /* Fields of GXml.IXsdBaseContentIface */
    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseContent) => IXsdAnnotation
    setAnotation: (self: IXsdBaseContent, value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdSimpleContentIface {
    /* Fields of GXml.IXsdSimpleContentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdComplexContentIface {
    /* Fields of GXml.IXsdComplexContentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdOpenContentIface {
    /* Fields of GXml.IXsdOpenContentIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdBaseAttributeIface {
    /* Fields of GXml.IXsdBaseAttributeIface */
    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseAttribute) => IXsdAnnotation
    setAnotation: (self: IXsdBaseAttribute, value: IXsdAnnotation) => void
    static name: string
}
export abstract class IXsdAttributeIface {
    /* Fields of GXml.IXsdAttributeIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdAttributeGroupIface {
    /* Fields of GXml.IXsdAttributeGroupIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListIface {
    /* Fields of GXml.IXsdListIface */
    parentIface: GObject.TypeInterface
    getItem: (self: IXsdList, index: number) => DomElement | null
    append: (self: IXsdList, element: DomElement) => void
    remove: (self: IXsdList, index: number) => void
    indexOf: (self: IXsdList, element: DomElement) => number
    getElement: (self: IXsdList) => DomElement
    setElement: (self: IXsdList, value: DomElement) => void
    getItemsType: (self: IXsdList) => GObject.Type
    setItemsType: (self: IXsdList, value: GObject.Type) => void
    getItemsName: (self: IXsdList) => GObject.Type
    setItemsName: (self: IXsdList, value: GObject.Type) => void
    getLength: (self: IXsdList) => number
    static name: string
}
export abstract class IXsdListElementsIface {
    /* Fields of GXml.IXsdListElementsIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListSimpleTypesIface {
    /* Fields of GXml.IXsdListSimpleTypesIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListComplexTypesIface {
    /* Fields of GXml.IXsdListComplexTypesIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListAttributesIface {
    /* Fields of GXml.IXsdListAttributesIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListAttributesGroupIface {
    /* Fields of GXml.IXsdListAttributesGroupIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListTypeRestrictionEnumerationsIface {
    /* Fields of GXml.IXsdListTypeRestrictionEnumerationsIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class IXsdListTypeRestrictionWhiteSpacesIface {
    /* Fields of GXml.IXsdListTypeRestrictionWhiteSpacesIface */
    parentIface: GObject.TypeInterface
    static name: string
}
}